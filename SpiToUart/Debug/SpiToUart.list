
SpiToUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bc4  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08006dfc  08006dfc  00007dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006f08  08006f08  00007f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006f10  08006f10  00007f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006f14  08006f14  00007f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000009  20000000  08006f18  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000144  2000000c  08006f21  0000800c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000150  08006f21  00008150  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00008009  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001107f  00000000  00000000  0000803f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000203e  00000000  00000000  000190be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d40  00000000  00000000  0001b100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a39  00000000  00000000  0001be40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032557  00000000  00000000  0001c879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010997  00000000  00000000  0004edd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013d488  00000000  00000000  0005f767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0019cbef  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000374c  00000000  00000000  0019cc34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001a0380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	08006de4 	.word	0x08006de4

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	08006de4 	.word	0x08006de4

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000288:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08e      	sub	sp, #56	@ 0x38
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fb47 	bl	8000c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f833 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f96b 	bl	8000878 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005a2:	f000 f88b 	bl	80006bc <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80005a6:	f000 f8f3 	bl	8000790 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t txData[] = "Hello UART!";
 80005aa:	4a14      	ldr	r2, [pc, #80]	@ (80005fc <main+0x6c>)
 80005ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80005b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint8_t spi_rx_buffer[20];
// SPI to UART
  while (1)
  {
    /* USER CODE END WHILE */
	  if (HAL_SPI_Receive(&hspi1, spi_rx_buffer, sizeof(spi_rx_buffer), HAL_MAX_DELAY) == HAL_OK)
 80005b6:	1d39      	adds	r1, r7, #4
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005bc:	2214      	movs	r2, #20
 80005be:	4810      	ldr	r0, [pc, #64]	@ (8000600 <main+0x70>)
 80005c0:	f005 fa8e 	bl	8005ae0 <HAL_SPI_Receive>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d105      	bne.n	80005d6 <main+0x46>
	  {
		/* Transmit received data over UART */
		UART_Transmit(spi_rx_buffer, HAL_MAX_DELAY);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f929 	bl	8000828 <UART_Transmit>
	  }

	  if(UART_Receive(rxData, sizeof(rxData)) == HAL_OK)
 80005d6:	f107 0318 	add.w	r3, r7, #24
 80005da:	2114      	movs	r1, #20
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 f937 	bl	8000850 <UART_Receive>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d1e6      	bne.n	80005b6 <main+0x26>
	  {
		HAL_SPI_Transmit(&hspi1, rxData, sizeof(rxData),HAL_MAX_DELAY);
 80005e8:	f107 0118 	add.w	r1, r7, #24
 80005ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005f0:	2214      	movs	r2, #20
 80005f2:	4803      	ldr	r0, [pc, #12]	@ (8000600 <main+0x70>)
 80005f4:	f005 f864 	bl	80056c0 <HAL_SPI_Transmit>
	  if (HAL_SPI_Receive(&hspi1, spi_rx_buffer, sizeof(spi_rx_buffer), HAL_MAX_DELAY) == HAL_OK)
 80005f8:	e7dd      	b.n	80005b6 <main+0x26>
 80005fa:	bf00      	nop
 80005fc:	08006dfc 	.word	0x08006dfc
 8000600:	20000028 	.word	0x20000028

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b09e      	sub	sp, #120	@ 0x78
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0318 	add.w	r3, r7, #24
 800060e:	2260      	movs	r2, #96	@ 0x60
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f006 fbba 	bl	8006d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	463b      	mov	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]
 8000626:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000628:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800062c:	f000 ff1a 	bl	8001464 <HAL_PWREx_ControlVoltageScaling>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000636:	f000 f973 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800063a:	2310      	movs	r3, #16
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800063e:	2301      	movs	r3, #1
 8000640:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000642:	2310      	movs	r3, #16
 8000644:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000646:	2300      	movs	r3, #0
 8000648:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800064e:	2301      	movs	r3, #1
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8000652:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000656:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000658:	2303      	movs	r3, #3
 800065a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 800065c:	230a      	movs	r3, #10
 800065e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000660:	2302      	movs	r3, #2
 8000662:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000664:	2302      	movs	r3, #2
 8000666:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000668:	2301      	movs	r3, #1
 800066a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800066c:	230c      	movs	r3, #12
 800066e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0318 	add.w	r3, r7, #24
 8000678:	4618      	mov	r0, r3
 800067a:	f000 ff7f 	bl	800157c <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000684:	f000 f94c 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	231f      	movs	r3, #31
 800068a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2303      	movs	r3, #3
 800068e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	2104      	movs	r1, #4
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 fe45 	bl	8002334 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006b0:	f000 f936 	bl	8000920 <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3778      	adds	r7, #120	@ 0x78
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000788 <MX_SPI1_Init+0xcc>)
 80006ce:	4a2f      	ldr	r2, [pc, #188]	@ (800078c <MX_SPI1_Init+0xd0>)
 80006d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000788 <MX_SPI1_Init+0xcc>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000788 <MX_SPI1_Init+0xcc>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006de:	4b2a      	ldr	r3, [pc, #168]	@ (8000788 <MX_SPI1_Init+0xcc>)
 80006e0:	2207      	movs	r2, #7
 80006e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e4:	4b28      	ldr	r3, [pc, #160]	@ (8000788 <MX_SPI1_Init+0xcc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ea:	4b27      	ldr	r3, [pc, #156]	@ (8000788 <MX_SPI1_Init+0xcc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006f0:	4b25      	ldr	r3, [pc, #148]	@ (8000788 <MX_SPI1_Init+0xcc>)
 80006f2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80006f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f8:	4b23      	ldr	r3, [pc, #140]	@ (8000788 <MX_SPI1_Init+0xcc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fe:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <MX_SPI1_Init+0xcc>)
 8000700:	2200      	movs	r2, #0
 8000702:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000704:	4b20      	ldr	r3, [pc, #128]	@ (8000788 <MX_SPI1_Init+0xcc>)
 8000706:	2200      	movs	r2, #0
 8000708:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800070a:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <MX_SPI1_Init+0xcc>)
 800070c:	2207      	movs	r2, #7
 800070e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000710:	4b1d      	ldr	r3, [pc, #116]	@ (8000788 <MX_SPI1_Init+0xcc>)
 8000712:	2200      	movs	r2, #0
 8000714:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000716:	4b1c      	ldr	r3, [pc, #112]	@ (8000788 <MX_SPI1_Init+0xcc>)
 8000718:	2200      	movs	r2, #0
 800071a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800071c:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <MX_SPI1_Init+0xcc>)
 800071e:	2200      	movs	r2, #0
 8000720:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000722:	4b19      	ldr	r3, [pc, #100]	@ (8000788 <MX_SPI1_Init+0xcc>)
 8000724:	2200      	movs	r2, #0
 8000726:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000728:	4b17      	ldr	r3, [pc, #92]	@ (8000788 <MX_SPI1_Init+0xcc>)
 800072a:	2200      	movs	r2, #0
 800072c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800072e:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <MX_SPI1_Init+0xcc>)
 8000730:	2200      	movs	r2, #0
 8000732:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000734:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <MX_SPI1_Init+0xcc>)
 8000736:	2200      	movs	r2, #0
 8000738:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <MX_SPI1_Init+0xcc>)
 800073c:	2200      	movs	r2, #0
 800073e:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000740:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_SPI1_Init+0xcc>)
 8000742:	2200      	movs	r2, #0
 8000744:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000746:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <MX_SPI1_Init+0xcc>)
 8000748:	2200      	movs	r2, #0
 800074a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800074c:	480e      	ldr	r0, [pc, #56]	@ (8000788 <MX_SPI1_Init+0xcc>)
 800074e:	f004 fea1 	bl	8005494 <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000758:	f000 f8e2 	bl	8000920 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000760:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000764:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	4619      	mov	r1, r3
 800076e:	4806      	ldr	r0, [pc, #24]	@ (8000788 <MX_SPI1_Init+0xcc>)
 8000770:	f005 fc41 	bl	8005ff6 <HAL_SPIEx_SetConfigAutonomousMode>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_SPI1_Init+0xc2>
  {
    Error_Handler();
 800077a:	f000 f8d1 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000028 	.word	0x20000028
 800078c:	40013000 	.word	0x40013000

08000790 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000794:	4b22      	ldr	r3, [pc, #136]	@ (8000820 <MX_USART3_UART_Init+0x90>)
 8000796:	4a23      	ldr	r2, [pc, #140]	@ (8000824 <MX_USART3_UART_Init+0x94>)
 8000798:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800079a:	4b21      	ldr	r3, [pc, #132]	@ (8000820 <MX_USART3_UART_Init+0x90>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000820 <MX_USART3_UART_Init+0x90>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000820 <MX_USART3_UART_Init+0x90>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000820 <MX_USART3_UART_Init+0x90>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <MX_USART3_UART_Init+0x90>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <MX_USART3_UART_Init+0x90>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <MX_USART3_UART_Init+0x90>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c6:	4b16      	ldr	r3, [pc, #88]	@ (8000820 <MX_USART3_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007cc:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <MX_USART3_UART_Init+0x90>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <MX_USART3_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007d8:	4811      	ldr	r0, [pc, #68]	@ (8000820 <MX_USART3_UART_Init+0x90>)
 80007da:	f005 fc4d 	bl	8006078 <HAL_UART_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007e4:	f000 f89c 	bl	8000920 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e8:	2100      	movs	r1, #0
 80007ea:	480d      	ldr	r0, [pc, #52]	@ (8000820 <MX_USART3_UART_Init+0x90>)
 80007ec:	f006 fa04 	bl	8006bf8 <HAL_UARTEx_SetTxFifoThreshold>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007f6:	f000 f893 	bl	8000920 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fa:	2100      	movs	r1, #0
 80007fc:	4808      	ldr	r0, [pc, #32]	@ (8000820 <MX_USART3_UART_Init+0x90>)
 80007fe:	f006 fa39 	bl	8006c74 <HAL_UARTEx_SetRxFifoThreshold>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000808:	f000 f88a 	bl	8000920 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	@ (8000820 <MX_USART3_UART_Init+0x90>)
 800080e:	f006 f9ba 	bl	8006b86 <HAL_UARTEx_DisableFifoMode>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000818:	f000 f882 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000b8 	.word	0x200000b8
 8000824:	40004800 	.word	0x40004800

08000828 <UART_Transmit>:
void UART_Transmit(uint8_t *pData, uint16_t Size)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&huart3, pData, Size, HAL_MAX_DELAY);
 8000834:	887a      	ldrh	r2, [r7, #2]
 8000836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	4803      	ldr	r0, [pc, #12]	@ (800084c <UART_Transmit+0x24>)
 800083e:	f005 fc6b 	bl	8006118 <HAL_UART_Transmit>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000b8 	.word	0x200000b8

08000850 <UART_Receive>:

void UART_Receive(uint8_t *pData, uint16_t Size)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	807b      	strh	r3, [r7, #2]
  HAL_UART_Receive(&huart3, pData, Size, HAL_MAX_DELAY);
 800085c:	887a      	ldrh	r2, [r7, #2]
 800085e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	4803      	ldr	r0, [pc, #12]	@ (8000874 <UART_Receive+0x24>)
 8000866:	f005 fcf5 	bl	8006254 <HAL_UART_Receive>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000b8 	.word	0x200000b8

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <MX_GPIO_Init+0xa0>)
 8000890:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000894:	4a20      	ldr	r2, [pc, #128]	@ (8000918 <MX_GPIO_Init+0xa0>)
 8000896:	f043 0304 	orr.w	r3, r3, #4
 800089a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800089e:	4b1e      	ldr	r3, [pc, #120]	@ (8000918 <MX_GPIO_Init+0xa0>)
 80008a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008a4:	f003 0304 	and.w	r3, r3, #4
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <MX_GPIO_Init+0xa0>)
 80008ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008b2:	4a19      	ldr	r2, [pc, #100]	@ (8000918 <MX_GPIO_Init+0xa0>)
 80008b4:	f043 0310 	orr.w	r3, r3, #16
 80008b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008bc:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <MX_GPIO_Init+0xa0>)
 80008be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008c2:	f003 0310 	and.w	r3, r3, #16
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <MX_GPIO_Init+0xa0>)
 80008cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008d0:	4a11      	ldr	r2, [pc, #68]	@ (8000918 <MX_GPIO_Init+0xa0>)
 80008d2:	f043 0308 	orr.w	r3, r3, #8
 80008d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008da:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <MX_GPIO_Init+0xa0>)
 80008dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008e0:	f003 0308 	and.w	r3, r3, #8
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2102      	movs	r1, #2
 80008ec:	480b      	ldr	r0, [pc, #44]	@ (800091c <MX_GPIO_Init+0xa4>)
 80008ee:	f000 fda1 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80008f2:	2302      	movs	r3, #2
 80008f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fe:	2302      	movs	r3, #2
 8000900:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	4619      	mov	r1, r3
 8000908:	4804      	ldr	r0, [pc, #16]	@ (800091c <MX_GPIO_Init+0xa4>)
 800090a:	f000 fbbb 	bl	8001084 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090e:	bf00      	nop
 8000910:	3720      	adds	r7, #32
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	46020c00 	.word	0x46020c00
 800091c:	42020800 	.word	0x42020800

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <Error_Handler+0x8>

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <HAL_MspInit+0x30>)
 8000934:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000938:	4a08      	ldr	r2, [pc, #32]	@ (800095c <HAL_MspInit+0x30>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000942:	4b06      	ldr	r3, [pc, #24]	@ (800095c <HAL_MspInit+0x30>)
 8000944:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000948:	f003 0304 	and.w	r3, r3, #4
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	46020c00 	.word	0x46020c00

08000960 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b0bc      	sub	sp, #240	@ 0xf0
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	22c8      	movs	r2, #200	@ 0xc8
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f006 fa03 	bl	8006d8c <memset>
  if(hspi->Instance==SPI1)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a27      	ldr	r2, [pc, #156]	@ (8000a28 <HAL_SPI_MspInit+0xc8>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d147      	bne.n	8000a20 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000990:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000994:	f04f 0300 	mov.w	r3, #0
 8000998:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 800099c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80009a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 f893 	bl	8002ad4 <HAL_RCCEx_PeriphCLKConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80009b4:	f7ff ffb4 	bl	8000920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009b8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a2c <HAL_SPI_MspInit+0xcc>)
 80009ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80009be:	4a1b      	ldr	r2, [pc, #108]	@ (8000a2c <HAL_SPI_MspInit+0xcc>)
 80009c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009c4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80009c8:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <HAL_SPI_MspInit+0xcc>)
 80009ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80009ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <HAL_SPI_MspInit+0xcc>)
 80009d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009dc:	4a13      	ldr	r2, [pc, #76]	@ (8000a2c <HAL_SPI_MspInit+0xcc>)
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <HAL_SPI_MspInit+0xcc>)
 80009e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ec:	f003 0310 	and.w	r3, r3, #16
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PE14     ------> SPI1_MISO
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 80009f4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80009f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a0e:	2305      	movs	r3, #5
 8000a10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a14:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <HAL_SPI_MspInit+0xd0>)
 8000a1c:	f000 fb32 	bl	8001084 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	37f0      	adds	r7, #240	@ 0xf0
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40013000 	.word	0x40013000
 8000a2c:	46020c00 	.word	0x46020c00
 8000a30:	42021000 	.word	0x42021000

08000a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b0bc      	sub	sp, #240	@ 0xf0
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	22c8      	movs	r2, #200	@ 0xc8
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f006 f999 	bl	8006d8c <memset>
  if(huart->Instance==USART3)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a26      	ldr	r2, [pc, #152]	@ (8000af8 <HAL_UART_MspInit+0xc4>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d145      	bne.n	8000af0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a64:	f04f 0204 	mov.w	r2, #4
 8000a68:	f04f 0300 	mov.w	r3, #0
 8000a6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f002 f82b 	bl	8002ad4 <HAL_RCCEx_PeriphCLKConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000a84:	f7ff ff4c 	bl	8000920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a88:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <HAL_UART_MspInit+0xc8>)
 8000a8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000afc <HAL_UART_MspInit+0xc8>)
 8000a90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a94:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000a98:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <HAL_UART_MspInit+0xc8>)
 8000a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <HAL_UART_MspInit+0xc8>)
 8000aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aac:	4a13      	ldr	r2, [pc, #76]	@ (8000afc <HAL_UART_MspInit+0xc8>)
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ab6:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <HAL_UART_MspInit+0xc8>)
 8000ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000abc:	f003 0308 	and.w	r3, r3, #8
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ac4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ac8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ade:	2307      	movs	r3, #7
 8000ae0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <HAL_UART_MspInit+0xcc>)
 8000aec:	f000 faca 	bl	8001084 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000af0:	bf00      	nop
 8000af2:	37f0      	adds	r7, #240	@ 0xf0
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40004800 	.word	0x40004800
 8000afc:	46020c00 	.word	0x46020c00
 8000b00:	42020c00 	.word	0x42020c00

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <NMI_Handler+0x4>

08000b0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <BusFault_Handler+0x4>

08000b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <UsageFault_Handler+0x4>

08000b2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5a:	f000 f90b 	bl	8000d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b68:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <SystemInit+0x68>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b6e:	4a17      	ldr	r2, [pc, #92]	@ (8000bcc <SystemInit+0x68>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000b78:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <SystemInit+0x6c>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <SystemInit+0x6c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000b84:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <SystemInit+0x6c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <SystemInit+0x6c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000b90:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <SystemInit+0x6c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd0 <SystemInit+0x6c>)
 8000b96:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000b9a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000b9e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <SystemInit+0x6c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <SystemInit+0x6c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a09      	ldr	r2, [pc, #36]	@ (8000bd0 <SystemInit+0x6c>)
 8000bac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bb0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <SystemInit+0x6c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bb8:	4b04      	ldr	r3, [pc, #16]	@ (8000bcc <SystemInit+0x68>)
 8000bba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000bbe:	609a      	str	r2, [r3, #8]
  #endif
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00
 8000bd0:	46020c00 	.word	0x46020c00

08000bd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000bd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c0c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bd8:	f7ff ffc4 	bl	8000b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bdc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bde:	e003      	b.n	8000be8 <LoopCopyDataInit>

08000be0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000be0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000be2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000be4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000be6:	3104      	adds	r1, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000be8:	480a      	ldr	r0, [pc, #40]	@ (8000c14 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bea:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bf0:	d3f6      	bcc.n	8000be0 <CopyDataInit>
	ldr	r2, =_sbss
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c1c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bf4:	e002      	b.n	8000bfc <LoopFillZerobss>

08000bf6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bf6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bf8:	f842 3b04 	str.w	r3, [r2], #4

08000bfc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <LoopForever+0x16>)
	cmp	r2, r3
 8000bfe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c00:	d3f9      	bcc.n	8000bf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c02:	f006 f8cb 	bl	8006d9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c06:	f7ff fcc3 	bl	8000590 <main>

08000c0a <LoopForever>:

LoopForever:
    b LoopForever
 8000c0a:	e7fe      	b.n	8000c0a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000c0c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000c10:	08006f18 	.word	0x08006f18
	ldr	r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c18:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000c1c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000c20:	20000150 	.word	0x20000150

08000c24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC1_IRQHandler>
	...

08000c28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <HAL_Init+0x50>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a11      	ldr	r2, [pc, #68]	@ (8000c78 <HAL_Init+0x50>)
 8000c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 f94a 	bl	8000ed2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000c3e:	f001 fd6b 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8000c42:	4602      	mov	r2, r0
 8000c44:	4b0d      	ldr	r3, [pc, #52]	@ (8000c7c <HAL_Init+0x54>)
 8000c46:	6a1b      	ldr	r3, [r3, #32]
 8000c48:	f003 030f 	and.w	r3, r3, #15
 8000c4c:	490c      	ldr	r1, [pc, #48]	@ (8000c80 <HAL_Init+0x58>)
 8000c4e:	5ccb      	ldrb	r3, [r1, r3]
 8000c50:	fa22 f303 	lsr.w	r3, r2, r3
 8000c54:	4a0b      	ldr	r2, [pc, #44]	@ (8000c84 <HAL_Init+0x5c>)
 8000c56:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c58:	2004      	movs	r0, #4
 8000c5a:	f000 f981 	bl	8000f60 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c5e:	200f      	movs	r0, #15
 8000c60:	f000 f812 	bl	8000c88 <HAL_InitTick>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e002      	b.n	8000c74 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6e:	f7ff fe5d 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40022000 	.word	0x40022000
 8000c7c:	46020c00 	.word	0x46020c00
 8000c80:	08006e08 	.word	0x08006e08
 8000c84:	20000000 	.word	0x20000000

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000c94:	4b33      	ldr	r3, [pc, #204]	@ (8000d64 <HAL_InitTick+0xdc>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d101      	bne.n	8000ca0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e05c      	b.n	8000d5a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000ca0:	4b31      	ldr	r3, [pc, #196]	@ (8000d68 <HAL_InitTick+0xe0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	d10c      	bne.n	8000cc6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000cac:	4b2f      	ldr	r3, [pc, #188]	@ (8000d6c <HAL_InitTick+0xe4>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <HAL_InitTick+0xdc>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	e037      	b.n	8000d36 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000cc6:	f000 f9a3 	bl	8001010 <HAL_SYSTICK_GetCLKSourceConfig>
 8000cca:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d023      	beq.n	8000d1a <HAL_InitTick+0x92>
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d82d      	bhi.n	8000d34 <HAL_InitTick+0xac>
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <HAL_InitTick+0x5e>
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d00d      	beq.n	8000d00 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000ce4:	e026      	b.n	8000d34 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000ce6:	4b21      	ldr	r3, [pc, #132]	@ (8000d6c <HAL_InitTick+0xe4>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	4b1e      	ldr	r3, [pc, #120]	@ (8000d64 <HAL_InitTick+0xdc>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	4619      	mov	r1, r3
 8000cf0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000cf4:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfc:	60fb      	str	r3, [r7, #12]
        break;
 8000cfe:	e01a      	b.n	8000d36 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000d00:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <HAL_InitTick+0xdc>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d0e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	60fb      	str	r3, [r7, #12]
        break;
 8000d18:	e00d      	b.n	8000d36 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000d1a:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <HAL_InitTick+0xdc>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d28:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d30:	60fb      	str	r3, [r7, #12]
        break;
 8000d32:	e000      	b.n	8000d36 <HAL_InitTick+0xae>
        break;
 8000d34:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000d36:	68f8      	ldr	r0, [r7, #12]
 8000d38:	f000 f8f0 	bl	8000f1c <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e009      	b.n	8000d5a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d46:	2200      	movs	r2, #0
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d4e:	f000 f8cb 	bl	8000ee8 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000d52:	4a07      	ldr	r2, [pc, #28]	@ (8000d70 <HAL_InitTick+0xe8>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008
 8000d68:	e000e010 	.word	0xe000e010
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000004 	.word	0x20000004

08000d74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <HAL_IncTick+0x20>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <HAL_IncTick+0x24>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a04      	ldr	r2, [pc, #16]	@ (8000d98 <HAL_IncTick+0x24>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008
 8000d98:	2000014c 	.word	0x2000014c

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b03      	ldr	r3, [pc, #12]	@ (8000db0 <HAL_GetTick+0x14>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	2000014c 	.word	0x2000014c

08000db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ddc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de6:	4a04      	ldr	r2, [pc, #16]	@ (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	60d3      	str	r3, [r2, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e00:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <__NVIC_GetPriorityGrouping+0x18>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	f003 0307 	and.w	r3, r3, #7
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	@ (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	@ (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	@ 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
         );
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	@ 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ff6a 	bl	8000db4 <__NVIC_SetPriorityGrouping>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef6:	f7ff ff81 	bl	8000dfc <__NVIC_GetPriorityGrouping>
 8000efa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	68b9      	ldr	r1, [r7, #8]
 8000f00:	6978      	ldr	r0, [r7, #20]
 8000f02:	f7ff ffb3 	bl	8000e6c <NVIC_EncodePriority>
 8000f06:	4602      	mov	r2, r0
 8000f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff82 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f14:	bf00      	nop
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f2c:	d301      	bcc.n	8000f32 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00d      	b.n	8000f4e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000f32:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <HAL_SYSTICK_Config+0x40>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000f3a:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <HAL_SYSTICK_Config+0x40>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <HAL_SYSTICK_Config+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a05      	ldr	r2, [pc, #20]	@ (8000f5c <HAL_SYSTICK_Config+0x40>)
 8000f46:	f043 0303 	orr.w	r3, r3, #3
 8000f4a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	d844      	bhi.n	8000ff8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f74 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f74:	08000f97 	.word	0x08000f97
 8000f78:	08000fb5 	.word	0x08000fb5
 8000f7c:	08000fd7 	.word	0x08000fd7
 8000f80:	08000ff9 	.word	0x08000ff9
 8000f84:	08000f89 	.word	0x08000f89
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000f88:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001008 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f8e:	f043 0304 	orr.w	r3, r3, #4
 8000f92:	6013      	str	r3, [r2, #0]
      break;
 8000f94:	e031      	b.n	8000ffa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000f96:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001008 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f9c:	f023 0304 	bic.w	r3, r3, #4
 8000fa0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa8:	4a18      	ldr	r2, [pc, #96]	@ (800100c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000faa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000fae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000fb2:	e022      	b.n	8000ffa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000fb4:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a13      	ldr	r2, [pc, #76]	@ (8001008 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fba:	f023 0304 	bic.w	r3, r3, #4
 8000fbe:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000fc0:	4b12      	ldr	r3, [pc, #72]	@ (800100c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000fca:	4a10      	ldr	r2, [pc, #64]	@ (800100c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fcc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000fd4:	e011      	b.n	8000ffa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a0b      	ldr	r2, [pc, #44]	@ (8001008 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fdc:	f023 0304 	bic.w	r3, r3, #4
 8000fe0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000fec:	4a07      	ldr	r2, [pc, #28]	@ (800100c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000ff6:	e000      	b.n	8000ffa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000ff8:	bf00      	nop
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000e010 	.word	0xe000e010
 800100c:	46020c00 	.word	0x46020c00

08001010 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001022:	2304      	movs	r3, #4
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	e021      	b.n	800106c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001028:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001032:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800103a:	d011      	beq.n	8001060 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001042:	d810      	bhi.n	8001066 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d004      	beq.n	8001054 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001050:	d003      	beq.n	800105a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001052:	e008      	b.n	8001066 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
        break;
 8001058:	e008      	b.n	800106c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800105a:	2301      	movs	r3, #1
 800105c:	607b      	str	r3, [r7, #4]
        break;
 800105e:	e005      	b.n	800106c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001060:	2302      	movs	r3, #2
 8001062:	607b      	str	r3, [r7, #4]
        break;
 8001064:	e002      	b.n	800106c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
        break;
 800106a:	bf00      	nop
    }
  }
  return systick_source;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000e010 	.word	0xe000e010
 8001080:	46020c00 	.word	0x46020c00

08001084 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	@ 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001096:	e1ba      	b.n	800140e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	2101      	movs	r1, #1
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 81aa 	beq.w	8001408 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a55      	ldr	r2, [pc, #340]	@ (800120c <HAL_GPIO_Init+0x188>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d15d      	bne.n	8001178 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80010c2:	2201      	movs	r2, #1
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69fa      	ldr	r2, [r7, #28]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0201 	and.w	r2, r3, #1
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69fa      	ldr	r2, [r7, #28]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80010ec:	4a48      	ldr	r2, [pc, #288]	@ (8001210 <HAL_GPIO_Init+0x18c>)
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80010f4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80010f6:	4a46      	ldr	r2, [pc, #280]	@ (8001210 <HAL_GPIO_Init+0x18c>)
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4413      	add	r3, r2
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	3208      	adds	r2, #8
 800110a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	4013      	ands	r3, r2
 8001124:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	220b      	movs	r2, #11
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	4313      	orrs	r3, r2
 8001138:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	08da      	lsrs	r2, r3, #3
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	3208      	adds	r2, #8
 8001142:	69f9      	ldr	r1, [r7, #28]
 8001144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69fa      	ldr	r2, [r7, #28]
 800115c:	4013      	ands	r3, r2
 800115e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2202      	movs	r2, #2
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	4313      	orrs	r3, r2
 800116e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	69fa      	ldr	r2, [r7, #28]
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e067      	b.n	8001248 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x104>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b12      	cmp	r3, #18
 8001186:	d145      	bne.n	8001214 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	08da      	lsrs	r2, r3, #3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3208      	adds	r2, #8
 8001190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001194:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	220f      	movs	r2, #15
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69fa      	ldr	r2, [r7, #28]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	f003 020f 	and.w	r2, r3, #15
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	69f9      	ldr	r1, [r7, #28]
 80011d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69fa      	ldr	r2, [r7, #28]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0203 	and.w	r2, r3, #3
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69fa      	ldr	r2, [r7, #28]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	69fa      	ldr	r2, [r7, #28]
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	e01e      	b.n	8001248 <HAL_GPIO_Init+0x1c4>
 800120a:	bf00      	nop
 800120c:	46020000 	.word	0x46020000
 8001210:	08006e60 	.word	0x08006e60
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	4013      	ands	r3, r2
 800122a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0203 	and.w	r2, r3, #3
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	4313      	orrs	r3, r2
 8001240:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	69fa      	ldr	r2, [r7, #28]
 8001246:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d00b      	beq.n	8001268 <HAL_GPIO_Init+0x1e4>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d007      	beq.n	8001268 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800125c:	2b11      	cmp	r3, #17
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b12      	cmp	r3, #18
 8001266:	d130      	bne.n	80012ca <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69fa      	ldr	r2, [r7, #28]
 800127c:	4013      	ands	r3, r2
 800127e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69fa      	ldr	r2, [r7, #28]
 800128e:	4313      	orrs	r3, r2
 8001290:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800129e:	2201      	movs	r2, #1
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	f003 0201 	and.w	r2, r3, #1
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	69fa      	ldr	r2, [r7, #28]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d017      	beq.n	8001302 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	2203      	movs	r2, #3
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69fa      	ldr	r2, [r7, #28]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d07c      	beq.n	8001408 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800130e:	4a47      	ldr	r2, [pc, #284]	@ (800142c <HAL_GPIO_Init+0x3a8>)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3318      	adds	r3, #24
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	4013      	ands	r3, r2
 8001330:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	0a9a      	lsrs	r2, r3, #10
 8001336:	4b3e      	ldr	r3, [pc, #248]	@ (8001430 <HAL_GPIO_Init+0x3ac>)
 8001338:	4013      	ands	r3, r2
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	f002 0203 	and.w	r2, r2, #3
 8001340:	00d2      	lsls	r2, r2, #3
 8001342:	4093      	lsls	r3, r2
 8001344:	69fa      	ldr	r2, [r7, #28]
 8001346:	4313      	orrs	r3, r2
 8001348:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800134a:	4938      	ldr	r1, [pc, #224]	@ (800142c <HAL_GPIO_Init+0x3a8>)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	089b      	lsrs	r3, r3, #2
 8001350:	3318      	adds	r3, #24
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001358:	4b34      	ldr	r3, [pc, #208]	@ (800142c <HAL_GPIO_Init+0x3a8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43db      	mvns	r3, r3
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	4013      	ands	r3, r2
 8001366:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800137c:	4a2b      	ldr	r2, [pc, #172]	@ (800142c <HAL_GPIO_Init+0x3a8>)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001382:	4b2a      	ldr	r3, [pc, #168]	@ (800142c <HAL_GPIO_Init+0x3a8>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43db      	mvns	r3, r3
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	4013      	ands	r3, r2
 8001390:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80013a6:	4a21      	ldr	r2, [pc, #132]	@ (800142c <HAL_GPIO_Init+0x3a8>)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	@ (800142c <HAL_GPIO_Init+0x3a8>)
 80013ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80013b2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80013ca:	69fa      	ldr	r2, [r7, #28]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80013d2:	4a16      	ldr	r2, [pc, #88]	@ (800142c <HAL_GPIO_Init+0x3a8>)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80013da:	4b14      	ldr	r3, [pc, #80]	@ (800142c <HAL_GPIO_Init+0x3a8>)
 80013dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001400:	4a0a      	ldr	r2, [pc, #40]	@ (800142c <HAL_GPIO_Init+0x3a8>)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3301      	adds	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	fa22 f303 	lsr.w	r3, r2, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	f47f ae3d 	bne.w	8001098 <HAL_GPIO_Init+0x14>
  }
}
 800141e:	bf00      	nop
 8001420:	bf00      	nop
 8001422:	3724      	adds	r7, #36	@ 0x24
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	46022000 	.word	0x46022000
 8001430:	002f7f7f 	.word	0x002f7f7f

08001434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001450:	e002      	b.n	8001458 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800146c:	4b39      	ldr	r3, [pc, #228]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800146e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001470:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001474:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	429a      	cmp	r2, r3
 800147c:	d10b      	bne.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001484:	d905      	bls.n	8001492 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001486:	4b33      	ldr	r3, [pc, #204]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	4a32      	ldr	r2, [pc, #200]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800148c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001490:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e057      	b.n	8001546 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800149c:	d90a      	bls.n	80014b4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800149e:	4b2d      	ldr	r3, [pc, #180]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80014ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b0:	60d3      	str	r3, [r2, #12]
 80014b2:	e007      	b.n	80014c4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80014b4:	4b27      	ldr	r3, [pc, #156]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80014bc:	4925      	ldr	r1, [pc, #148]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80014c4:	4b24      	ldr	r3, [pc, #144]	@ (8001558 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a24      	ldr	r2, [pc, #144]	@ (800155c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80014ca:	fba2 2303 	umull	r2, r3, r2, r3
 80014ce:	099b      	lsrs	r3, r3, #6
 80014d0:	2232      	movs	r2, #50	@ 0x32
 80014d2:	fb02 f303 	mul.w	r3, r2, r3
 80014d6:	4a21      	ldr	r2, [pc, #132]	@ (800155c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80014d8:	fba2 2303 	umull	r2, r3, r2, r3
 80014dc:	099b      	lsrs	r3, r3, #6
 80014de:	3301      	adds	r3, #1
 80014e0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80014e2:	e002      	b.n	80014ea <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80014ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <HAL_PWREx_ControlVoltageScaling+0x98>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f3      	bne.n	80014e4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d01b      	beq.n	800153a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001508:	fba2 2303 	umull	r2, r3, r2, r3
 800150c:	099b      	lsrs	r3, r3, #6
 800150e:	2232      	movs	r2, #50	@ 0x32
 8001510:	fb02 f303 	mul.w	r3, r2, r3
 8001514:	4a11      	ldr	r2, [pc, #68]	@ (800155c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	099b      	lsrs	r3, r3, #6
 800151c:	3301      	adds	r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001520:	e002      	b.n	8001528 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	3b01      	subs	r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001528:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800152a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800152c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f3      	bne.n	8001522 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e000      	b.n	8001546 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	46020800 	.word	0x46020800
 8001558:	20000000 	.word	0x20000000
 800155c:	10624dd3 	.word	0x10624dd3

08001560 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001564:	4b04      	ldr	r3, [pc, #16]	@ (8001578 <HAL_PWREx_GetVoltageRange+0x18>)
 8001566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001568:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	46020800 	.word	0x46020800

0800157c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08e      	sub	sp, #56	@ 0x38
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	f000 bec8 	b.w	8002326 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001596:	4b99      	ldr	r3, [pc, #612]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015a0:	4b96      	ldr	r3, [pc, #600]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 80015a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 816c 	beq.w	8001890 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80015b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d007      	beq.n	80015ce <HAL_RCC_OscConfig+0x52>
 80015be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015c0:	2b0c      	cmp	r3, #12
 80015c2:	f040 80de 	bne.w	8001782 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	f040 80da 	bne.w	8001782 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d102      	bne.n	80015dc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	f000 bea5 	b.w	8002326 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015e0:	4b86      	ldr	r3, [pc, #536]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d004      	beq.n	80015f6 <HAL_RCC_OscConfig+0x7a>
 80015ec:	4b83      	ldr	r3, [pc, #524]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80015f4:	e005      	b.n	8001602 <HAL_RCC_OscConfig+0x86>
 80015f6:	4b81      	ldr	r3, [pc, #516]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 80015f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001602:	4293      	cmp	r3, r2
 8001604:	d255      	bcs.n	80016b2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001608:	2b00      	cmp	r3, #0
 800160a:	d10a      	bne.n	8001622 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001610:	4618      	mov	r0, r3
 8001612:	f001 f9d9 	bl	80029c8 <RCC_SetFlashLatencyFromMSIRange>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	f000 be82 	b.w	8002326 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001622:	4b76      	ldr	r3, [pc, #472]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	4a75      	ldr	r2, [pc, #468]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 8001628:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800162c:	6093      	str	r3, [r2, #8]
 800162e:	4b73      	ldr	r3, [pc, #460]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163a:	4970      	ldr	r1, [pc, #448]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 800163c:	4313      	orrs	r3, r2
 800163e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001644:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001648:	d309      	bcc.n	800165e <HAL_RCC_OscConfig+0xe2>
 800164a:	4b6c      	ldr	r3, [pc, #432]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	f023 021f 	bic.w	r2, r3, #31
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	4969      	ldr	r1, [pc, #420]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 8001658:	4313      	orrs	r3, r2
 800165a:	60cb      	str	r3, [r1, #12]
 800165c:	e07e      	b.n	800175c <HAL_RCC_OscConfig+0x1e0>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001662:	2b00      	cmp	r3, #0
 8001664:	da0a      	bge.n	800167c <HAL_RCC_OscConfig+0x100>
 8001666:	4b65      	ldr	r3, [pc, #404]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	015b      	lsls	r3, r3, #5
 8001674:	4961      	ldr	r1, [pc, #388]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 8001676:	4313      	orrs	r3, r2
 8001678:	60cb      	str	r3, [r1, #12]
 800167a:	e06f      	b.n	800175c <HAL_RCC_OscConfig+0x1e0>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001684:	d30a      	bcc.n	800169c <HAL_RCC_OscConfig+0x120>
 8001686:	4b5d      	ldr	r3, [pc, #372]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	029b      	lsls	r3, r3, #10
 8001694:	4959      	ldr	r1, [pc, #356]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 8001696:	4313      	orrs	r3, r2
 8001698:	60cb      	str	r3, [r1, #12]
 800169a:	e05f      	b.n	800175c <HAL_RCC_OscConfig+0x1e0>
 800169c:	4b57      	ldr	r3, [pc, #348]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	03db      	lsls	r3, r3, #15
 80016aa:	4954      	ldr	r1, [pc, #336]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	60cb      	str	r3, [r1, #12]
 80016b0:	e054      	b.n	800175c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80016b2:	4b52      	ldr	r3, [pc, #328]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	4a51      	ldr	r2, [pc, #324]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 80016b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016bc:	6093      	str	r3, [r2, #8]
 80016be:	4b4f      	ldr	r3, [pc, #316]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ca:	494c      	ldr	r1, [pc, #304]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80016d8:	d309      	bcc.n	80016ee <HAL_RCC_OscConfig+0x172>
 80016da:	4b48      	ldr	r3, [pc, #288]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	f023 021f 	bic.w	r2, r3, #31
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	4945      	ldr	r1, [pc, #276]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	60cb      	str	r3, [r1, #12]
 80016ec:	e028      	b.n	8001740 <HAL_RCC_OscConfig+0x1c4>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	da0a      	bge.n	800170c <HAL_RCC_OscConfig+0x190>
 80016f6:	4b41      	ldr	r3, [pc, #260]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	015b      	lsls	r3, r3, #5
 8001704:	493d      	ldr	r1, [pc, #244]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 8001706:	4313      	orrs	r3, r2
 8001708:	60cb      	str	r3, [r1, #12]
 800170a:	e019      	b.n	8001740 <HAL_RCC_OscConfig+0x1c4>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001714:	d30a      	bcc.n	800172c <HAL_RCC_OscConfig+0x1b0>
 8001716:	4b39      	ldr	r3, [pc, #228]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	029b      	lsls	r3, r3, #10
 8001724:	4935      	ldr	r1, [pc, #212]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 8001726:	4313      	orrs	r3, r2
 8001728:	60cb      	str	r3, [r1, #12]
 800172a:	e009      	b.n	8001740 <HAL_RCC_OscConfig+0x1c4>
 800172c:	4b33      	ldr	r3, [pc, #204]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	03db      	lsls	r3, r3, #15
 800173a:	4930      	ldr	r1, [pc, #192]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 800173c:	4313      	orrs	r3, r2
 800173e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10a      	bne.n	800175c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174a:	4618      	mov	r0, r3
 800174c:	f001 f93c 	bl	80029c8 <RCC_SetFlashLatencyFromMSIRange>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	f000 bde5 	b.w	8002326 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800175c:	f001 f8de 	bl	800291c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001760:	4b27      	ldr	r3, [pc, #156]	@ (8001800 <HAL_RCC_OscConfig+0x284>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fa8f 	bl	8000c88 <HAL_InitTick>
 800176a:	4603      	mov	r3, r0
 800176c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8001770:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 808a 	beq.w	800188e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800177a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800177e:	f000 bdd2 	b.w	8002326 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d066      	beq.n	8001858 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800178a:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a1b      	ldr	r2, [pc, #108]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001796:	f7ff fb01 	bl	8000d9c <HAL_GetTick>
 800179a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800179c:	e009      	b.n	80017b2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800179e:	f7ff fafd 	bl	8000d9c <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d902      	bls.n	80017b2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	f000 bdba 	b.w	8002326 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0ef      	beq.n	800179e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80017be:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	4a0e      	ldr	r2, [pc, #56]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 80017c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80017c8:	6093      	str	r3, [r2, #8]
 80017ca:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d6:	4909      	ldr	r1, [pc, #36]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80017e4:	d30e      	bcc.n	8001804 <HAL_RCC_OscConfig+0x288>
 80017e6:	4b05      	ldr	r3, [pc, #20]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	f023 021f 	bic.w	r2, r3, #31
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	4902      	ldr	r1, [pc, #8]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	60cb      	str	r3, [r1, #12]
 80017f8:	e04a      	b.n	8001890 <HAL_RCC_OscConfig+0x314>
 80017fa:	bf00      	nop
 80017fc:	46020c00 	.word	0x46020c00
 8001800:	20000004 	.word	0x20000004
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001808:	2b00      	cmp	r3, #0
 800180a:	da0a      	bge.n	8001822 <HAL_RCC_OscConfig+0x2a6>
 800180c:	4b98      	ldr	r3, [pc, #608]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	015b      	lsls	r3, r3, #5
 800181a:	4995      	ldr	r1, [pc, #596]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 800181c:	4313      	orrs	r3, r2
 800181e:	60cb      	str	r3, [r1, #12]
 8001820:	e036      	b.n	8001890 <HAL_RCC_OscConfig+0x314>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800182a:	d30a      	bcc.n	8001842 <HAL_RCC_OscConfig+0x2c6>
 800182c:	4b90      	ldr	r3, [pc, #576]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	029b      	lsls	r3, r3, #10
 800183a:	498d      	ldr	r1, [pc, #564]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 800183c:	4313      	orrs	r3, r2
 800183e:	60cb      	str	r3, [r1, #12]
 8001840:	e026      	b.n	8001890 <HAL_RCC_OscConfig+0x314>
 8001842:	4b8b      	ldr	r3, [pc, #556]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	03db      	lsls	r3, r3, #15
 8001850:	4987      	ldr	r1, [pc, #540]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001852:	4313      	orrs	r3, r2
 8001854:	60cb      	str	r3, [r1, #12]
 8001856:	e01b      	b.n	8001890 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001858:	4b85      	ldr	r3, [pc, #532]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a84      	ldr	r2, [pc, #528]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001864:	f7ff fa9a 	bl	8000d9c <HAL_GetTick>
 8001868:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800186a:	e009      	b.n	8001880 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800186c:	f7ff fa96 	bl	8000d9c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d902      	bls.n	8001880 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	f000 bd53 	b.w	8002326 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001880:	4b7b      	ldr	r3, [pc, #492]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1ef      	bne.n	800186c <HAL_RCC_OscConfig+0x2f0>
 800188c:	e000      	b.n	8001890 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800188e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 808b 	beq.w	80019b4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800189e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d005      	beq.n	80018b0 <HAL_RCC_OscConfig+0x334>
 80018a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018a6:	2b0c      	cmp	r3, #12
 80018a8:	d109      	bne.n	80018be <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d106      	bne.n	80018be <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d17d      	bne.n	80019b4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	f000 bd34 	b.w	8002326 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c6:	d106      	bne.n	80018d6 <HAL_RCC_OscConfig+0x35a>
 80018c8:	4b69      	ldr	r3, [pc, #420]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a68      	ldr	r2, [pc, #416]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	e041      	b.n	800195a <HAL_RCC_OscConfig+0x3de>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018de:	d112      	bne.n	8001906 <HAL_RCC_OscConfig+0x38a>
 80018e0:	4b63      	ldr	r3, [pc, #396]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a62      	ldr	r2, [pc, #392]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b60      	ldr	r3, [pc, #384]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a5f      	ldr	r2, [pc, #380]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018f2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	4b5d      	ldr	r3, [pc, #372]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a5c      	ldr	r2, [pc, #368]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	e029      	b.n	800195a <HAL_RCC_OscConfig+0x3de>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800190e:	d112      	bne.n	8001936 <HAL_RCC_OscConfig+0x3ba>
 8001910:	4b57      	ldr	r3, [pc, #348]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a56      	ldr	r2, [pc, #344]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001916:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	4b54      	ldr	r3, [pc, #336]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a53      	ldr	r2, [pc, #332]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001922:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	4b51      	ldr	r3, [pc, #324]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a50      	ldr	r2, [pc, #320]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 800192e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	e011      	b.n	800195a <HAL_RCC_OscConfig+0x3de>
 8001936:	4b4e      	ldr	r3, [pc, #312]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a4d      	ldr	r2, [pc, #308]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 800193c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b4b      	ldr	r3, [pc, #300]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a4a      	ldr	r2, [pc, #296]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001948:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b48      	ldr	r3, [pc, #288]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a47      	ldr	r2, [pc, #284]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001954:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001958:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d014      	beq.n	800198c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001962:	f7ff fa1b 	bl	8000d9c <HAL_GetTick>
 8001966:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001968:	e009      	b.n	800197e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196a:	f7ff fa17 	bl	8000d9c <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b64      	cmp	r3, #100	@ 0x64
 8001976:	d902      	bls.n	800197e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	f000 bcd4 	b.w	8002326 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800197e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0ef      	beq.n	800196a <HAL_RCC_OscConfig+0x3ee>
 800198a:	e013      	b.n	80019b4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800198c:	f7ff fa06 	bl	8000d9c <HAL_GetTick>
 8001990:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001992:	e009      	b.n	80019a8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff fa02 	bl	8000d9c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	@ 0x64
 80019a0:	d902      	bls.n	80019a8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	f000 bcbf 	b.w	8002326 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019a8:	4b31      	ldr	r3, [pc, #196]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1ef      	bne.n	8001994 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d05f      	beq.n	8001a80 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80019c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d005      	beq.n	80019d2 <HAL_RCC_OscConfig+0x456>
 80019c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019c8:	2b0c      	cmp	r3, #12
 80019ca:	d114      	bne.n	80019f6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d111      	bne.n	80019f6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d102      	bne.n	80019e0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	f000 bca3 	b.w	8002326 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80019e0:	4b23      	ldr	r3, [pc, #140]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	041b      	lsls	r3, r3, #16
 80019ee:	4920      	ldr	r1, [pc, #128]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80019f4:	e044      	b.n	8001a80 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d024      	beq.n	8001a48 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80019fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a1b      	ldr	r2, [pc, #108]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a08:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001a0a:	f7ff f9c7 	bl	8000d9c <HAL_GetTick>
 8001a0e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a10:	e009      	b.n	8001a26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a12:	f7ff f9c3 	bl	8000d9c <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d902      	bls.n	8001a26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	f000 bc80 	b.w	8002326 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a26:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0ef      	beq.n	8001a12 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001a32:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	041b      	lsls	r3, r3, #16
 8001a40:	490b      	ldr	r1, [pc, #44]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	610b      	str	r3, [r1, #16]
 8001a46:	e01b      	b.n	8001a80 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001a48:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a08      	ldr	r2, [pc, #32]	@ (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001a4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a52:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001a54:	f7ff f9a2 	bl	8000d9c <HAL_GetTick>
 8001a58:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a5a:	e00b      	b.n	8001a74 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a5c:	f7ff f99e 	bl	8000d9c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d904      	bls.n	8001a74 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	f000 bc5b 	b.w	8002326 <HAL_RCC_OscConfig+0xdaa>
 8001a70:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a74:	4baf      	ldr	r3, [pc, #700]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1ed      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80c8 	beq.w	8001c1e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a94:	4ba7      	ldr	r3, [pc, #668]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d111      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	4ba4      	ldr	r3, [pc, #656]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aa8:	4aa2      	ldr	r2, [pc, #648]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001ab2:	4ba0      	ldr	r3, [pc, #640]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001ac6:	4b9c      	ldr	r3, [pc, #624]	@ (8001d38 <HAL_RCC_OscConfig+0x7bc>)
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d119      	bne.n	8001b06 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001ad2:	4b99      	ldr	r3, [pc, #612]	@ (8001d38 <HAL_RCC_OscConfig+0x7bc>)
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad6:	4a98      	ldr	r2, [pc, #608]	@ (8001d38 <HAL_RCC_OscConfig+0x7bc>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ade:	f7ff f95d 	bl	8000d9c <HAL_GetTick>
 8001ae2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001ae4:	e009      	b.n	8001afa <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae6:	f7ff f959 	bl	8000d9c <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d902      	bls.n	8001afa <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	f000 bc16 	b.w	8002326 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001afa:	4b8f      	ldr	r3, [pc, #572]	@ (8001d38 <HAL_RCC_OscConfig+0x7bc>)
 8001afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0ef      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d05f      	beq.n	8001bce <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001b0e:	4b89      	ldr	r3, [pc, #548]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001b10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b14:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699a      	ldr	r2, [r3, #24]
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d037      	beq.n	8001b94 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d006      	beq.n	8001b3c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e3f4      	b.n	8002326 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d01b      	beq.n	8001b7e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001b46:	4b7b      	ldr	r3, [pc, #492]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001b48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b4c:	4a79      	ldr	r2, [pc, #484]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001b4e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001b52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8001b56:	f7ff f921 	bl	8000d9c <HAL_GetTick>
 8001b5a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5e:	f7ff f91d 	bl	8000d9c <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b05      	cmp	r3, #5
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e3da      	b.n	8002326 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b70:	4b70      	ldr	r3, [pc, #448]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001b72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1ef      	bne.n	8001b5e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001b7e:	4b6d      	ldr	r3, [pc, #436]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b84:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4969      	ldr	r1, [pc, #420]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001b94:	4b67      	ldr	r3, [pc, #412]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b9a:	4a66      	ldr	r2, [pc, #408]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001b9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ba0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001ba4:	f7ff f8fa 	bl	8000d9c <HAL_GetTick>
 8001ba8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff f8f6 	bl	8000d9c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b05      	cmp	r3, #5
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e3b3      	b.n	8002326 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001bbe:	4b5d      	ldr	r3, [pc, #372]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0ef      	beq.n	8001bac <HAL_RCC_OscConfig+0x630>
 8001bcc:	e01b      	b.n	8001c06 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001bce:	4b59      	ldr	r3, [pc, #356]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bd4:	4a57      	ldr	r2, [pc, #348]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001bd6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001bda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001bde:	f7ff f8dd 	bl	8000d9c <HAL_GetTick>
 8001be2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be6:	f7ff f8d9 	bl	8000d9c <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e396      	b.n	8002326 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001bf8:	4b4e      	ldr	r3, [pc, #312]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001bfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1ef      	bne.n	8001be6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c06:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0e:	4b49      	ldr	r3, [pc, #292]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c14:	4a47      	ldr	r2, [pc, #284]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001c16:	f023 0304 	bic.w	r3, r3, #4
 8001c1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8111 	beq.w	8001e4e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c32:	4b40      	ldr	r3, [pc, #256]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d111      	bne.n	8001c64 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c40:	4b3c      	ldr	r3, [pc, #240]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c46:	4a3b      	ldr	r2, [pc, #236]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001c48:	f043 0304 	orr.w	r3, r3, #4
 8001c4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001c50:	4b38      	ldr	r3, [pc, #224]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001c64:	4b34      	ldr	r3, [pc, #208]	@ (8001d38 <HAL_RCC_OscConfig+0x7bc>)
 8001c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d118      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001c70:	4b31      	ldr	r3, [pc, #196]	@ (8001d38 <HAL_RCC_OscConfig+0x7bc>)
 8001c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c74:	4a30      	ldr	r2, [pc, #192]	@ (8001d38 <HAL_RCC_OscConfig+0x7bc>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7c:	f7ff f88e 	bl	8000d9c <HAL_GetTick>
 8001c80:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c84:	f7ff f88a 	bl	8000d9c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e347      	b.n	8002326 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001c96:	4b28      	ldr	r3, [pc, #160]	@ (8001d38 <HAL_RCC_OscConfig+0x7bc>)
 8001c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d01f      	beq.n	8001cee <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d010      	beq.n	8001cdc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001cba:	4b1e      	ldr	r3, [pc, #120]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001cbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cca:	4b1a      	ldr	r3, [pc, #104]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cd0:	4a18      	ldr	r2, [pc, #96]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cda:	e018      	b.n	8001d0e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cdc:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001cde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ce2:	4a14      	ldr	r2, [pc, #80]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cec:	e00f      	b.n	8001d0e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cee:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001cf6:	f023 0301 	bic.w	r3, r3, #1
 8001cfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d04:	4a0b      	ldr	r2, [pc, #44]	@ (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001d06:	f023 0304 	bic.w	r3, r3, #4
 8001d0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d057      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8001d16:	f7ff f841 	bl	8000d9c <HAL_GetTick>
 8001d1a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d1c:	e00e      	b.n	8001d3c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7ff f83d 	bl	8000d9c <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d905      	bls.n	8001d3c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e2f8      	b.n	8002326 <HAL_RCC_OscConfig+0xdaa>
 8001d34:	46020c00 	.word	0x46020c00
 8001d38:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d3c:	4b9c      	ldr	r3, [pc, #624]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001d3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0e9      	beq.n	8001d1e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d01b      	beq.n	8001d8e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d56:	4b96      	ldr	r3, [pc, #600]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d5c:	4a94      	ldr	r2, [pc, #592]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d68:	f7ff f818 	bl	8000d9c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e2d3      	b.n	8002326 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001d7e:	4b8c      	ldr	r3, [pc, #560]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0ed      	beq.n	8001d68 <HAL_RCC_OscConfig+0x7ec>
 8001d8c:	e053      	b.n	8001e36 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d8e:	4b88      	ldr	r3, [pc, #544]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001d90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d94:	4a86      	ldr	r2, [pc, #536]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001d96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da0:	f7fe fffc 	bl	8000d9c <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e2b7      	b.n	8002326 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001db6:	4b7e      	ldr	r3, [pc, #504]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1ed      	bne.n	8001da0 <HAL_RCC_OscConfig+0x824>
 8001dc4:	e037      	b.n	8001e36 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001dc6:	f7fe ffe9 	bl	8000d9c <HAL_GetTick>
 8001dca:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dcc:	e00a      	b.n	8001de4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dce:	f7fe ffe5 	bl	8000d9c <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e2a0      	b.n	8002326 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001de4:	4b72      	ldr	r3, [pc, #456]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001de6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1ed      	bne.n	8001dce <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001df2:	4b6f      	ldr	r3, [pc, #444]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001df4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d01a      	beq.n	8001e36 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e00:	4b6b      	ldr	r3, [pc, #428]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e06:	4a6a      	ldr	r2, [pc, #424]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001e08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e0c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e10:	e00a      	b.n	8001e28 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7fe ffc3 	bl	8000d9c <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e27e      	b.n	8002326 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e28:	4b61      	ldr	r3, [pc, #388]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001e2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1ed      	bne.n	8001e12 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e36:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d107      	bne.n	8001e4e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3e:	4b5c      	ldr	r3, [pc, #368]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e44:	4a5a      	ldr	r2, [pc, #360]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001e46:	f023 0304 	bic.w	r3, r3, #4
 8001e4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d036      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d019      	beq.n	8001e96 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001e62:	4b53      	ldr	r3, [pc, #332]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a52      	ldr	r2, [pc, #328]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001e68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e6c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001e6e:	f7fe ff95 	bl	8000d9c <HAL_GetTick>
 8001e72:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e76:	f7fe ff91 	bl	8000d9c <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e24e      	b.n	8002326 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e88:	4b49      	ldr	r3, [pc, #292]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x8fa>
 8001e94:	e018      	b.n	8001ec8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001e96:	4b46      	ldr	r3, [pc, #280]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a45      	ldr	r2, [pc, #276]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001e9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ea0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001ea2:	f7fe ff7b 	bl	8000d9c <HAL_GetTick>
 8001ea6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eaa:	f7fe ff77 	bl	8000d9c <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e234      	b.n	8002326 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001ebc:	4b3c      	ldr	r3, [pc, #240]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f0      	bne.n	8001eaa <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d036      	beq.n	8001f42 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d019      	beq.n	8001f10 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001edc:	4b34      	ldr	r3, [pc, #208]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a33      	ldr	r2, [pc, #204]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001ee2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ee6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001ee8:	f7fe ff58 	bl	8000d9c <HAL_GetTick>
 8001eec:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001ef0:	f7fe ff54 	bl	8000d9c <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e211      	b.n	8002326 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001f02:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x974>
 8001f0e:	e018      	b.n	8001f42 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001f10:	4b27      	ldr	r3, [pc, #156]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a26      	ldr	r2, [pc, #152]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001f16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f1a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001f1c:	f7fe ff3e 	bl	8000d9c <HAL_GetTick>
 8001f20:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001f24:	f7fe ff3a 	bl	8000d9c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e1f7      	b.n	8002326 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001f36:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d07f      	beq.n	800204e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d062      	beq.n	800201c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001f56:	4b16      	ldr	r3, [pc, #88]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	4a15      	ldr	r2, [pc, #84]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001f5c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f60:	6093      	str	r3, [r2, #8]
 8001f62:	4b13      	ldr	r3, [pc, #76]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6e:	4910      	ldr	r1, [pc, #64]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f78:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001f7c:	d309      	bcc.n	8001f92 <HAL_RCC_OscConfig+0xa16>
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f023 021f 	bic.w	r2, r3, #31
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	4909      	ldr	r1, [pc, #36]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60cb      	str	r3, [r1, #12]
 8001f90:	e02a      	b.n	8001fe8 <HAL_RCC_OscConfig+0xa6c>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	da0c      	bge.n	8001fb4 <HAL_RCC_OscConfig+0xa38>
 8001f9a:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	015b      	lsls	r3, r3, #5
 8001fa8:	4901      	ldr	r1, [pc, #4]	@ (8001fb0 <HAL_RCC_OscConfig+0xa34>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60cb      	str	r3, [r1, #12]
 8001fae:	e01b      	b.n	8001fe8 <HAL_RCC_OscConfig+0xa6c>
 8001fb0:	46020c00 	.word	0x46020c00
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fbc:	d30a      	bcc.n	8001fd4 <HAL_RCC_OscConfig+0xa58>
 8001fbe:	4ba1      	ldr	r3, [pc, #644]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	029b      	lsls	r3, r3, #10
 8001fcc:	499d      	ldr	r1, [pc, #628]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60cb      	str	r3, [r1, #12]
 8001fd2:	e009      	b.n	8001fe8 <HAL_RCC_OscConfig+0xa6c>
 8001fd4:	4b9b      	ldr	r3, [pc, #620]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	03db      	lsls	r3, r3, #15
 8001fe2:	4998      	ldr	r1, [pc, #608]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001fe8:	4b96      	ldr	r3, [pc, #600]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a95      	ldr	r2, [pc, #596]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8001fee:	f043 0310 	orr.w	r3, r3, #16
 8001ff2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001ff4:	f7fe fed2 	bl	8000d9c <HAL_GetTick>
 8001ff8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001ffc:	f7fe fece 	bl	8000d9c <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e18b      	b.n	8002326 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800200e:	4b8d      	ldr	r3, [pc, #564]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0320 	and.w	r3, r3, #32
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0xa80>
 800201a:	e018      	b.n	800204e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800201c:	4b89      	ldr	r3, [pc, #548]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a88      	ldr	r2, [pc, #544]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8002022:	f023 0310 	bic.w	r3, r3, #16
 8002026:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002028:	f7fe feb8 	bl	8000d9c <HAL_GetTick>
 800202c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002030:	f7fe feb4 	bl	8000d9c <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e171      	b.n	8002326 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002042:	4b80      	ldr	r3, [pc, #512]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 8166 	beq.w	8002324 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002058:	2300      	movs	r3, #0
 800205a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800205e:	4b79      	ldr	r3, [pc, #484]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b0c      	cmp	r3, #12
 8002068:	f000 80f2 	beq.w	8002250 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002070:	2b02      	cmp	r3, #2
 8002072:	f040 80c5 	bne.w	8002200 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002076:	4b73      	ldr	r3, [pc, #460]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a72      	ldr	r2, [pc, #456]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 800207c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002080:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002082:	f7fe fe8b 	bl	8000d9c <HAL_GetTick>
 8002086:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208a:	f7fe fe87 	bl	8000d9c <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e144      	b.n	8002326 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800209c:	4b69      	ldr	r3, [pc, #420]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f0      	bne.n	800208a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a8:	4b66      	ldr	r3, [pc, #408]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 80020aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d111      	bne.n	80020da <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	4b63      	ldr	r3, [pc, #396]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 80020b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020bc:	4a61      	ldr	r2, [pc, #388]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80020c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 80020c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80020d4:	2301      	movs	r3, #1
 80020d6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80020da:	4b5b      	ldr	r3, [pc, #364]	@ (8002248 <HAL_RCC_OscConfig+0xccc>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80020e6:	d102      	bne.n	80020ee <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80020e8:	2301      	movs	r3, #1
 80020ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80020ee:	4b56      	ldr	r3, [pc, #344]	@ (8002248 <HAL_RCC_OscConfig+0xccc>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	4a55      	ldr	r2, [pc, #340]	@ (8002248 <HAL_RCC_OscConfig+0xccc>)
 80020f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020f8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80020fa:	4b52      	ldr	r3, [pc, #328]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 80020fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002102:	f023 0303 	bic.w	r3, r3, #3
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800210e:	3a01      	subs	r2, #1
 8002110:	0212      	lsls	r2, r2, #8
 8002112:	4311      	orrs	r1, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002118:	430a      	orrs	r2, r1
 800211a:	494a      	ldr	r1, [pc, #296]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 800211c:	4313      	orrs	r3, r2
 800211e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002120:	4b48      	ldr	r3, [pc, #288]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8002122:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002124:	4b49      	ldr	r3, [pc, #292]	@ (800224c <HAL_RCC_OscConfig+0xcd0>)
 8002126:	4013      	ands	r3, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800212c:	3a01      	subs	r2, #1
 800212e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002136:	3a01      	subs	r2, #1
 8002138:	0252      	lsls	r2, r2, #9
 800213a:	b292      	uxth	r2, r2
 800213c:	4311      	orrs	r1, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002142:	3a01      	subs	r2, #1
 8002144:	0412      	lsls	r2, r2, #16
 8002146:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800214a:	4311      	orrs	r1, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002150:	3a01      	subs	r2, #1
 8002152:	0612      	lsls	r2, r2, #24
 8002154:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002158:	430a      	orrs	r2, r1
 800215a:	493a      	ldr	r1, [pc, #232]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 800215c:	4313      	orrs	r3, r2
 800215e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002160:	4b38      	ldr	r3, [pc, #224]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8002162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002164:	4a37      	ldr	r2, [pc, #220]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8002166:	f023 0310 	bic.w	r3, r3, #16
 800216a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002170:	4a34      	ldr	r2, [pc, #208]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002176:	4b33      	ldr	r3, [pc, #204]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8002178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217a:	4a32      	ldr	r2, [pc, #200]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 800217c:	f043 0310 	orr.w	r3, r3, #16
 8002180:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002182:	4b30      	ldr	r3, [pc, #192]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8002184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002186:	f023 020c 	bic.w	r2, r3, #12
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218e:	492d      	ldr	r1, [pc, #180]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8002190:	4313      	orrs	r3, r2
 8002192:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002194:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002198:	2b01      	cmp	r3, #1
 800219a:	d105      	bne.n	80021a8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800219c:	4b2a      	ldr	r3, [pc, #168]	@ (8002248 <HAL_RCC_OscConfig+0xccc>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4a29      	ldr	r2, [pc, #164]	@ (8002248 <HAL_RCC_OscConfig+0xccc>)
 80021a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021a6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80021a8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d107      	bne.n	80021c0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80021b0:	4b24      	ldr	r3, [pc, #144]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 80021b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021b6:	4a23      	ldr	r2, [pc, #140]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b20      	ldr	r3, [pc, #128]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 80021c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80021cc:	f7fe fde6 	bl	8000d9c <HAL_GetTick>
 80021d0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d4:	f7fe fde2 	bl	8000d9c <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e09f      	b.n	8002326 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80021e6:	4b17      	ldr	r3, [pc, #92]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80021f2:	4b14      	ldr	r3, [pc, #80]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 80021f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f6:	4a13      	ldr	r2, [pc, #76]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 80021f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021fc:	6293      	str	r3, [r2, #40]	@ 0x28
 80021fe:	e091      	b.n	8002324 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002200:	4b10      	ldr	r3, [pc, #64]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0f      	ldr	r2, [pc, #60]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8002206:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800220a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800220c:	f7fe fdc6 	bl	8000d9c <HAL_GetTick>
 8002210:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002214:	f7fe fdc2 	bl	8000d9c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e07f      	b.n	8002326 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002226:	4b07      	ldr	r3, [pc, #28]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002232:	4b04      	ldr	r3, [pc, #16]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8002234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002236:	4a03      	ldr	r2, [pc, #12]	@ (8002244 <HAL_RCC_OscConfig+0xcc8>)
 8002238:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800223c:	f023 0303 	bic.w	r3, r3, #3
 8002240:	6293      	str	r3, [r2, #40]	@ 0x28
 8002242:	e06f      	b.n	8002324 <HAL_RCC_OscConfig+0xda8>
 8002244:	46020c00 	.word	0x46020c00
 8002248:	46020800 	.word	0x46020800
 800224c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002250:	4b37      	ldr	r3, [pc, #220]	@ (8002330 <HAL_RCC_OscConfig+0xdb4>)
 8002252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002254:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002256:	4b36      	ldr	r3, [pc, #216]	@ (8002330 <HAL_RCC_OscConfig+0xdb4>)
 8002258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800225a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002260:	2b01      	cmp	r3, #1
 8002262:	d039      	beq.n	80022d8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 0203 	and.w	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800226e:	429a      	cmp	r2, r3
 8002270:	d132      	bne.n	80022d8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	0a1b      	lsrs	r3, r3, #8
 8002276:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002280:	429a      	cmp	r2, r3
 8002282:	d129      	bne.n	80022d8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800228e:	429a      	cmp	r2, r3
 8002290:	d122      	bne.n	80022d8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800229c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800229e:	429a      	cmp	r2, r3
 80022a0:	d11a      	bne.n	80022d8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	0a5b      	lsrs	r3, r3, #9
 80022a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d111      	bne.n	80022d8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	0c1b      	lsrs	r3, r3, #16
 80022b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022c0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d108      	bne.n	80022d8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	0e1b      	lsrs	r3, r3, #24
 80022ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e024      	b.n	8002326 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80022dc:	4b14      	ldr	r3, [pc, #80]	@ (8002330 <HAL_RCC_OscConfig+0xdb4>)
 80022de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e0:	08db      	lsrs	r3, r3, #3
 80022e2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d01a      	beq.n	8002324 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80022ee:	4b10      	ldr	r3, [pc, #64]	@ (8002330 <HAL_RCC_OscConfig+0xdb4>)
 80022f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002330 <HAL_RCC_OscConfig+0xdb4>)
 80022f4:	f023 0310 	bic.w	r3, r3, #16
 80022f8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7fe fd4f 	bl	8000d9c <HAL_GetTick>
 80022fe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002300:	bf00      	nop
 8002302:	f7fe fd4b 	bl	8000d9c <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800230a:	4293      	cmp	r3, r2
 800230c:	d0f9      	beq.n	8002302 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002312:	4a07      	ldr	r2, [pc, #28]	@ (8002330 <HAL_RCC_OscConfig+0xdb4>)
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002318:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <HAL_RCC_OscConfig+0xdb4>)
 800231a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231c:	4a04      	ldr	r2, [pc, #16]	@ (8002330 <HAL_RCC_OscConfig+0xdb4>)
 800231e:	f043 0310 	orr.w	r3, r3, #16
 8002322:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3738      	adds	r7, #56	@ 0x38
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	46020c00 	.word	0x46020c00

08002334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e1d9      	b.n	80026fc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002348:	4b9b      	ldr	r3, [pc, #620]	@ (80025b8 <HAL_RCC_ClockConfig+0x284>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d910      	bls.n	8002378 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b98      	ldr	r3, [pc, #608]	@ (80025b8 <HAL_RCC_ClockConfig+0x284>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 020f 	bic.w	r2, r3, #15
 800235e:	4996      	ldr	r1, [pc, #600]	@ (80025b8 <HAL_RCC_ClockConfig+0x284>)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b94      	ldr	r3, [pc, #592]	@ (80025b8 <HAL_RCC_ClockConfig+0x284>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e1c1      	b.n	80026fc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0310 	and.w	r3, r3, #16
 8002380:	2b00      	cmp	r3, #0
 8002382:	d010      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	4b8c      	ldr	r3, [pc, #560]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 800238a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002390:	429a      	cmp	r2, r3
 8002392:	d908      	bls.n	80023a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002394:	4b89      	ldr	r3, [pc, #548]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 8002396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002398:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	4986      	ldr	r1, [pc, #536]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d012      	beq.n	80023d8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	4b81      	ldr	r3, [pc, #516]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	091b      	lsrs	r3, r3, #4
 80023bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d909      	bls.n	80023d8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80023c4:	4b7d      	ldr	r3, [pc, #500]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	497a      	ldr	r1, [pc, #488]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d010      	beq.n	8002406 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	4b74      	ldr	r3, [pc, #464]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d908      	bls.n	8002406 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80023f4:	4b71      	ldr	r3, [pc, #452]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	496e      	ldr	r1, [pc, #440]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 8002402:	4313      	orrs	r3, r2
 8002404:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d010      	beq.n	8002434 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	4b69      	ldr	r3, [pc, #420]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	429a      	cmp	r2, r3
 8002420:	d908      	bls.n	8002434 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002422:	4b66      	ldr	r3, [pc, #408]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	f023 020f 	bic.w	r2, r3, #15
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	4963      	ldr	r1, [pc, #396]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 8002430:	4313      	orrs	r3, r2
 8002432:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80d2 	beq.w	80025e6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8002442:	2300      	movs	r3, #0
 8002444:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b03      	cmp	r3, #3
 800244c:	d143      	bne.n	80024d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244e:	4b5b      	ldr	r3, [pc, #364]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 8002450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d110      	bne.n	800247e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800245c:	4b57      	ldr	r3, [pc, #348]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 800245e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002462:	4a56      	ldr	r2, [pc, #344]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800246c:	4b53      	ldr	r3, [pc, #332]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 800246e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800247a:	2301      	movs	r3, #1
 800247c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800247e:	f7fe fc8d 	bl	8000d9c <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002484:	4b4e      	ldr	r3, [pc, #312]	@ (80025c0 <HAL_RCC_ClockConfig+0x28c>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00f      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002492:	f7fe fc83 	bl	8000d9c <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e12b      	b.n	80026fc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80024a4:	4b46      	ldr	r3, [pc, #280]	@ (80025c0 <HAL_RCC_ClockConfig+0x28c>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80024b6:	4b41      	ldr	r3, [pc, #260]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 80024b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024bc:	4a3f      	ldr	r2, [pc, #252]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 80024be:	f023 0304 	bic.w	r3, r3, #4
 80024c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80024c6:	4b3d      	ldr	r3, [pc, #244]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d121      	bne.n	8002516 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e112      	b.n	80026fc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024de:	4b37      	ldr	r3, [pc, #220]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d115      	bne.n	8002516 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e106      	b.n	80026fc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d107      	bne.n	8002506 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80024f6:	4b31      	ldr	r3, [pc, #196]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e0fa      	b.n	80026fc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002506:	4b2d      	ldr	r3, [pc, #180]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e0f2      	b.n	80026fc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002516:	4b29      	ldr	r3, [pc, #164]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f023 0203 	bic.w	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	4926      	ldr	r1, [pc, #152]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 8002524:	4313      	orrs	r3, r2
 8002526:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002528:	f7fe fc38 	bl	8000d9c <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b03      	cmp	r3, #3
 8002534:	d112      	bne.n	800255c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002536:	e00a      	b.n	800254e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002538:	f7fe fc30 	bl	8000d9c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e0d6      	b.n	80026fc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800254e:	4b1b      	ldr	r3, [pc, #108]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b0c      	cmp	r3, #12
 8002558:	d1ee      	bne.n	8002538 <HAL_RCC_ClockConfig+0x204>
 800255a:	e044      	b.n	80025e6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b02      	cmp	r3, #2
 8002562:	d112      	bne.n	800258a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002564:	e00a      	b.n	800257c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002566:	f7fe fc19 	bl	8000d9c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e0bf      	b.n	80026fc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800257c:	4b0f      	ldr	r3, [pc, #60]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	f003 030c 	and.w	r3, r3, #12
 8002584:	2b08      	cmp	r3, #8
 8002586:	d1ee      	bne.n	8002566 <HAL_RCC_ClockConfig+0x232>
 8002588:	e02d      	b.n	80025e6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d123      	bne.n	80025da <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002592:	e00a      	b.n	80025aa <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002594:	f7fe fc02 	bl	8000d9c <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e0a8      	b.n	80026fc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80025aa:	4b04      	ldr	r3, [pc, #16]	@ (80025bc <HAL_RCC_ClockConfig+0x288>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1ee      	bne.n	8002594 <HAL_RCC_ClockConfig+0x260>
 80025b6:	e016      	b.n	80025e6 <HAL_RCC_ClockConfig+0x2b2>
 80025b8:	40022000 	.word	0x40022000
 80025bc:	46020c00 	.word	0x46020c00
 80025c0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c4:	f7fe fbea 	bl	8000d9c <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e090      	b.n	80026fc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025da:	4b4a      	ldr	r3, [pc, #296]	@ (8002704 <HAL_RCC_ClockConfig+0x3d0>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d1ee      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d010      	beq.n	8002614 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	4b43      	ldr	r3, [pc, #268]	@ (8002704 <HAL_RCC_ClockConfig+0x3d0>)
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	429a      	cmp	r2, r3
 8002600:	d208      	bcs.n	8002614 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002602:	4b40      	ldr	r3, [pc, #256]	@ (8002704 <HAL_RCC_ClockConfig+0x3d0>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	f023 020f 	bic.w	r2, r3, #15
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	493d      	ldr	r1, [pc, #244]	@ (8002704 <HAL_RCC_ClockConfig+0x3d0>)
 8002610:	4313      	orrs	r3, r2
 8002612:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002614:	4b3c      	ldr	r3, [pc, #240]	@ (8002708 <HAL_RCC_ClockConfig+0x3d4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d210      	bcs.n	8002644 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002622:	4b39      	ldr	r3, [pc, #228]	@ (8002708 <HAL_RCC_ClockConfig+0x3d4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 020f 	bic.w	r2, r3, #15
 800262a:	4937      	ldr	r1, [pc, #220]	@ (8002708 <HAL_RCC_ClockConfig+0x3d4>)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b35      	ldr	r3, [pc, #212]	@ (8002708 <HAL_RCC_ClockConfig+0x3d4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e05b      	b.n	80026fc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d010      	beq.n	8002672 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	4b2b      	ldr	r3, [pc, #172]	@ (8002704 <HAL_RCC_ClockConfig+0x3d0>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800265c:	429a      	cmp	r2, r3
 800265e:	d208      	bcs.n	8002672 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002660:	4b28      	ldr	r3, [pc, #160]	@ (8002704 <HAL_RCC_ClockConfig+0x3d0>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4925      	ldr	r1, [pc, #148]	@ (8002704 <HAL_RCC_ClockConfig+0x3d0>)
 800266e:	4313      	orrs	r3, r2
 8002670:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d012      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	4b20      	ldr	r3, [pc, #128]	@ (8002704 <HAL_RCC_ClockConfig+0x3d0>)
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	091b      	lsrs	r3, r3, #4
 8002688:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800268c:	429a      	cmp	r2, r3
 800268e:	d209      	bcs.n	80026a4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002690:	4b1c      	ldr	r3, [pc, #112]	@ (8002704 <HAL_RCC_ClockConfig+0x3d0>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	4919      	ldr	r1, [pc, #100]	@ (8002704 <HAL_RCC_ClockConfig+0x3d0>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d010      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695a      	ldr	r2, [r3, #20]
 80026b4:	4b13      	ldr	r3, [pc, #76]	@ (8002704 <HAL_RCC_ClockConfig+0x3d0>)
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026bc:	429a      	cmp	r2, r3
 80026be:	d208      	bcs.n	80026d2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80026c0:	4b10      	ldr	r3, [pc, #64]	@ (8002704 <HAL_RCC_ClockConfig+0x3d0>)
 80026c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	490d      	ldr	r1, [pc, #52]	@ (8002704 <HAL_RCC_ClockConfig+0x3d0>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80026d2:	f000 f821 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 80026d6:	4602      	mov	r2, r0
 80026d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002704 <HAL_RCC_ClockConfig+0x3d0>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	f003 030f 	and.w	r3, r3, #15
 80026e0:	490a      	ldr	r1, [pc, #40]	@ (800270c <HAL_RCC_ClockConfig+0x3d8>)
 80026e2:	5ccb      	ldrb	r3, [r1, r3]
 80026e4:	fa22 f303 	lsr.w	r3, r2, r3
 80026e8:	4a09      	ldr	r2, [pc, #36]	@ (8002710 <HAL_RCC_ClockConfig+0x3dc>)
 80026ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026ec:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <HAL_RCC_ClockConfig+0x3e0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fe fac9 	bl	8000c88 <HAL_InitTick>
 80026f6:	4603      	mov	r3, r0
 80026f8:	73fb      	strb	r3, [r7, #15]

  return status;
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	46020c00 	.word	0x46020c00
 8002708:	40022000 	.word	0x40022000
 800270c:	08006e08 	.word	0x08006e08
 8002710:	20000000 	.word	0x20000000
 8002714:	20000004 	.word	0x20000004

08002718 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	b08b      	sub	sp, #44	@ 0x2c
 800271c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002726:	4b78      	ldr	r3, [pc, #480]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002730:	4b75      	ldr	r3, [pc, #468]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0x34>
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2b0c      	cmp	r3, #12
 8002744:	d121      	bne.n	800278a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d11e      	bne.n	800278a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800274c:	4b6e      	ldr	r3, [pc, #440]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d107      	bne.n	8002768 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002758:	4b6b      	ldr	r3, [pc, #428]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800275a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800275e:	0b1b      	lsrs	r3, r3, #12
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	627b      	str	r3, [r7, #36]	@ 0x24
 8002766:	e005      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002768:	4b67      	ldr	r3, [pc, #412]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	0f1b      	lsrs	r3, r3, #28
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002774:	4a65      	ldr	r2, [pc, #404]	@ (800290c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d110      	bne.n	80027a6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002788:	e00d      	b.n	80027a6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800278a:	4b5f      	ldr	r3, [pc, #380]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b04      	cmp	r3, #4
 8002794:	d102      	bne.n	800279c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002796:	4b5e      	ldr	r3, [pc, #376]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002798:	623b      	str	r3, [r7, #32]
 800279a:	e004      	b.n	80027a6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80027a4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	2b0c      	cmp	r3, #12
 80027aa:	f040 80a5 	bne.w	80028f8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80027ae:	4b56      	ldr	r3, [pc, #344]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80027b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80027b8:	4b53      	ldr	r3, [pc, #332]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80027ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027bc:	0a1b      	lsrs	r3, r3, #8
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	3301      	adds	r3, #1
 80027c4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80027c6:	4b50      	ldr	r3, [pc, #320]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80027c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80027d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80027d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d6:	08db      	lsrs	r3, r3, #3
 80027d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	fb02 f303 	mul.w	r3, r2, r3
 80027e2:	ee07 3a90 	vmov	s15, r3
 80027e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ea:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d003      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0xe4>
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d022      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x128>
 80027fa:	e043      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002806:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002914 <HAL_RCC_GetSysClockFreq+0x1fc>
 800280a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800280e:	4b3e      	ldr	r3, [pc, #248]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800281e:	ed97 6a01 	vldr	s12, [r7, #4]
 8002822:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8002918 <HAL_RCC_GetSysClockFreq+0x200>
 8002826:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800282a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800282e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002832:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800283e:	e046      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8002914 <HAL_RCC_GetSysClockFreq+0x1fc>
 800284e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002852:	4b2d      	ldr	r3, [pc, #180]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002862:	ed97 6a01 	vldr	s12, [r7, #4]
 8002866:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8002918 <HAL_RCC_GetSysClockFreq+0x200>
 800286a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800286e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002876:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800287a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002882:	e024      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	ee07 3a90 	vmov	s15, r3
 800288a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	ee07 3a90 	vmov	s15, r3
 8002894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002898:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800289c:	4b1a      	ldr	r3, [pc, #104]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800289e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028a4:	ee07 3a90 	vmov	s15, r3
 80028a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80028ac:	ed97 6a01 	vldr	s12, [r7, #4]
 80028b0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8002918 <HAL_RCC_GetSysClockFreq+0x200>
 80028b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80028bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80028cc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80028ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80028d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d2:	0e1b      	lsrs	r3, r3, #24
 80028d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028d8:	3301      	adds	r3, #1
 80028da:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	ee07 3a90 	vmov	s15, r3
 80028e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80028ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028f2:	ee17 3a90 	vmov	r3, s15
 80028f6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80028f8:	6a3b      	ldr	r3, [r7, #32]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	372c      	adds	r7, #44	@ 0x2c
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	46020c00 	.word	0x46020c00
 800290c:	08006e20 	.word	0x08006e20
 8002910:	00f42400 	.word	0x00f42400
 8002914:	4b742400 	.word	0x4b742400
 8002918:	46000000 	.word	0x46000000

0800291c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002920:	f7ff fefa 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8002924:	4602      	mov	r2, r0
 8002926:	4b07      	ldr	r3, [pc, #28]	@ (8002944 <HAL_RCC_GetHCLKFreq+0x28>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	4906      	ldr	r1, [pc, #24]	@ (8002948 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002930:	5ccb      	ldrb	r3, [r1, r3]
 8002932:	fa22 f303 	lsr.w	r3, r2, r3
 8002936:	4a05      	ldr	r2, [pc, #20]	@ (800294c <HAL_RCC_GetHCLKFreq+0x30>)
 8002938:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800293a:	4b04      	ldr	r3, [pc, #16]	@ (800294c <HAL_RCC_GetHCLKFreq+0x30>)
 800293c:	681b      	ldr	r3, [r3, #0]
}
 800293e:	4618      	mov	r0, r3
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	46020c00 	.word	0x46020c00
 8002948:	08006e08 	.word	0x08006e08
 800294c:	20000000 	.word	0x20000000

08002950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002954:	f7ff ffe2 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8002958:	4602      	mov	r2, r0
 800295a:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	4903      	ldr	r1, [pc, #12]	@ (8002974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002966:	5ccb      	ldrb	r3, [r1, r3]
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800296c:	4618      	mov	r0, r3
 800296e:	bd80      	pop	{r7, pc}
 8002970:	46020c00 	.word	0x46020c00
 8002974:	08006e18 	.word	0x08006e18

08002978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800297c:	f7ff ffce 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8002980:	4602      	mov	r2, r0
 8002982:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	0a1b      	lsrs	r3, r3, #8
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	4903      	ldr	r1, [pc, #12]	@ (800299c <HAL_RCC_GetPCLK2Freq+0x24>)
 800298e:	5ccb      	ldrb	r3, [r1, r3]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}
 8002998:	46020c00 	.word	0x46020c00
 800299c:	08006e18 	.word	0x08006e18

080029a0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80029a4:	f7ff ffba 	bl	800291c <HAL_RCC_GetHCLKFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <HAL_RCC_GetPCLK3Freq+0x20>)
 80029ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	4903      	ldr	r1, [pc, #12]	@ (80029c4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	46020c00 	.word	0x46020c00
 80029c4:	08006e18 	.word	0x08006e18

080029c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029d0:	4b3e      	ldr	r3, [pc, #248]	@ (8002acc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80029d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029de:	f7fe fdbf 	bl	8001560 <HAL_PWREx_GetVoltageRange>
 80029e2:	6178      	str	r0, [r7, #20]
 80029e4:	e019      	b.n	8002a1a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029e6:	4b39      	ldr	r3, [pc, #228]	@ (8002acc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80029e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ec:	4a37      	ldr	r2, [pc, #220]	@ (8002acc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80029ee:	f043 0304 	orr.w	r3, r3, #4
 80029f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80029f6:	4b35      	ldr	r3, [pc, #212]	@ (8002acc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80029f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a04:	f7fe fdac 	bl	8001560 <HAL_PWREx_GetVoltageRange>
 8002a08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a0a:	4b30      	ldr	r3, [pc, #192]	@ (8002acc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a10:	4a2e      	ldr	r2, [pc, #184]	@ (8002acc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a12:	f023 0304 	bic.w	r3, r3, #4
 8002a16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a20:	d003      	beq.n	8002a2a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a28:	d109      	bne.n	8002a3e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a30:	d202      	bcs.n	8002a38 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002a32:	2301      	movs	r3, #1
 8002a34:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002a36:	e033      	b.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002a38:	2300      	movs	r3, #0
 8002a3a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002a3c:	e030      	b.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a44:	d208      	bcs.n	8002a58 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a4c:	d102      	bne.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002a4e:	2303      	movs	r3, #3
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	e025      	b.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e035      	b.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a5e:	d90f      	bls.n	8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d109      	bne.n	8002a7a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002a6c:	d902      	bls.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	e015      	b.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002a74:	2301      	movs	r3, #1
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	e012      	b.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	e00f      	b.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a86:	d109      	bne.n	8002a9c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a8e:	d102      	bne.n	8002a96 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002a90:	2301      	movs	r3, #1
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	e004      	b.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002a96:	2302      	movs	r3, #2
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	e001      	b.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f023 020f 	bic.w	r2, r3, #15
 8002aa8:	4909      	ldr	r1, [pc, #36]	@ (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002ab0:	4b07      	ldr	r3, [pc, #28]	@ (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d001      	beq.n	8002ac2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	46020c00 	.word	0x46020c00
 8002ad0:	40022000 	.word	0x40022000

08002ad4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad8:	b0ba      	sub	sp, #232	@ 0xe8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f002 0401 	and.w	r4, r2, #1
 8002af8:	2500      	movs	r5, #0
 8002afa:	ea54 0305 	orrs.w	r3, r4, r5
 8002afe:	d00b      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002b00:	4bcb      	ldr	r3, [pc, #812]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b06:	f023 0103 	bic.w	r1, r3, #3
 8002b0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b10:	4ac7      	ldr	r2, [pc, #796]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b12:	430b      	orrs	r3, r1
 8002b14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f002 0802 	and.w	r8, r2, #2
 8002b24:	f04f 0900 	mov.w	r9, #0
 8002b28:	ea58 0309 	orrs.w	r3, r8, r9
 8002b2c:	d00b      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002b2e:	4bc0      	ldr	r3, [pc, #768]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b34:	f023 010c 	bic.w	r1, r3, #12
 8002b38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3e:	4abc      	ldr	r2, [pc, #752]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b40:	430b      	orrs	r3, r1
 8002b42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	f002 0a04 	and.w	sl, r2, #4
 8002b52:	f04f 0b00 	mov.w	fp, #0
 8002b56:	ea5a 030b 	orrs.w	r3, sl, fp
 8002b5a:	d00b      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002b5c:	4bb4      	ldr	r3, [pc, #720]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b62:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002b66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6c:	4ab0      	ldr	r2, [pc, #704]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	f002 0308 	and.w	r3, r2, #8
 8002b80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b84:	2300      	movs	r3, #0
 8002b86:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b8a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4313      	orrs	r3, r2
 8002b92:	d00b      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002b94:	4ba6      	ldr	r3, [pc, #664]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba4:	4aa2      	ldr	r2, [pc, #648]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f002 0310 	and.w	r3, r2, #16
 8002bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002bc2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	d00b      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002bcc:	4b98      	ldr	r3, [pc, #608]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bdc:	4a94      	ldr	r2, [pc, #592]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bde:	430b      	orrs	r3, r1
 8002be0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002be4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bec:	f002 0320 	and.w	r3, r2, #32
 8002bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002bfa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4313      	orrs	r3, r2
 8002c02:	d00b      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002c04:	4b8a      	ldr	r3, [pc, #552]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c0a:	f023 0107 	bic.w	r1, r3, #7
 8002c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c14:	4a86      	ldr	r2, [pc, #536]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c16:	430b      	orrs	r3, r1
 8002c18:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c24:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002c28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c32:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	d00b      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002c3c:	4b7c      	ldr	r3, [pc, #496]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c42:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8002c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c4c:	4a78      	ldr	r2, [pc, #480]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002c60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c64:	2300      	movs	r3, #0
 8002c66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c6a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4313      	orrs	r3, r2
 8002c72:	d00b      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002c74:	4b6e      	ldr	r3, [pc, #440]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c84:	4a6a      	ldr	r2, [pc, #424]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c86:	430b      	orrs	r3, r1
 8002c88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c94:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8002c98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002ca2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	d00b      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002cac:	4b60      	ldr	r3, [pc, #384]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cb2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cbc:	4a5c      	ldr	r2, [pc, #368]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cbe:	430b      	orrs	r3, r1
 8002cc0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002cd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002cda:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	d00b      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002ce4:	4b52      	ldr	r3, [pc, #328]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cea:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8002cee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf4:	4a4e      	ldr	r2, [pc, #312]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cf6:	430b      	orrs	r3, r1
 8002cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d04:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8002d08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002d16:	460b      	mov	r3, r1
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	d00b      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002d1c:	4b44      	ldr	r3, [pc, #272]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d22:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8002d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d2c:	4a40      	ldr	r2, [pc, #256]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d2e:	430b      	orrs	r3, r1
 8002d30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002d40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d44:	2300      	movs	r3, #0
 8002d46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002d4a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4313      	orrs	r3, r2
 8002d52:	d00b      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002d54:	4b36      	ldr	r3, [pc, #216]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d5a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8002d5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d64:	4a32      	ldr	r2, [pc, #200]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d66:	430b      	orrs	r3, r1
 8002d68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002d6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d74:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002d78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d82:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002d86:	460b      	mov	r3, r1
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	d00c      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8002d8c:	4b28      	ldr	r3, [pc, #160]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002d96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d9e:	4a24      	ldr	r2, [pc, #144]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002da0:	430b      	orrs	r3, r1
 8002da2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002db2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002db4:	2300      	movs	r3, #0
 8002db6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002db8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	d04f      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8002dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dca:	2b80      	cmp	r3, #128	@ 0x80
 8002dcc:	d02d      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002dce:	2b80      	cmp	r3, #128	@ 0x80
 8002dd0:	d827      	bhi.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002dd2:	2b60      	cmp	r3, #96	@ 0x60
 8002dd4:	d02e      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002dd6:	2b60      	cmp	r3, #96	@ 0x60
 8002dd8:	d823      	bhi.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002dda:	2b40      	cmp	r3, #64	@ 0x40
 8002ddc:	d006      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002dde:	2b40      	cmp	r3, #64	@ 0x40
 8002de0:	d81f      	bhi.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x326>
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	d011      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002dea:	e01a      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002dec:	4b10      	ldr	r3, [pc, #64]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df0:	4a0f      	ldr	r2, [pc, #60]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002df2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002df8:	e01d      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002dfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dfe:	3308      	adds	r3, #8
 8002e00:	4618      	mov	r0, r3
 8002e02:	f002 fa17 	bl	8005234 <RCCEx_PLL2_Config>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e0c:	e013      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e12:	332c      	adds	r3, #44	@ 0x2c
 8002e14:	4618      	mov	r0, r3
 8002e16:	f002 faa5 	bl	8005364 <RCCEx_PLL3_Config>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e20:	e009      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002e28:	e005      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8002e2a:	bf00      	nop
 8002e2c:	e003      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002e2e:	bf00      	nop
 8002e30:	46020c00 	.word	0x46020c00
        break;
 8002e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e36:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10d      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8002e3e:	4bb6      	ldr	r3, [pc, #728]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002e40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002e44:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8002e48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e50:	4ab1      	ldr	r2, [pc, #708]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002e52:	430b      	orrs	r3, r1
 8002e54:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002e58:	e003      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e5a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002e5e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002e6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e70:	2300      	movs	r3, #0
 8002e72:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e74:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	d053      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8002e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e8a:	d033      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002e8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e90:	d82c      	bhi.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002e92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e96:	d02f      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002e98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e9c:	d826      	bhi.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002e9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8002ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ea8:	d820      	bhi.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8002eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eb2:	d011      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002eb4:	e01a      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002eb6:	4b98      	ldr	r3, [pc, #608]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eba:	4a97      	ldr	r2, [pc, #604]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002ec2:	e01a      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ec4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ec8:	3308      	adds	r3, #8
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f002 f9b2 	bl	8005234 <RCCEx_PLL2_Config>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002ed6:	e010      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002ed8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002edc:	332c      	adds	r3, #44	@ 0x2c
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f002 fa40 	bl	8005364 <RCCEx_PLL3_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002eea:	e006      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002ef2:	e002      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8002ef4:	bf00      	nop
 8002ef6:	e000      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8002ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002efa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10d      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8002f02:	4b85      	ldr	r3, [pc, #532]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002f04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002f08:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8002f0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f14:	4a80      	ldr	r2, [pc, #512]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002f16:	430b      	orrs	r3, r1
 8002f18:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002f1c:	e003      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002f22:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002f32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f34:	2300      	movs	r3, #0
 8002f36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f38:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	d046      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002f4a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002f4e:	d028      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002f50:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002f54:	d821      	bhi.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002f56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f5a:	d022      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002f5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f60:	d81b      	bhi.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002f62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f66:	d01c      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002f68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f6c:	d815      	bhi.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002f6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f72:	d008      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002f74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f78:	d80f      	bhi.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d011      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f82:	d00e      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002f84:	e009      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f8a:	3308      	adds	r3, #8
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f002 f951 	bl	8005234 <RCCEx_PLL2_Config>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002f98:	e004      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002fa0:	e000      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8002fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fa4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10d      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002fac:	4b5a      	ldr	r3, [pc, #360]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002fae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fb2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002fbe:	4a56      	ldr	r2, [pc, #344]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002fc6:	e003      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002fcc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8002fd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8002fdc:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fde:	2300      	movs	r3, #0
 8002fe0:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fe2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	d03f      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8002fec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d81e      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8002ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8003000 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8002ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffe:	bf00      	nop
 8003000:	0800303f 	.word	0x0800303f
 8003004:	08003015 	.word	0x08003015
 8003008:	08003023 	.word	0x08003023
 800300c:	0800303f 	.word	0x0800303f
 8003010:	0800303f 	.word	0x0800303f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003014:	4b40      	ldr	r3, [pc, #256]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003018:	4a3f      	ldr	r2, [pc, #252]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800301a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800301e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003020:	e00e      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003026:	332c      	adds	r3, #44	@ 0x2c
 8003028:	4618      	mov	r0, r3
 800302a:	f002 f99b 	bl	8005364 <RCCEx_PLL3_Config>
 800302e:	4603      	mov	r3, r0
 8003030:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003034:	e004      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800303c:	e000      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800303e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003040:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10d      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003048:	4b33      	ldr	r3, [pc, #204]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800304a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800304e:	f023 0107 	bic.w	r1, r3, #7
 8003052:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305a:	4a2f      	ldr	r2, [pc, #188]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800305c:	430b      	orrs	r3, r1
 800305e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003062:	e003      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003064:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003068:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800306c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003074:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003078:	65bb      	str	r3, [r7, #88]	@ 0x58
 800307a:	2300      	movs	r3, #0
 800307c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800307e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003082:	460b      	mov	r3, r1
 8003084:	4313      	orrs	r3, r2
 8003086:	d04d      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003088:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800308c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003090:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003094:	d028      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003096:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800309a:	d821      	bhi.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800309c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030a0:	d024      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x618>
 80030a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030a6:	d81b      	bhi.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80030a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030ac:	d00e      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80030ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030b2:	d815      	bhi.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d01b      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80030b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030bc:	d110      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030be:	4b16      	ldr	r3, [pc, #88]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80030c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c2:	4a15      	ldr	r2, [pc, #84]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80030ca:	e012      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030d0:	332c      	adds	r3, #44	@ 0x2c
 80030d2:	4618      	mov	r0, r3
 80030d4:	f002 f946 	bl	8005364 <RCCEx_PLL3_Config>
 80030d8:	4603      	mov	r3, r0
 80030da:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80030de:	e008      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80030e6:	e004      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80030e8:	bf00      	nop
 80030ea:	e002      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80030ec:	bf00      	nop
 80030ee:	e000      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80030f0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80030f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d110      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80030fa:	4b07      	ldr	r3, [pc, #28]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80030fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003100:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003104:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003108:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800310c:	4a02      	ldr	r2, [pc, #8]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800310e:	430b      	orrs	r3, r1
 8003110:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003114:	e006      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8003116:	bf00      	nop
 8003118:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800311c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003120:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003124:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003130:	653b      	str	r3, [r7, #80]	@ 0x50
 8003132:	2300      	movs	r3, #0
 8003134:	657b      	str	r3, [r7, #84]	@ 0x54
 8003136:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800313a:	460b      	mov	r3, r1
 800313c:	4313      	orrs	r3, r2
 800313e:	f000 80b5 	beq.w	80032ac <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003142:	2300      	movs	r3, #0
 8003144:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003148:	4b9d      	ldr	r3, [pc, #628]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800314a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	d113      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003156:	4b9a      	ldr	r3, [pc, #616]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003158:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800315c:	4a98      	ldr	r2, [pc, #608]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800315e:	f043 0304 	orr.w	r3, r3, #4
 8003162:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003166:	4b96      	ldr	r3, [pc, #600]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003168:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003174:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800317e:	4b91      	ldr	r3, [pc, #580]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003182:	4a90      	ldr	r2, [pc, #576]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800318a:	f7fd fe07 	bl	8000d9c <HAL_GetTick>
 800318e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003192:	e00b      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003194:	f7fd fe02 	bl	8000d9c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d903      	bls.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80031aa:	e005      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80031ac:	4b85      	ldr	r3, [pc, #532]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80031ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0ed      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80031b8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d165      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031c0:	4b7f      	ldr	r3, [pc, #508]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80031ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d023      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80031d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80031de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d01b      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031e6:	4b76      	ldr	r3, [pc, #472]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031f4:	4b72      	ldr	r3, [pc, #456]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031fa:	4a71      	ldr	r2, [pc, #452]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003200:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003204:	4b6e      	ldr	r3, [pc, #440]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003206:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800320a:	4a6d      	ldr	r2, [pc, #436]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800320c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003210:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003214:	4a6a      	ldr	r2, [pc, #424]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800321a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800321e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d019      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7fd fdb7 	bl	8000d9c <HAL_GetTick>
 800322e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003232:	e00d      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003234:	f7fd fdb2 	bl	8000d9c <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800323e:	1ad2      	subs	r2, r2, r3
 8003240:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003244:	429a      	cmp	r2, r3
 8003246:	d903      	bls.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 800324e:	e006      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003250:	4b5b      	ldr	r3, [pc, #364]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003252:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0ea      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800325e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10d      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003266:	4b56      	ldr	r3, [pc, #344]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003268:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800326c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003270:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003274:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003278:	4a51      	ldr	r2, [pc, #324]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800327a:	430b      	orrs	r3, r1
 800327c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003280:	e008      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003282:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003286:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 800328a:	e003      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003290:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003294:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8003298:	2b01      	cmp	r3, #1
 800329a:	d107      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329c:	4b48      	ldr	r3, [pc, #288]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800329e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032a2:	4a47      	ldr	r2, [pc, #284]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80032a4:	f023 0304 	bic.w	r3, r3, #4
 80032a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80032ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80032b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032ba:	2300      	movs	r3, #0
 80032bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032be:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80032c2:	460b      	mov	r3, r1
 80032c4:	4313      	orrs	r3, r2
 80032c6:	d042      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80032c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80032d0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80032d4:	d022      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x848>
 80032d6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80032da:	d81b      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80032dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032e0:	d011      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x832>
 80032e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032e6:	d815      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d019      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80032ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032f0:	d110      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032f6:	3308      	adds	r3, #8
 80032f8:	4618      	mov	r0, r3
 80032fa:	f001 ff9b 	bl	8005234 <RCCEx_PLL2_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003304:	e00d      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003306:	4b2e      	ldr	r3, [pc, #184]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330a:	4a2d      	ldr	r2, [pc, #180]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800330c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003310:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003312:	e006      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800331a:	e002      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800331c:	bf00      	nop
 800331e:	e000      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8003320:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003322:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10d      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800332a:	4b25      	ldr	r3, [pc, #148]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800332c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003330:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003334:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003338:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800333c:	4a20      	ldr	r2, [pc, #128]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800333e:	430b      	orrs	r3, r1
 8003340:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003344:	e003      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003346:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800334a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800334e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003356:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800335a:	643b      	str	r3, [r7, #64]	@ 0x40
 800335c:	2300      	movs	r3, #0
 800335e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003360:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003364:	460b      	mov	r3, r1
 8003366:	4313      	orrs	r3, r2
 8003368:	d032      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800336a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800336e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003376:	d00b      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003378:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800337c:	d804      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003386:	d007      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800338e:	e004      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003390:	bf00      	nop
 8003392:	e002      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003394:	bf00      	nop
 8003396:	e000      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003398:	bf00      	nop
    }
    if (ret == HAL_OK)
 800339a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d112      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80033a2:	4b07      	ldr	r3, [pc, #28]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80033a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80033a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033b4:	4a02      	ldr	r2, [pc, #8]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80033b6:	430b      	orrs	r3, r1
 80033b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80033bc:	e008      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80033be:	bf00      	nop
 80033c0:	46020c00 	.word	0x46020c00
 80033c4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80033cc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80033d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80033dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033de:	2300      	movs	r3, #0
 80033e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033e2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80033e6:	460b      	mov	r3, r1
 80033e8:	4313      	orrs	r3, r2
 80033ea:	d00c      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80033ec:	4b98      	ldr	r3, [pc, #608]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80033ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80033f2:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80033f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033fe:	4a94      	ldr	r2, [pc, #592]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003400:	430b      	orrs	r3, r1
 8003402:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800340a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003412:	633b      	str	r3, [r7, #48]	@ 0x30
 8003414:	2300      	movs	r3, #0
 8003416:	637b      	str	r3, [r7, #52]	@ 0x34
 8003418:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800341c:	460b      	mov	r3, r1
 800341e:	4313      	orrs	r3, r2
 8003420:	d019      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003422:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003426:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800342a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800342e:	d105      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003430:	4b87      	ldr	r3, [pc, #540]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003434:	4a86      	ldr	r2, [pc, #536]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800343a:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800343c:	4b84      	ldr	r3, [pc, #528]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800343e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003442:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800344a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800344e:	4a80      	ldr	r2, [pc, #512]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003450:	430b      	orrs	r3, r1
 8003452:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800345a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003462:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003464:	2300      	movs	r3, #0
 8003466:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003468:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800346c:	460b      	mov	r3, r1
 800346e:	4313      	orrs	r3, r2
 8003470:	d00c      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003472:	4b77      	ldr	r3, [pc, #476]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003478:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800347c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003480:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003484:	4972      	ldr	r1, [pc, #456]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800348c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003498:	623b      	str	r3, [r7, #32]
 800349a:	2300      	movs	r3, #0
 800349c:	627b      	str	r3, [r7, #36]	@ 0x24
 800349e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80034a2:	460b      	mov	r3, r1
 80034a4:	4313      	orrs	r3, r2
 80034a6:	d00c      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80034a8:	4b69      	ldr	r3, [pc, #420]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80034aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80034ba:	4965      	ldr	r1, [pc, #404]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80034c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ca:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80034ce:	61bb      	str	r3, [r7, #24]
 80034d0:	2300      	movs	r3, #0
 80034d2:	61fb      	str	r3, [r7, #28]
 80034d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80034d8:	460b      	mov	r3, r1
 80034da:	4313      	orrs	r3, r2
 80034dc:	d00c      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80034de:	4b5c      	ldr	r3, [pc, #368]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80034e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80034e4:	f023 0218 	bic.w	r2, r3, #24
 80034e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80034f0:	4957      	ldr	r1, [pc, #348]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80034f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800350e:	460b      	mov	r3, r1
 8003510:	4313      	orrs	r3, r2
 8003512:	d032      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003514:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003518:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800351c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003520:	d105      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003522:	4b4b      	ldr	r3, [pc, #300]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003526:	4a4a      	ldr	r2, [pc, #296]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800352c:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800352e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003532:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003536:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800353a:	d108      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800353c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003540:	3308      	adds	r3, #8
 8003542:	4618      	mov	r0, r3
 8003544:	f001 fe76 	bl	8005234 <RCCEx_PLL2_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 800354e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10d      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003556:	4b3e      	ldr	r3, [pc, #248]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003558:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800355c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003560:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003564:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003568:	4939      	ldr	r1, [pc, #228]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003570:	e003      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003572:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003576:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800357a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003582:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003590:	460b      	mov	r3, r1
 8003592:	4313      	orrs	r3, r2
 8003594:	d03a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800359a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800359e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035a2:	d00e      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80035a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035a8:	d815      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d017      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80035ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035b2:	d110      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b4:	4b26      	ldr	r3, [pc, #152]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80035b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b8:	4a25      	ldr	r2, [pc, #148]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80035ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035be:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80035c0:	e00e      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035c6:	3308      	adds	r3, #8
 80035c8:	4618      	mov	r0, r3
 80035ca:	f001 fe33 	bl	8005234 <RCCEx_PLL2_Config>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80035d4:	e004      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80035dc:	e000      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 80035de:	bf00      	nop
    }
    if (ret == HAL_OK)
 80035e0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10d      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80035e8:	4b19      	ldr	r3, [pc, #100]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80035ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80035f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035fa:	4915      	ldr	r1, [pc, #84]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003602:	e003      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003604:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003608:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800360c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003614:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003618:	603b      	str	r3, [r7, #0]
 800361a:	2300      	movs	r3, #0
 800361c:	607b      	str	r3, [r7, #4]
 800361e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003622:	460b      	mov	r3, r1
 8003624:	4313      	orrs	r3, r2
 8003626:	d00c      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003628:	4b09      	ldr	r3, [pc, #36]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800362a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800362e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003636:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800363a:	4905      	ldr	r1, [pc, #20]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003642:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8003646:	4618      	mov	r0, r3
 8003648:	37e8      	adds	r7, #232	@ 0xe8
 800364a:	46bd      	mov	sp, r7
 800364c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003650:	46020c00 	.word	0x46020c00

08003654 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8003654:	b480      	push	{r7}
 8003656:	b089      	sub	sp, #36	@ 0x24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800365c:	4ba6      	ldr	r3, [pc, #664]	@ (80038f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800365e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003664:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003666:	4ba4      	ldr	r3, [pc, #656]	@ (80038f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003670:	4ba1      	ldr	r3, [pc, #644]	@ (80038f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003674:	0a1b      	lsrs	r3, r3, #8
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	3301      	adds	r3, #1
 800367c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800367e:	4b9e      	ldr	r3, [pc, #632]	@ (80038f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003682:	091b      	lsrs	r3, r3, #4
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800368a:	4b9b      	ldr	r3, [pc, #620]	@ (80038f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800368c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368e:	08db      	lsrs	r3, r3, #3
 8003690:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	ee07 3a90 	vmov	s15, r3
 800369e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d062      	beq.n	8003772 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	f200 8081 	bhi.w	80037b6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d024      	beq.n	8003704 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d17a      	bne.n	80037b6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	ee07 3a90 	vmov	s15, r3
 80036c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ca:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80038fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80036ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036d2:	4b89      	ldr	r3, [pc, #548]	@ (80038f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80036d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80036e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80036e6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8003900 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80036ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80036f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003702:	e08f      	b.n	8003824 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003704:	4b7c      	ldr	r3, [pc, #496]	@ (80038f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003710:	4b79      	ldr	r3, [pc, #484]	@ (80038f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	0f1b      	lsrs	r3, r3, #28
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	e006      	b.n	800372a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800371c:	4b76      	ldr	r3, [pc, #472]	@ (80038f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800371e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003722:	041b      	lsls	r3, r3, #16
 8003724:	0f1b      	lsrs	r3, r3, #28
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	4a76      	ldr	r2, [pc, #472]	@ (8003904 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800372c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003730:	ee07 3a90 	vmov	s15, r3
 8003734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	ee07 3a90 	vmov	s15, r3
 800374c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003750:	ed97 6a02 	vldr	s12, [r7, #8]
 8003754:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8003900 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003758:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800375c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003760:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003764:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003770:	e058      	b.n	8003824 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	ee07 3a90 	vmov	s15, r3
 8003778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80038fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8003780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003784:	4b5c      	ldr	r3, [pc, #368]	@ (80038f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378c:	ee07 3a90 	vmov	s15, r3
 8003790:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003794:	ed97 6a02 	vldr	s12, [r7, #8]
 8003798:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8003900 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800379c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80037a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037b4:	e036      	b.n	8003824 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80037b6:	4b50      	ldr	r3, [pc, #320]	@ (80038f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80037c2:	4b4d      	ldr	r3, [pc, #308]	@ (80038f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	0f1b      	lsrs	r3, r3, #28
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	e006      	b.n	80037dc <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80037ce:	4b4a      	ldr	r3, [pc, #296]	@ (80038f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80037d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80037d4:	041b      	lsls	r3, r3, #16
 80037d6:	0f1b      	lsrs	r3, r3, #28
 80037d8:	f003 030f 	and.w	r3, r3, #15
 80037dc:	4a49      	ldr	r2, [pc, #292]	@ (8003904 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80037de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	ee07 3a90 	vmov	s15, r3
 80037f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003802:	ed97 6a02 	vldr	s12, [r7, #8]
 8003806:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003900 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800380a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800380e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003816:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800381a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003822:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003824:	4b34      	ldr	r3, [pc, #208]	@ (80038f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d017      	beq.n	8003860 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003830:	4b31      	ldr	r3, [pc, #196]	@ (80038f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003834:	0a5b      	lsrs	r3, r3, #9
 8003836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800383a:	ee07 3a90 	vmov	s15, r3
 800383e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003842:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003846:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800384a:	edd7 6a07 	vldr	s13, [r7, #28]
 800384e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003856:	ee17 2a90 	vmov	r2, s15
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e002      	b.n	8003866 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003866:	4b24      	ldr	r3, [pc, #144]	@ (80038f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d017      	beq.n	80038a2 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003872:	4b21      	ldr	r3, [pc, #132]	@ (80038f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003876:	0c1b      	lsrs	r3, r3, #16
 8003878:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800387c:	ee07 3a90 	vmov	s15, r3
 8003880:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003884:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003888:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800388c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003898:	ee17 2a90 	vmov	r2, s15
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	605a      	str	r2, [r3, #4]
 80038a0:	e002      	b.n	80038a8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80038a8:	4b13      	ldr	r3, [pc, #76]	@ (80038f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80038aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d017      	beq.n	80038e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80038b4:	4b10      	ldr	r3, [pc, #64]	@ (80038f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80038b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b8:	0e1b      	lsrs	r3, r3, #24
 80038ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038be:	ee07 3a90 	vmov	s15, r3
 80038c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80038c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80038ca:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80038ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80038d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038da:	ee17 2a90 	vmov	r2, s15
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80038e2:	e002      	b.n	80038ea <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	609a      	str	r2, [r3, #8]
}
 80038ea:	bf00      	nop
 80038ec:	3724      	adds	r7, #36	@ 0x24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	46020c00 	.word	0x46020c00
 80038fc:	4b742400 	.word	0x4b742400
 8003900:	46000000 	.word	0x46000000
 8003904:	08006e20 	.word	0x08006e20

08003908 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003908:	b480      	push	{r7}
 800390a:	b089      	sub	sp, #36	@ 0x24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003910:	4ba6      	ldr	r3, [pc, #664]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003918:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800391a:	4ba4      	ldr	r3, [pc, #656]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800391c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003924:	4ba1      	ldr	r3, [pc, #644]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003928:	0a1b      	lsrs	r3, r3, #8
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	3301      	adds	r3, #1
 8003930:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003932:	4b9e      	ldr	r3, [pc, #632]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003936:	091b      	lsrs	r3, r3, #4
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800393e:	4b9b      	ldr	r3, [pc, #620]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	08db      	lsrs	r3, r3, #3
 8003944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	fb02 f303 	mul.w	r3, r2, r3
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003956:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b03      	cmp	r3, #3
 800395e:	d062      	beq.n	8003a26 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b03      	cmp	r3, #3
 8003964:	f200 8081 	bhi.w	8003a6a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d024      	beq.n	80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d17a      	bne.n	8003a6a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8003bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8003982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003986:	4b89      	ldr	r3, [pc, #548]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003996:	ed97 6a02 	vldr	s12, [r7, #8]
 800399a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800399e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80039a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80039a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80039ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039b6:	e08f      	b.n	8003ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80039b8:	4b7c      	ldr	r3, [pc, #496]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80039c4:	4b79      	ldr	r3, [pc, #484]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	0f1b      	lsrs	r3, r3, #28
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	e006      	b.n	80039de <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80039d0:	4b76      	ldr	r3, [pc, #472]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80039d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039d6:	041b      	lsls	r3, r3, #16
 80039d8:	0f1b      	lsrs	r3, r3, #28
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	4a76      	ldr	r2, [pc, #472]	@ (8003bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80039e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e4:	ee07 3a90 	vmov	s15, r3
 80039e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	ee07 3a90 	vmov	s15, r3
 8003a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a04:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a08:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003a0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a18:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a24:	e058      	b.n	8003ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	ee07 3a90 	vmov	s15, r3
 8003a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a30:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8003a34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a38:	4b5c      	ldr	r3, [pc, #368]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a40:	ee07 3a90 	vmov	s15, r3
 8003a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a48:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a4c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003a50:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003a54:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a68:	e036      	b.n	8003ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003a6a:	4b50      	ldr	r3, [pc, #320]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d005      	beq.n	8003a82 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8003a76:	4b4d      	ldr	r3, [pc, #308]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	0f1b      	lsrs	r3, r3, #28
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	e006      	b.n	8003a90 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8003a82:	4b4a      	ldr	r3, [pc, #296]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003a84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a88:	041b      	lsls	r3, r3, #16
 8003a8a:	0f1b      	lsrs	r3, r3, #28
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	4a49      	ldr	r2, [pc, #292]	@ (8003bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8003a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	ee07 3a90 	vmov	s15, r3
 8003aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aba:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ad6:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003ad8:	4b34      	ldr	r3, [pc, #208]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d017      	beq.n	8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003ae4:	4b31      	ldr	r3, [pc, #196]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae8:	0a5b      	lsrs	r3, r3, #9
 8003aea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003af6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003afa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003afe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b0a:	ee17 2a90 	vmov	r2, s15
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	e002      	b.n	8003b1a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003b1a:	4b24      	ldr	r3, [pc, #144]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d017      	beq.n	8003b56 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003b26:	4b21      	ldr	r3, [pc, #132]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2a:	0c1b      	lsrs	r3, r3, #16
 8003b2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b30:	ee07 3a90 	vmov	s15, r3
 8003b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003b38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b3c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003b40:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b4c:	ee17 2a90 	vmov	r2, s15
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	605a      	str	r2, [r3, #4]
 8003b54:	e002      	b.n	8003b5c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003b5c:	4b13      	ldr	r3, [pc, #76]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d017      	beq.n	8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003b68:	4b10      	ldr	r3, [pc, #64]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6c:	0e1b      	lsrs	r3, r3, #24
 8003b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b72:	ee07 3a90 	vmov	s15, r3
 8003b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003b7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b7e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003b82:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b8e:	ee17 2a90 	vmov	r2, s15
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003b96:	e002      	b.n	8003b9e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	609a      	str	r2, [r3, #8]
}
 8003b9e:	bf00      	nop
 8003ba0:	3724      	adds	r7, #36	@ 0x24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	46020c00 	.word	0x46020c00
 8003bb0:	4b742400 	.word	0x4b742400
 8003bb4:	46000000 	.word	0x46000000
 8003bb8:	08006e20 	.word	0x08006e20

08003bbc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b089      	sub	sp, #36	@ 0x24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003bc4:	4ba6      	ldr	r3, [pc, #664]	@ (8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bcc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003bce:	4ba4      	ldr	r3, [pc, #656]	@ (8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003bd8:	4ba1      	ldr	r3, [pc, #644]	@ (8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bdc:	0a1b      	lsrs	r3, r3, #8
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	3301      	adds	r3, #1
 8003be4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8003be6:	4b9e      	ldr	r3, [pc, #632]	@ (8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bea:	091b      	lsrs	r3, r3, #4
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003bf2:	4b9b      	ldr	r3, [pc, #620]	@ (8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf6:	08db      	lsrs	r3, r3, #3
 8003bf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	fb02 f303 	mul.w	r3, r2, r3
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d062      	beq.n	8003cda <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	f200 8081 	bhi.w	8003d1e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d024      	beq.n	8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d17a      	bne.n	8003d1e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c32:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8003e64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8003c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c3a:	4b89      	ldr	r3, [pc, #548]	@ (8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c4e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8003e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c66:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8003c6a:	e08f      	b.n	8003d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003c6c:	4b7c      	ldr	r3, [pc, #496]	@ (8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8003c78:	4b79      	ldr	r3, [pc, #484]	@ (8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	0f1b      	lsrs	r3, r3, #28
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	e006      	b.n	8003c92 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8003c84:	4b76      	ldr	r3, [pc, #472]	@ (8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003c86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003c8a:	041b      	lsls	r3, r3, #16
 8003c8c:	0f1b      	lsrs	r3, r3, #28
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	4a76      	ldr	r2, [pc, #472]	@ (8003e6c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8003c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c98:	ee07 3a90 	vmov	s15, r3
 8003c9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	ee07 3a90 	vmov	s15, r3
 8003ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	ee07 3a90 	vmov	s15, r3
 8003cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cb8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cbc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8003e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003cc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003cd8:	e058      	b.n	8003d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	ee07 3a90 	vmov	s15, r3
 8003ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003e64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8003ce8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cec:	4b5c      	ldr	r3, [pc, #368]	@ (8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf4:	ee07 3a90 	vmov	s15, r3
 8003cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cfc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d00:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8003e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003d04:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003d08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d10:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d1c:	e036      	b.n	8003d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003d1e:	4b50      	ldr	r3, [pc, #320]	@ (8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8003d2a:	4b4d      	ldr	r3, [pc, #308]	@ (8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	0f1b      	lsrs	r3, r3, #28
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	e006      	b.n	8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8003d36:	4b4a      	ldr	r3, [pc, #296]	@ (8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d3c:	041b      	lsls	r3, r3, #16
 8003d3e:	0f1b      	lsrs	r3, r3, #28
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	4a49      	ldr	r2, [pc, #292]	@ (8003e6c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8003d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	ee07 3a90 	vmov	s15, r3
 8003d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d6e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d8a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8003d8c:	4b34      	ldr	r3, [pc, #208]	@ (8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d017      	beq.n	8003dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003d98:	4b31      	ldr	r3, [pc, #196]	@ (8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9c:	0a5b      	lsrs	r3, r3, #9
 8003d9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8003daa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003dae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003db2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dbe:	ee17 2a90 	vmov	r2, s15
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	e002      	b.n	8003dce <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8003dce:	4b24      	ldr	r3, [pc, #144]	@ (8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d017      	beq.n	8003e0a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003dda:	4b21      	ldr	r3, [pc, #132]	@ (8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dde:	0c1b      	lsrs	r3, r3, #16
 8003de0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003de4:	ee07 3a90 	vmov	s15, r3
 8003de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8003dec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003df0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003df4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e00:	ee17 2a90 	vmov	r2, s15
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	605a      	str	r2, [r3, #4]
 8003e08:	e002      	b.n	8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8003e10:	4b13      	ldr	r3, [pc, #76]	@ (8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d017      	beq.n	8003e4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003e1c:	4b10      	ldr	r3, [pc, #64]	@ (8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e20:	0e1b      	lsrs	r3, r3, #24
 8003e22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8003e2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e32:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e42:	ee17 2a90 	vmov	r2, s15
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003e4a:	e002      	b.n	8003e52 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	609a      	str	r2, [r3, #8]
}
 8003e52:	bf00      	nop
 8003e54:	3724      	adds	r7, #36	@ 0x24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	46020c00 	.word	0x46020c00
 8003e64:	4b742400 	.word	0x4b742400
 8003e68:	46000000 	.word	0x46000000
 8003e6c:	08006e20 	.word	0x08006e20

08003e70 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08e      	sub	sp, #56	@ 0x38
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003e7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e7e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8003e82:	430b      	orrs	r3, r1
 8003e84:	d145      	bne.n	8003f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003e86:	4ba7      	ldr	r3, [pc, #668]	@ (8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e90:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003e92:	4ba4      	ldr	r3, [pc, #656]	@ (8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003e94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d108      	bne.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ea6:	d104      	bne.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003ea8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eac:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eae:	f001 b9b3 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003eb2:	4b9c      	ldr	r3, [pc, #624]	@ (8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ebc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ec0:	d114      	bne.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ec8:	d110      	bne.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003eca:	4b96      	ldr	r3, [pc, #600]	@ (8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ed8:	d103      	bne.n	8003ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8003eda:	23fa      	movs	r3, #250	@ 0xfa
 8003edc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003ede:	f001 b99b 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8003ee2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003ee6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003ee8:	f001 b996 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003eec:	4b8d      	ldr	r3, [pc, #564]	@ (8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ef8:	d107      	bne.n	8003f0a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8003efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f00:	d103      	bne.n	8003f0a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8003f02:	4b89      	ldr	r3, [pc, #548]	@ (8004128 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f06:	f001 b987 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f0e:	f001 b983 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003f12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f16:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8003f1a:	430b      	orrs	r3, r1
 8003f1c:	d151      	bne.n	8003fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003f1e:	4b81      	ldr	r3, [pc, #516]	@ (8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003f20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f24:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8003f28:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2c:	2b80      	cmp	r3, #128	@ 0x80
 8003f2e:	d035      	beq.n	8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8003f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f32:	2b80      	cmp	r3, #128	@ 0x80
 8003f34:	d841      	bhi.n	8003fba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f38:	2b60      	cmp	r3, #96	@ 0x60
 8003f3a:	d02a      	beq.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3e:	2b60      	cmp	r3, #96	@ 0x60
 8003f40:	d83b      	bhi.n	8003fba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f44:	2b40      	cmp	r3, #64	@ 0x40
 8003f46:	d009      	beq.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8003f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4a:	2b40      	cmp	r3, #64	@ 0x40
 8003f4c:	d835      	bhi.n	8003fba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00c      	beq.n	8003f6e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8003f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d012      	beq.n	8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003f5a:	e02e      	b.n	8003fba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003f5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff fb77 	bl	8003654 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8003f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f6a:	f001 b955 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003f6e:	f107 0318 	add.w	r3, r7, #24
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff fcc8 	bl	8003908 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f7c:	f001 b94c 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003f80:	f107 030c 	add.w	r3, r7, #12
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff fe19 	bl	8003bbc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f8e:	f001 b943 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003f92:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8003f96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f98:	f001 b93e 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f9c:	4b61      	ldr	r3, [pc, #388]	@ (8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fa8:	d103      	bne.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8003faa:	4b60      	ldr	r3, [pc, #384]	@ (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003fac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003fae:	f001 b933 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fb6:	f001 b92f 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fbe:	f001 b92b 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8003fc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fc6:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	d158      	bne.n	8004080 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003fce:	4b55      	ldr	r3, [pc, #340]	@ (8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003fd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003fd4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003fd8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8003fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fe0:	d03b      	beq.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fe8:	d846      	bhi.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8003fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ff0:	d02e      	beq.n	8004050 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ff8:	d83e      	bhi.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004000:	d00b      	beq.n	800401a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8004002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004008:	d836      	bhi.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800400a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00d      	beq.n	800402c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004016:	d012      	beq.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8004018:	e02e      	b.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800401a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fb18 	bl	8003654 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004026:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004028:	f001 b8f6 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800402c:	f107 0318 	add.w	r3, r7, #24
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff fc69 	bl	8003908 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800403a:	f001 b8ed 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800403e:	f107 030c 	add.w	r3, r7, #12
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fdba 	bl	8003bbc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800404c:	f001 b8e4 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004050:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004054:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004056:	f001 b8df 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800405a:	4b32      	ldr	r3, [pc, #200]	@ (8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004066:	d103      	bne.n	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8004068:	4b30      	ldr	r3, [pc, #192]	@ (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800406a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800406c:	f001 b8d4 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004074:	f001 b8d0 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800407c:	f001 b8cc 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004084:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004088:	430b      	orrs	r3, r1
 800408a:	d126      	bne.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800408c:	4b25      	ldr	r3, [pc, #148]	@ (8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800408e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004092:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004096:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004098:	4b22      	ldr	r3, [pc, #136]	@ (8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040a4:	d106      	bne.n	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80040a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d103      	bne.n	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80040ac:	4b1f      	ldr	r3, [pc, #124]	@ (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80040ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80040b0:	f001 b8b2 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80040b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040c0:	d107      	bne.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040c8:	d103      	bne.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80040ca:	4b19      	ldr	r3, [pc, #100]	@ (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80040cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ce:	f001 b8a3 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80040d6:	f001 b89f 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80040da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040de:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80040e2:	430b      	orrs	r3, r1
 80040e4:	d16e      	bne.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80040e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80040e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040ec:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80040f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80040f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80040f8:	d03d      	beq.n	8004176 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80040fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004100:	d85c      	bhi.n	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004104:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004108:	d014      	beq.n	8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800410a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004110:	d854      	bhi.n	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004114:	2b00      	cmp	r3, #0
 8004116:	d01f      	beq.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8004118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800411e:	d012      	beq.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004120:	e04c      	b.n	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004122:	bf00      	nop
 8004124:	46020c00 	.word	0x46020c00
 8004128:	0007a120 	.word	0x0007a120
 800412c:	00f42400 	.word	0x00f42400
 8004130:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004134:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fa8b 	bl	8003654 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800413e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004140:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004142:	f001 b869 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004146:	f107 0318 	add.w	r3, r7, #24
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff fbdc 	bl	8003908 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004154:	f001 b860 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004158:	4ba7      	ldr	r3, [pc, #668]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004160:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004164:	d103      	bne.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8004166:	4ba5      	ldr	r3, [pc, #660]	@ (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004168:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800416a:	f001 b855 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004172:	f001 b851 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004176:	4ba0      	ldr	r3, [pc, #640]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b20      	cmp	r3, #32
 8004180:	d118      	bne.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004182:	4b9d      	ldr	r3, [pc, #628]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800418e:	4b9a      	ldr	r3, [pc, #616]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	0e1b      	lsrs	r3, r3, #24
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	e006      	b.n	80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800419a:	4b97      	ldr	r3, [pc, #604]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800419c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041a0:	041b      	lsls	r3, r3, #16
 80041a2:	0e1b      	lsrs	r3, r3, #24
 80041a4:	f003 030f 	and.w	r3, r3, #15
 80041a8:	4a95      	ldr	r2, [pc, #596]	@ (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80041aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80041b0:	f001 b832 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041b8:	f001 b82e 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041c0:	f001 b82a 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80041c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041c8:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80041cc:	430b      	orrs	r3, r1
 80041ce:	d17f      	bne.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80041d0:	4b89      	ldr	r3, [pc, #548]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80041d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80041d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041da:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80041dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d165      	bne.n	80042ae <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80041e2:	4b85      	ldr	r3, [pc, #532]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80041e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041e8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80041ec:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80041ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80041f4:	d034      	beq.n	8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 80041f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80041fc:	d853      	bhi.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80041fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004200:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004204:	d00b      	beq.n	800421e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8004206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004208:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800420c:	d84b      	bhi.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800420e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004210:	2b00      	cmp	r3, #0
 8004212:	d016      	beq.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8004214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004216:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800421a:	d009      	beq.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800421c:	e043      	b.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800421e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff fa16 	bl	8003654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800422c:	f000 bff4 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004230:	f107 0318 	add.w	r3, r7, #24
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fb67 	bl	8003908 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800423e:	f000 bfeb 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004242:	4b6d      	ldr	r3, [pc, #436]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800424a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800424e:	d103      	bne.n	8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8004250:	4b6a      	ldr	r3, [pc, #424]	@ (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004252:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004254:	f000 bfe0 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800425c:	f000 bfdc 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004260:	4b65      	ldr	r3, [pc, #404]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	2b20      	cmp	r3, #32
 800426a:	d118      	bne.n	800429e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800426c:	4b62      	ldr	r3, [pc, #392]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8004278:	4b5f      	ldr	r3, [pc, #380]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	0e1b      	lsrs	r3, r3, #24
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	e006      	b.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004284:	4b5c      	ldr	r3, [pc, #368]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004286:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	0e1b      	lsrs	r3, r3, #24
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	4a5b      	ldr	r2, [pc, #364]	@ (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004298:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800429a:	f000 bfbd 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80042a2:	f000 bfb9 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80042aa:	f000 bfb5 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80042ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042b4:	d108      	bne.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80042b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff f9ca 	bl	8003654 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80042c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80042c4:	f000 bfa8 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80042cc:	f000 bfa4 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80042d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042d4:	1e51      	subs	r1, r2, #1
 80042d6:	430b      	orrs	r3, r1
 80042d8:	d136      	bne.n	8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80042da:	4b47      	ldr	r3, [pc, #284]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80042dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80042e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d104      	bne.n	80042f6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80042ec:	f7fe fb44 	bl	8002978 <HAL_RCC_GetPCLK2Freq>
 80042f0:	6378      	str	r0, [r7, #52]	@ 0x34
 80042f2:	f000 bf91 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80042f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d104      	bne.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80042fc:	f7fe fa0c 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8004300:	6378      	str	r0, [r7, #52]	@ 0x34
 8004302:	f000 bf89 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004306:	4b3c      	ldr	r3, [pc, #240]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800430e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004312:	d106      	bne.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8004314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004316:	2b02      	cmp	r3, #2
 8004318:	d103      	bne.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800431a:	4b3a      	ldr	r3, [pc, #232]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800431c:	637b      	str	r3, [r7, #52]	@ 0x34
 800431e:	f000 bf7b 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004322:	4b35      	ldr	r3, [pc, #212]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b02      	cmp	r3, #2
 800432e:	d107      	bne.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004332:	2b03      	cmp	r3, #3
 8004334:	d104      	bne.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8004336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800433a:	637b      	str	r3, [r7, #52]	@ 0x34
 800433c:	f000 bf6c 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	637b      	str	r3, [r7, #52]	@ 0x34
 8004344:	f000 bf68 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8004348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800434c:	1e91      	subs	r1, r2, #2
 800434e:	430b      	orrs	r3, r1
 8004350:	d136      	bne.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004352:	4b29      	ldr	r3, [pc, #164]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004358:	f003 030c 	and.w	r3, r3, #12
 800435c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800435e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004360:	2b00      	cmp	r3, #0
 8004362:	d104      	bne.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004364:	f7fe faf4 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 8004368:	6378      	str	r0, [r7, #52]	@ 0x34
 800436a:	f000 bf55 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800436e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004370:	2b04      	cmp	r3, #4
 8004372:	d104      	bne.n	800437e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004374:	f7fe f9d0 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8004378:	6378      	str	r0, [r7, #52]	@ 0x34
 800437a:	f000 bf4d 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800437e:	4b1e      	ldr	r3, [pc, #120]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800438a:	d106      	bne.n	800439a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800438c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438e:	2b08      	cmp	r3, #8
 8004390:	d103      	bne.n	800439a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8004392:	4b1c      	ldr	r3, [pc, #112]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004394:	637b      	str	r3, [r7, #52]	@ 0x34
 8004396:	f000 bf3f 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800439a:	4b17      	ldr	r3, [pc, #92]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800439c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d107      	bne.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80043a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043aa:	2b0c      	cmp	r3, #12
 80043ac:	d104      	bne.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 80043ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80043b4:	f000 bf30 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80043bc:	f000 bf2c 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80043c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043c4:	1f11      	subs	r1, r2, #4
 80043c6:	430b      	orrs	r3, r1
 80043c8:	d13f      	bne.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80043ca:	4b0b      	ldr	r3, [pc, #44]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80043cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80043d4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80043d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d104      	bne.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80043dc:	f7fe fab8 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 80043e0:	6378      	str	r0, [r7, #52]	@ 0x34
 80043e2:	f000 bf19 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80043e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d10d      	bne.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80043ec:	f7fe f994 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 80043f0:	6378      	str	r0, [r7, #52]	@ 0x34
 80043f2:	f000 bf11 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80043f6:	bf00      	nop
 80043f8:	46020c00 	.word	0x46020c00
 80043fc:	02dc6c00 	.word	0x02dc6c00
 8004400:	08006e20 	.word	0x08006e20
 8004404:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004408:	4ba6      	ldr	r3, [pc, #664]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004410:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004414:	d106      	bne.n	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8004416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004418:	2b20      	cmp	r3, #32
 800441a:	d103      	bne.n	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800441c:	4ba2      	ldr	r3, [pc, #648]	@ (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800441e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004420:	f000 befa 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004424:	4b9f      	ldr	r3, [pc, #636]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004426:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b02      	cmp	r3, #2
 8004430:	d107      	bne.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8004432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004434:	2b30      	cmp	r3, #48	@ 0x30
 8004436:	d104      	bne.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8004438:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800443c:	637b      	str	r3, [r7, #52]	@ 0x34
 800443e:	f000 beeb 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	637b      	str	r3, [r7, #52]	@ 0x34
 8004446:	f000 bee7 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800444a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800444e:	f1a2 0108 	sub.w	r1, r2, #8
 8004452:	430b      	orrs	r3, r1
 8004454:	d136      	bne.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004456:	4b93      	ldr	r3, [pc, #588]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800445c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004460:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004464:	2b00      	cmp	r3, #0
 8004466:	d104      	bne.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004468:	f7fe fa72 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 800446c:	6378      	str	r0, [r7, #52]	@ 0x34
 800446e:	f000 bed3 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004474:	2b40      	cmp	r3, #64	@ 0x40
 8004476:	d104      	bne.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004478:	f7fe f94e 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 800447c:	6378      	str	r0, [r7, #52]	@ 0x34
 800447e:	f000 becb 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004482:	4b88      	ldr	r3, [pc, #544]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800448a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800448e:	d106      	bne.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8004490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004492:	2b80      	cmp	r3, #128	@ 0x80
 8004494:	d103      	bne.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8004496:	4b84      	ldr	r3, [pc, #528]	@ (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004498:	637b      	str	r3, [r7, #52]	@ 0x34
 800449a:	f000 bebd 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800449e:	4b81      	ldr	r3, [pc, #516]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80044a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d107      	bne.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80044ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80044b0:	d104      	bne.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 80044b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80044b8:	f000 beae 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	637b      	str	r3, [r7, #52]	@ 0x34
 80044c0:	f000 beaa 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80044c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044c8:	f1a2 0110 	sub.w	r1, r2, #16
 80044cc:	430b      	orrs	r3, r1
 80044ce:	d139      	bne.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80044d0:	4b74      	ldr	r3, [pc, #464]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80044d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044da:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80044dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d104      	bne.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80044e2:	f7fe fa35 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 80044e6:	6378      	str	r0, [r7, #52]	@ 0x34
 80044e8:	f000 be96 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80044ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044f2:	d104      	bne.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80044f4:	f7fe f910 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 80044f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80044fa:	f000 be8d 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80044fe:	4b69      	ldr	r3, [pc, #420]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800450a:	d107      	bne.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800450c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004512:	d103      	bne.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8004514:	4b64      	ldr	r3, [pc, #400]	@ (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004516:	637b      	str	r3, [r7, #52]	@ 0x34
 8004518:	f000 be7e 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800451c:	4b61      	ldr	r3, [pc, #388]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800451e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b02      	cmp	r3, #2
 8004528:	d108      	bne.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800452a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004530:	d104      	bne.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8004532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004536:	637b      	str	r3, [r7, #52]	@ 0x34
 8004538:	f000 be6e 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004540:	f000 be6a 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004544:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004548:	f1a2 0120 	sub.w	r1, r2, #32
 800454c:	430b      	orrs	r3, r1
 800454e:	d158      	bne.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004550:	4b54      	ldr	r3, [pc, #336]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004552:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800455c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455e:	2b00      	cmp	r3, #0
 8004560:	d104      	bne.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004562:	f7fe fa1d 	bl	80029a0 <HAL_RCC_GetPCLK3Freq>
 8004566:	6378      	str	r0, [r7, #52]	@ 0x34
 8004568:	f000 be56 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800456c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456e:	2b01      	cmp	r3, #1
 8004570:	d104      	bne.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004572:	f7fe f8d1 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8004576:	6378      	str	r0, [r7, #52]	@ 0x34
 8004578:	f000 be4e 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800457c:	4b49      	ldr	r3, [pc, #292]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004588:	d106      	bne.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800458a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458c:	2b02      	cmp	r3, #2
 800458e:	d103      	bne.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8004590:	4b45      	ldr	r3, [pc, #276]	@ (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004592:	637b      	str	r3, [r7, #52]	@ 0x34
 8004594:	f000 be40 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004598:	4b42      	ldr	r3, [pc, #264]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800459a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d107      	bne.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80045a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d104      	bne.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 80045ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80045b2:	f000 be31 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80045b6:	4b3b      	ldr	r3, [pc, #236]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d11b      	bne.n	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 80045c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d118      	bne.n	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80045c8:	4b36      	ldr	r3, [pc, #216]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80045d4:	4b33      	ldr	r3, [pc, #204]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	0e1b      	lsrs	r3, r3, #24
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	e006      	b.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 80045e0:	4b30      	ldr	r3, [pc, #192]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80045e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80045e6:	041b      	lsls	r3, r3, #16
 80045e8:	0e1b      	lsrs	r3, r3, #24
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	4a2f      	ldr	r2, [pc, #188]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80045f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80045f6:	f000 be0f 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80045fe:	f000 be0b 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004602:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004606:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800460a:	430b      	orrs	r3, r1
 800460c:	d172      	bne.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800460e:	4b25      	ldr	r3, [pc, #148]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004610:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004614:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004618:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800461a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004620:	d104      	bne.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004622:	f7fe f879 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8004626:	6378      	str	r0, [r7, #52]	@ 0x34
 8004628:	f000 bdf6 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800462c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004632:	d108      	bne.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004634:	f107 0318 	add.w	r3, r7, #24
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff f965 	bl	8003908 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	637b      	str	r3, [r7, #52]	@ 0x34
 8004642:	f000 bde9 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004648:	2b00      	cmp	r3, #0
 800464a:	d104      	bne.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800464c:	f7fe f966 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8004650:	6378      	str	r0, [r7, #52]	@ 0x34
 8004652:	f000 bde1 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004658:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800465c:	d128      	bne.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800465e:	4b11      	ldr	r3, [pc, #68]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b20      	cmp	r3, #32
 8004668:	d118      	bne.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800466a:	4b0e      	ldr	r3, [pc, #56]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004676:	4b0b      	ldr	r3, [pc, #44]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	0e1b      	lsrs	r3, r3, #24
 800467c:	f003 030f 	and.w	r3, r3, #15
 8004680:	e006      	b.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004682:	4b08      	ldr	r3, [pc, #32]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004684:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004688:	041b      	lsls	r3, r3, #16
 800468a:	0e1b      	lsrs	r3, r3, #24
 800468c:	f003 030f 	and.w	r3, r3, #15
 8004690:	4a06      	ldr	r2, [pc, #24]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004696:	637b      	str	r3, [r7, #52]	@ 0x34
 8004698:	f000 bdbe 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	637b      	str	r3, [r7, #52]	@ 0x34
 80046a0:	f000 bdba 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80046a4:	46020c00 	.word	0x46020c00
 80046a8:	00f42400 	.word	0x00f42400
 80046ac:	08006e20 	.word	0x08006e20
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80046b0:	4baf      	ldr	r3, [pc, #700]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046bc:	d107      	bne.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80046be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80046c4:	d103      	bne.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 80046c6:	4bab      	ldr	r3, [pc, #684]	@ (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80046c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80046ca:	f000 bda5 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80046ce:	4ba8      	ldr	r3, [pc, #672]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046da:	d107      	bne.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80046dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046e2:	d103      	bne.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 80046e4:	4ba3      	ldr	r3, [pc, #652]	@ (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80046e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80046e8:	f000 bd96 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80046f0:	f000 bd92 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80046f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046f8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80046fc:	430b      	orrs	r3, r1
 80046fe:	d158      	bne.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004700:	4b9b      	ldr	r3, [pc, #620]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004702:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800470c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470e:	2b04      	cmp	r3, #4
 8004710:	d84b      	bhi.n	80047aa <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8004712:	a201      	add	r2, pc, #4	@ (adr r2, 8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8004714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004718:	08004751 	.word	0x08004751
 800471c:	0800472d 	.word	0x0800472d
 8004720:	0800473f 	.word	0x0800473f
 8004724:	0800475b 	.word	0x0800475b
 8004728:	08004765 	.word	0x08004765
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800472c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004730:	4618      	mov	r0, r3
 8004732:	f7fe ff8f 	bl	8003654 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800473a:	f000 bd6d 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800473e:	f107 030c 	add.w	r3, r7, #12
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff fa3a 	bl	8003bbc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800474c:	f000 bd64 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004750:	f7fe f8e4 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8004754:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004756:	f000 bd5f 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800475a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800475e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004760:	f000 bd5a 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004764:	4b82      	ldr	r3, [pc, #520]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b20      	cmp	r3, #32
 800476e:	d118      	bne.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004770:	4b7f      	ldr	r3, [pc, #508]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800477c:	4b7c      	ldr	r3, [pc, #496]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	0e1b      	lsrs	r3, r3, #24
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	e006      	b.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8004788:	4b79      	ldr	r3, [pc, #484]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800478a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800478e:	041b      	lsls	r3, r3, #16
 8004790:	0e1b      	lsrs	r3, r3, #24
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	4a78      	ldr	r2, [pc, #480]	@ (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8004798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800479c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800479e:	f000 bd3b 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047a6:	f000 bd37 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047ae:	f000 bd33 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80047b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047b6:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80047ba:	430b      	orrs	r3, r1
 80047bc:	d167      	bne.n	800488e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80047be:	4b6c      	ldr	r3, [pc, #432]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80047c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80047c4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80047c8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80047ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047d0:	d036      	beq.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 80047d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047d8:	d855      	bhi.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80047da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047e0:	d029      	beq.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80047e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047e8:	d84d      	bhi.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80047ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047f0:	d013      	beq.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80047f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047f8:	d845      	bhi.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80047fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d015      	beq.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8004800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004806:	d13e      	bne.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800480c:	4618      	mov	r0, r3
 800480e:	f7fe ff21 	bl	8003654 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004816:	f000 bcff 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800481a:	f107 030c 	add.w	r3, r7, #12
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff f9cc 	bl	8003bbc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004828:	f000 bcf6 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800482c:	f7fe f876 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8004830:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004832:	f000 bcf1 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004836:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800483a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800483c:	f000 bcec 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004840:	4b4b      	ldr	r3, [pc, #300]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b20      	cmp	r3, #32
 800484a:	d118      	bne.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800484c:	4b48      	ldr	r3, [pc, #288]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8004858:	4b45      	ldr	r3, [pc, #276]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	0e1b      	lsrs	r3, r3, #24
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	e006      	b.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8004864:	4b42      	ldr	r3, [pc, #264]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004866:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800486a:	041b      	lsls	r3, r3, #16
 800486c:	0e1b      	lsrs	r3, r3, #24
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	4a41      	ldr	r2, [pc, #260]	@ (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8004874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004878:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800487a:	f000 bccd 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004882:	f000 bcc9 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800488a:	f000 bcc5 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800488e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004892:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8004896:	430b      	orrs	r3, r1
 8004898:	d14c      	bne.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800489a:	4b35      	ldr	r3, [pc, #212]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800489c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048a4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80048a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d104      	bne.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80048ac:	f7fe f850 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 80048b0:	6378      	str	r0, [r7, #52]	@ 0x34
 80048b2:	f000 bcb1 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80048b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048bc:	d104      	bne.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80048be:	f7fd ff2b 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 80048c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80048c4:	f000 bca8 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80048c8:	4b29      	ldr	r3, [pc, #164]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048d4:	d107      	bne.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80048d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048dc:	d103      	bne.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 80048de:	4b25      	ldr	r3, [pc, #148]	@ (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80048e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80048e2:	f000 bc99 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80048e6:	4b22      	ldr	r3, [pc, #136]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b20      	cmp	r3, #32
 80048f0:	d11c      	bne.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 80048f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048f8:	d118      	bne.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80048fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8004906:	4b1a      	ldr	r3, [pc, #104]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	0e1b      	lsrs	r3, r3, #24
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	e006      	b.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8004912:	4b17      	ldr	r3, [pc, #92]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004914:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004918:	041b      	lsls	r3, r3, #16
 800491a:	0e1b      	lsrs	r3, r3, #24
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	4a15      	ldr	r2, [pc, #84]	@ (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8004922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004926:	637b      	str	r3, [r7, #52]	@ 0x34
 8004928:	f000 bc76 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004930:	f000 bc72 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004934:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004938:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800493c:	430b      	orrs	r3, r1
 800493e:	d153      	bne.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004940:	4b0b      	ldr	r3, [pc, #44]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004946:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800494a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800494c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494e:	2b00      	cmp	r3, #0
 8004950:	d104      	bne.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004952:	f7fd fffd 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 8004956:	6378      	str	r0, [r7, #52]	@ 0x34
 8004958:	f000 bc5e 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800495c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004962:	d10b      	bne.n	800497c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004964:	f7fd fed8 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8004968:	6378      	str	r0, [r7, #52]	@ 0x34
 800496a:	f000 bc55 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800496e:	bf00      	nop
 8004970:	46020c00 	.word	0x46020c00
 8004974:	00f42400 	.word	0x00f42400
 8004978:	08006e20 	.word	0x08006e20
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800497c:	4ba1      	ldr	r3, [pc, #644]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004988:	d107      	bne.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 800498a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004990:	d103      	bne.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8004992:	4b9d      	ldr	r3, [pc, #628]	@ (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8004994:	637b      	str	r3, [r7, #52]	@ 0x34
 8004996:	f000 bc3f 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800499a:	4b9a      	ldr	r3, [pc, #616]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d11c      	bne.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 80049a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049ac:	d118      	bne.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80049ae:	4b95      	ldr	r3, [pc, #596]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d005      	beq.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 80049ba:	4b92      	ldr	r3, [pc, #584]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	0e1b      	lsrs	r3, r3, #24
 80049c0:	f003 030f 	and.w	r3, r3, #15
 80049c4:	e006      	b.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80049c6:	4b8f      	ldr	r3, [pc, #572]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80049c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049cc:	041b      	lsls	r3, r3, #16
 80049ce:	0e1b      	lsrs	r3, r3, #24
 80049d0:	f003 030f 	and.w	r3, r3, #15
 80049d4:	4a8d      	ldr	r2, [pc, #564]	@ (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80049d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049da:	637b      	str	r3, [r7, #52]	@ 0x34
 80049dc:	f000 bc1c 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049e4:	f000 bc18 	b.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80049e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049ec:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80049f0:	430b      	orrs	r3, r1
 80049f2:	d151      	bne.n	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80049f4:	4b83      	ldr	r3, [pc, #524]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80049f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80049fe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a02:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a04:	d024      	beq.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8004a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a08:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a0a:	d842      	bhi.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0e:	2b80      	cmp	r3, #128	@ 0x80
 8004a10:	d00d      	beq.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8004a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a14:	2b80      	cmp	r3, #128	@ 0x80
 8004a16:	d83c      	bhi.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8004a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a20:	2b40      	cmp	r3, #64	@ 0x40
 8004a22:	d011      	beq.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8004a24:	e035      	b.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8004a26:	f7fd ffbb 	bl	80029a0 <HAL_RCC_GetPCLK3Freq>
 8004a2a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004a2c:	e3f4      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a2e:	4b75      	ldr	r3, [pc, #468]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a3a:	d102      	bne.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8004a3c:	4b72      	ldr	r3, [pc, #456]	@ (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8004a3e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004a40:	e3ea      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a46:	e3e7      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004a48:	f7fd fe66 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8004a4c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004a4e:	e3e3      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004a50:	4b6c      	ldr	r3, [pc, #432]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	d117      	bne.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004a5c:	4b69      	ldr	r3, [pc, #420]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8004a68:	4b66      	ldr	r3, [pc, #408]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	0e1b      	lsrs	r3, r3, #24
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	e006      	b.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8004a74:	4b63      	ldr	r3, [pc, #396]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004a76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a7a:	041b      	lsls	r3, r3, #16
 8004a7c:	0e1b      	lsrs	r3, r3, #24
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	4a62      	ldr	r2, [pc, #392]	@ (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8004a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a88:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004a8a:	e3c5      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a90:	e3c2      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a96:	e3bf      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8004a98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a9c:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8004aa0:	430b      	orrs	r3, r1
 8004aa2:	d147      	bne.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004aa4:	4b57      	ldr	r3, [pc, #348]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004aaa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004aae:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d103      	bne.n	8004abe <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004ab6:	f7fd ff4b 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 8004aba:	6378      	str	r0, [r7, #52]	@ 0x34
 8004abc:	e3ac      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ac4:	d103      	bne.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004ac6:	f7fd fe27 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8004aca:	6378      	str	r0, [r7, #52]	@ 0x34
 8004acc:	e3a4      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004ace:	4b4d      	ldr	r3, [pc, #308]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ada:	d106      	bne.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8004adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ade:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ae2:	d102      	bne.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8004ae4:	4b48      	ldr	r3, [pc, #288]	@ (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8004ae6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ae8:	e396      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004aea:	4b46      	ldr	r3, [pc, #280]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b20      	cmp	r3, #32
 8004af4:	d11b      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8004af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004afc:	d117      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004afe:	4b41      	ldr	r3, [pc, #260]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8004b0a:	4b3e      	ldr	r3, [pc, #248]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	0e1b      	lsrs	r3, r3, #24
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	e006      	b.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8004b16:	4b3b      	ldr	r3, [pc, #236]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004b18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b1c:	041b      	lsls	r3, r3, #16
 8004b1e:	0e1b      	lsrs	r3, r3, #24
 8004b20:	f003 030f 	and.w	r3, r3, #15
 8004b24:	4a39      	ldr	r2, [pc, #228]	@ (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8004b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b2c:	e374      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b32:	e371      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8004b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b38:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	d16a      	bne.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8004b40:	4b30      	ldr	r3, [pc, #192]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004b42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b4a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d120      	bne.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004b52:	4b2c      	ldr	r3, [pc, #176]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b20      	cmp	r3, #32
 8004b5c:	d117      	bne.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b5e:	4b29      	ldr	r3, [pc, #164]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 8004b6a:	4b26      	ldr	r3, [pc, #152]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	0e1b      	lsrs	r3, r3, #24
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	e006      	b.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8004b76:	4b23      	ldr	r3, [pc, #140]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004b78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b7c:	041b      	lsls	r3, r3, #16
 8004b7e:	0e1b      	lsrs	r3, r3, #24
 8004b80:	f003 030f 	and.w	r3, r3, #15
 8004b84:	4a21      	ldr	r2, [pc, #132]	@ (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8004b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b8c:	e344      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b92:	e341      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004b94:	4b1b      	ldr	r3, [pc, #108]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ba2:	d112      	bne.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004baa:	d10e      	bne.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004bac:	4b15      	ldr	r3, [pc, #84]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004bae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bba:	d102      	bne.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8004bbc:	23fa      	movs	r3, #250	@ 0xfa
 8004bbe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004bc0:	e32a      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8004bc2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004bc6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004bc8:	e326      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8004bca:	4b0e      	ldr	r3, [pc, #56]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bd6:	d106      	bne.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bde:	d102      	bne.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8004be0:	4b09      	ldr	r3, [pc, #36]	@ (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8004be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004be4:	e318      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8004be6:	4b07      	ldr	r3, [pc, #28]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004be8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d10d      	bne.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bfa:	d109      	bne.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8004bfc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c02:	e309      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8004c04:	46020c00 	.word	0x46020c00
 8004c08:	00f42400 	.word	0x00f42400
 8004c0c:	08006e20 	.word	0x08006e20
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c14:	e300      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8004c16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c1a:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8004c1e:	430b      	orrs	r3, r1
 8004c20:	d164      	bne.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004c22:	4ba2      	ldr	r3, [pc, #648]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c2c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d120      	bne.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004c34:	4b9d      	ldr	r3, [pc, #628]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0320 	and.w	r3, r3, #32
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d117      	bne.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c40:	4b9a      	ldr	r3, [pc, #616]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8004c4c:	4b97      	ldr	r3, [pc, #604]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	0e1b      	lsrs	r3, r3, #24
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	e006      	b.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8004c58:	4b94      	ldr	r3, [pc, #592]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004c5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c5e:	041b      	lsls	r3, r3, #16
 8004c60:	0e1b      	lsrs	r3, r3, #24
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	4a92      	ldr	r2, [pc, #584]	@ (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8004c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c6e:	e2d3      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c74:	e2d0      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004c76:	4b8d      	ldr	r3, [pc, #564]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004c78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c84:	d112      	bne.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8004c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c8c:	d10e      	bne.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c8e:	4b87      	ldr	r3, [pc, #540]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004c90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c9c:	d102      	bne.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 8004c9e:	23fa      	movs	r3, #250	@ 0xfa
 8004ca0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004ca2:	e2b9      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8004ca4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004ca8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004caa:	e2b5      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004cac:	4b7f      	ldr	r3, [pc, #508]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb8:	d106      	bne.n	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8004cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cc0:	d102      	bne.n	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8004cc2:	4b7c      	ldr	r3, [pc, #496]	@ (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8004cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cc6:	e2a7      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004cc8:	4b78      	ldr	r3, [pc, #480]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004cca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d107      	bne.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cdc:	d103      	bne.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8004cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ce4:	e298      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cea:	e295      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8004cec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cf0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	d147      	bne.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004cf8:	4b6c      	ldr	r3, [pc, #432]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cfe:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004d02:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8004d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d103      	bne.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004d0a:	f7fd fe21 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 8004d0e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004d10:	e282      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004d12:	4b66      	ldr	r3, [pc, #408]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004d14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d20:	d112      	bne.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8004d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d28:	d10e      	bne.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d2a:	4b60      	ldr	r3, [pc, #384]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004d2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d38:	d102      	bne.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8004d3a:	23fa      	movs	r3, #250	@ 0xfa
 8004d3c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d3e:	e26b      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8004d40:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004d44:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d46:	e267      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8004d48:	4b58      	ldr	r3, [pc, #352]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d54:	d106      	bne.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8004d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d58:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d5c:	d102      	bne.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8004d5e:	4b55      	ldr	r3, [pc, #340]	@ (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8004d60:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d62:	e259      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8004d64:	4b51      	ldr	r3, [pc, #324]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004d66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d107      	bne.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8004d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d74:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004d78:	d103      	bne.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8004d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d80:	e24a      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d86:	e247      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8004d88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d8c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8004d90:	430b      	orrs	r3, r1
 8004d92:	d12d      	bne.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8004d94:	4b45      	ldr	r3, [pc, #276]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d9a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004d9e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8004da0:	4b42      	ldr	r3, [pc, #264]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dac:	d105      	bne.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8004dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d102      	bne.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8004db4:	4b3f      	ldr	r3, [pc, #252]	@ (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8004db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db8:	e22e      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8004dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004dc0:	d107      	bne.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fe fc44 	bl	8003654 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dd0:	e222      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dd8:	d107      	bne.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dda:	f107 0318 	add.w	r3, r7, #24
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe fd92 	bl	8003908 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004de8:	e216      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dee:	e213      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8004df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004df4:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	d15d      	bne.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e02:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004e06:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8004e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e0e:	d028      	beq.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8004e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e12:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e16:	d845      	bhi.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8004e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e1e:	d013      	beq.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8004e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e26:	d83d      	bhi.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8004e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d004      	beq.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e34:	d004      	beq.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8004e36:	e035      	b.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8004e38:	f7fd fd9e 	bl	8002978 <HAL_RCC_GetPCLK2Freq>
 8004e3c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004e3e:	e1eb      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004e40:	f7fd fc6a 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8004e44:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004e46:	e1e7      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e48:	4b18      	ldr	r3, [pc, #96]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e54:	d102      	bne.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8004e56:	4b17      	ldr	r3, [pc, #92]	@ (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8004e58:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e5a:	e1dd      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e60:	e1da      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004e62:	4b12      	ldr	r3, [pc, #72]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	2b20      	cmp	r3, #32
 8004e6c:	d117      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8004e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	0e1b      	lsrs	r3, r3, #24
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	e006      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8004e86:	4b09      	ldr	r3, [pc, #36]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004e88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e8c:	041b      	lsls	r3, r3, #16
 8004e8e:	0e1b      	lsrs	r3, r3, #24
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	4a06      	ldr	r2, [pc, #24]	@ (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8004e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e9a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e9c:	e1bc      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ea2:	e1b9      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ea8:	e1b6      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8004eaa:	bf00      	nop
 8004eac:	46020c00 	.word	0x46020c00
 8004eb0:	08006e20 	.word	0x08006e20
 8004eb4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8004eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ebc:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	d156      	bne.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004ec4:	4ba5      	ldr	r3, [pc, #660]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004eca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ece:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ed6:	d028      	beq.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eda:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ede:	d845      	bhi.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ee6:	d013      	beq.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004eee:	d83d      	bhi.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d004      	beq.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004efc:	d004      	beq.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8004efe:	e035      	b.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8004f00:	f7fd fd26 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 8004f04:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004f06:	e187      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004f08:	f7fd fc06 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8004f0c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004f0e:	e183      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f10:	4b92      	ldr	r3, [pc, #584]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f1c:	d102      	bne.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8004f1e:	4b90      	ldr	r3, [pc, #576]	@ (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8004f20:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f22:	e179      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f28:	e176      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004f2a:	4b8c      	ldr	r3, [pc, #560]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0320 	and.w	r3, r3, #32
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d117      	bne.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f36:	4b89      	ldr	r3, [pc, #548]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8004f42:	4b86      	ldr	r3, [pc, #536]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	0e1b      	lsrs	r3, r3, #24
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	e006      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8004f4e:	4b83      	ldr	r3, [pc, #524]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004f50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f54:	041b      	lsls	r3, r3, #16
 8004f56:	0e1b      	lsrs	r3, r3, #24
 8004f58:	f003 030f 	and.w	r3, r3, #15
 8004f5c:	4a81      	ldr	r2, [pc, #516]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8004f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f62:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f64:	e158      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f6a:	e155      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f70:	e152      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8004f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f76:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8004f7a:	430b      	orrs	r3, r1
 8004f7c:	d177      	bne.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004f7e:	4b77      	ldr	r3, [pc, #476]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004f80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f84:	f003 0318 	and.w	r3, r3, #24
 8004f88:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8c:	2b18      	cmp	r3, #24
 8004f8e:	d86b      	bhi.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8004f90:	a201      	add	r2, pc, #4	@ (adr r2, 8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	08004ffd 	.word	0x08004ffd
 8004f9c:	08005069 	.word	0x08005069
 8004fa0:	08005069 	.word	0x08005069
 8004fa4:	08005069 	.word	0x08005069
 8004fa8:	08005069 	.word	0x08005069
 8004fac:	08005069 	.word	0x08005069
 8004fb0:	08005069 	.word	0x08005069
 8004fb4:	08005069 	.word	0x08005069
 8004fb8:	08005005 	.word	0x08005005
 8004fbc:	08005069 	.word	0x08005069
 8004fc0:	08005069 	.word	0x08005069
 8004fc4:	08005069 	.word	0x08005069
 8004fc8:	08005069 	.word	0x08005069
 8004fcc:	08005069 	.word	0x08005069
 8004fd0:	08005069 	.word	0x08005069
 8004fd4:	08005069 	.word	0x08005069
 8004fd8:	0800500d 	.word	0x0800500d
 8004fdc:	08005069 	.word	0x08005069
 8004fe0:	08005069 	.word	0x08005069
 8004fe4:	08005069 	.word	0x08005069
 8004fe8:	08005069 	.word	0x08005069
 8004fec:	08005069 	.word	0x08005069
 8004ff0:	08005069 	.word	0x08005069
 8004ff4:	08005069 	.word	0x08005069
 8004ff8:	08005027 	.word	0x08005027
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8004ffc:	f7fd fcd0 	bl	80029a0 <HAL_RCC_GetPCLK3Freq>
 8005000:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005002:	e109      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005004:	f7fd fb88 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8005008:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800500a:	e105      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800500c:	4b53      	ldr	r3, [pc, #332]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005018:	d102      	bne.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 800501a:	4b51      	ldr	r3, [pc, #324]	@ (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800501c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800501e:	e0fb      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005024:	e0f8      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005026:	4b4d      	ldr	r3, [pc, #308]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b20      	cmp	r3, #32
 8005030:	d117      	bne.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005032:	4b4a      	ldr	r3, [pc, #296]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d005      	beq.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 800503e:	4b47      	ldr	r3, [pc, #284]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	0e1b      	lsrs	r3, r3, #24
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	e006      	b.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 800504a:	4b44      	ldr	r3, [pc, #272]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800504c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005050:	041b      	lsls	r3, r3, #16
 8005052:	0e1b      	lsrs	r3, r3, #24
 8005054:	f003 030f 	and.w	r3, r3, #15
 8005058:	4a42      	ldr	r2, [pc, #264]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800505a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800505e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005060:	e0da      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005066:	e0d7      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800506c:	e0d4      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800506e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005072:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8005076:	430b      	orrs	r3, r1
 8005078:	d155      	bne.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800507a:	4b38      	ldr	r3, [pc, #224]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800507c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005080:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005084:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005088:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800508c:	d013      	beq.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 800508e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005090:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005094:	d844      	bhi.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800509c:	d013      	beq.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 800509e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050a4:	d83c      	bhi.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 80050a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d014      	beq.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80050ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050b2:	d014      	beq.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 80050b4:	e034      	b.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050b6:	f107 0318 	add.w	r3, r7, #24
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7fe fc24 	bl	8003908 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050c4:	e0a8      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fe fac2 	bl	8003654 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80050d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050d4:	e0a0      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80050d6:	f7fd fb1f 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 80050da:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80050dc:	e09c      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80050de:	4b1f      	ldr	r3, [pc, #124]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d117      	bne.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80050ea:	4b1c      	ldr	r3, [pc, #112]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d005      	beq.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 80050f6:	4b19      	ldr	r3, [pc, #100]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	0e1b      	lsrs	r3, r3, #24
 80050fc:	f003 030f 	and.w	r3, r3, #15
 8005100:	e006      	b.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8005102:	4b16      	ldr	r3, [pc, #88]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005104:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005108:	041b      	lsls	r3, r3, #16
 800510a:	0e1b      	lsrs	r3, r3, #24
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	4a14      	ldr	r2, [pc, #80]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8005112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005116:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005118:	e07e      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800511e:	e07b      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005124:	e078      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800512a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800512e:	430b      	orrs	r3, r1
 8005130:	d138      	bne.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005132:	4b0a      	ldr	r3, [pc, #40]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005138:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800513c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800513e:	4b07      	ldr	r3, [pc, #28]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b02      	cmp	r3, #2
 800514a:	d10d      	bne.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800514c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10a      	bne.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8005152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005156:	637b      	str	r3, [r7, #52]	@ 0x34
 8005158:	e05e      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800515a:	bf00      	nop
 800515c:	46020c00 	.word	0x46020c00
 8005160:	00f42400 	.word	0x00f42400
 8005164:	08006e20 	.word	0x08006e20
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005168:	4b2e      	ldr	r3, [pc, #184]	@ (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800516a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800516e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005172:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005176:	d112      	bne.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8005178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800517e:	d10e      	bne.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005180:	4b28      	ldr	r3, [pc, #160]	@ (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005182:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800518a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800518e:	d102      	bne.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8005190:	23fa      	movs	r3, #250	@ 0xfa
 8005192:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005194:	e040      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8005196:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800519a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800519c:	e03c      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80051a2:	e039      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80051a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051a8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80051ac:	430b      	orrs	r3, r1
 80051ae:	d131      	bne.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80051b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80051b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051b6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80051ba:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80051bc:	4b19      	ldr	r3, [pc, #100]	@ (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051c8:	d105      	bne.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 80051ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d102      	bne.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 80051d0:	4b15      	ldr	r3, [pc, #84]	@ (8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 80051d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80051d4:	e020      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80051d6:	4b13      	ldr	r3, [pc, #76]	@ (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051e2:	d106      	bne.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 80051e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ea:	d102      	bne.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 80051ec:	4b0f      	ldr	r3, [pc, #60]	@ (800522c <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 80051ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80051f0:	e012      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80051f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051fe:	d106      	bne.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8005200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005206:	d102      	bne.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8005208:	4b09      	ldr	r3, [pc, #36]	@ (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 800520a:	637b      	str	r3, [r7, #52]	@ 0x34
 800520c:	e004      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	637b      	str	r3, [r7, #52]	@ 0x34
 8005212:	e001      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005214:	2300      	movs	r3, #0
 8005216:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8005218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800521a:	4618      	mov	r0, r3
 800521c:	3738      	adds	r7, #56	@ 0x38
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	46020c00 	.word	0x46020c00
 8005228:	02dc6c00 	.word	0x02dc6c00
 800522c:	016e3600 	.word	0x016e3600
 8005230:	00f42400 	.word	0x00f42400

08005234 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800523c:	4b47      	ldr	r3, [pc, #284]	@ (800535c <RCCEx_PLL2_Config+0x128>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a46      	ldr	r2, [pc, #280]	@ (800535c <RCCEx_PLL2_Config+0x128>)
 8005242:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005246:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005248:	f7fb fda8 	bl	8000d9c <HAL_GetTick>
 800524c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800524e:	e008      	b.n	8005262 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005250:	f7fb fda4 	bl	8000d9c <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e077      	b.n	8005352 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005262:	4b3e      	ldr	r3, [pc, #248]	@ (800535c <RCCEx_PLL2_Config+0x128>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800526e:	4b3b      	ldr	r3, [pc, #236]	@ (800535c <RCCEx_PLL2_Config+0x128>)
 8005270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005272:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005276:	f023 0303 	bic.w	r3, r3, #3
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6811      	ldr	r1, [r2, #0]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6852      	ldr	r2, [r2, #4]
 8005282:	3a01      	subs	r2, #1
 8005284:	0212      	lsls	r2, r2, #8
 8005286:	430a      	orrs	r2, r1
 8005288:	4934      	ldr	r1, [pc, #208]	@ (800535c <RCCEx_PLL2_Config+0x128>)
 800528a:	4313      	orrs	r3, r2
 800528c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800528e:	4b33      	ldr	r3, [pc, #204]	@ (800535c <RCCEx_PLL2_Config+0x128>)
 8005290:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005292:	4b33      	ldr	r3, [pc, #204]	@ (8005360 <RCCEx_PLL2_Config+0x12c>)
 8005294:	4013      	ands	r3, r2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6892      	ldr	r2, [r2, #8]
 800529a:	3a01      	subs	r2, #1
 800529c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	68d2      	ldr	r2, [r2, #12]
 80052a4:	3a01      	subs	r2, #1
 80052a6:	0252      	lsls	r2, r2, #9
 80052a8:	b292      	uxth	r2, r2
 80052aa:	4311      	orrs	r1, r2
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6912      	ldr	r2, [r2, #16]
 80052b0:	3a01      	subs	r2, #1
 80052b2:	0412      	lsls	r2, r2, #16
 80052b4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80052b8:	4311      	orrs	r1, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6952      	ldr	r2, [r2, #20]
 80052be:	3a01      	subs	r2, #1
 80052c0:	0612      	lsls	r2, r2, #24
 80052c2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80052c6:	430a      	orrs	r2, r1
 80052c8:	4924      	ldr	r1, [pc, #144]	@ (800535c <RCCEx_PLL2_Config+0x128>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80052ce:	4b23      	ldr	r3, [pc, #140]	@ (800535c <RCCEx_PLL2_Config+0x128>)
 80052d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d2:	f023 020c 	bic.w	r2, r3, #12
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	4920      	ldr	r1, [pc, #128]	@ (800535c <RCCEx_PLL2_Config+0x128>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80052e0:	4b1e      	ldr	r3, [pc, #120]	@ (800535c <RCCEx_PLL2_Config+0x128>)
 80052e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	491c      	ldr	r1, [pc, #112]	@ (800535c <RCCEx_PLL2_Config+0x128>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80052ee:	4b1b      	ldr	r3, [pc, #108]	@ (800535c <RCCEx_PLL2_Config+0x128>)
 80052f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f2:	4a1a      	ldr	r2, [pc, #104]	@ (800535c <RCCEx_PLL2_Config+0x128>)
 80052f4:	f023 0310 	bic.w	r3, r3, #16
 80052f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80052fa:	4b18      	ldr	r3, [pc, #96]	@ (800535c <RCCEx_PLL2_Config+0x128>)
 80052fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005302:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	69d2      	ldr	r2, [r2, #28]
 800530a:	00d2      	lsls	r2, r2, #3
 800530c:	4913      	ldr	r1, [pc, #76]	@ (800535c <RCCEx_PLL2_Config+0x128>)
 800530e:	4313      	orrs	r3, r2
 8005310:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005312:	4b12      	ldr	r3, [pc, #72]	@ (800535c <RCCEx_PLL2_Config+0x128>)
 8005314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005316:	4a11      	ldr	r2, [pc, #68]	@ (800535c <RCCEx_PLL2_Config+0x128>)
 8005318:	f043 0310 	orr.w	r3, r3, #16
 800531c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800531e:	4b0f      	ldr	r3, [pc, #60]	@ (800535c <RCCEx_PLL2_Config+0x128>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a0e      	ldr	r2, [pc, #56]	@ (800535c <RCCEx_PLL2_Config+0x128>)
 8005324:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005328:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800532a:	f7fb fd37 	bl	8000d9c <HAL_GetTick>
 800532e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005330:	e008      	b.n	8005344 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005332:	f7fb fd33 	bl	8000d9c <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e006      	b.n	8005352 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005344:	4b05      	ldr	r3, [pc, #20]	@ (800535c <RCCEx_PLL2_Config+0x128>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0f0      	beq.n	8005332 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005350:	2300      	movs	r3, #0

}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	46020c00 	.word	0x46020c00
 8005360:	80800000 	.word	0x80800000

08005364 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800536c:	4b47      	ldr	r3, [pc, #284]	@ (800548c <RCCEx_PLL3_Config+0x128>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a46      	ldr	r2, [pc, #280]	@ (800548c <RCCEx_PLL3_Config+0x128>)
 8005372:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005376:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005378:	f7fb fd10 	bl	8000d9c <HAL_GetTick>
 800537c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800537e:	e008      	b.n	8005392 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005380:	f7fb fd0c 	bl	8000d9c <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e077      	b.n	8005482 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005392:	4b3e      	ldr	r3, [pc, #248]	@ (800548c <RCCEx_PLL3_Config+0x128>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1f0      	bne.n	8005380 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800539e:	4b3b      	ldr	r3, [pc, #236]	@ (800548c <RCCEx_PLL3_Config+0x128>)
 80053a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80053a6:	f023 0303 	bic.w	r3, r3, #3
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6811      	ldr	r1, [r2, #0]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	6852      	ldr	r2, [r2, #4]
 80053b2:	3a01      	subs	r2, #1
 80053b4:	0212      	lsls	r2, r2, #8
 80053b6:	430a      	orrs	r2, r1
 80053b8:	4934      	ldr	r1, [pc, #208]	@ (800548c <RCCEx_PLL3_Config+0x128>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	630b      	str	r3, [r1, #48]	@ 0x30
 80053be:	4b33      	ldr	r3, [pc, #204]	@ (800548c <RCCEx_PLL3_Config+0x128>)
 80053c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053c2:	4b33      	ldr	r3, [pc, #204]	@ (8005490 <RCCEx_PLL3_Config+0x12c>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6892      	ldr	r2, [r2, #8]
 80053ca:	3a01      	subs	r2, #1
 80053cc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	68d2      	ldr	r2, [r2, #12]
 80053d4:	3a01      	subs	r2, #1
 80053d6:	0252      	lsls	r2, r2, #9
 80053d8:	b292      	uxth	r2, r2
 80053da:	4311      	orrs	r1, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6912      	ldr	r2, [r2, #16]
 80053e0:	3a01      	subs	r2, #1
 80053e2:	0412      	lsls	r2, r2, #16
 80053e4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80053e8:	4311      	orrs	r1, r2
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6952      	ldr	r2, [r2, #20]
 80053ee:	3a01      	subs	r2, #1
 80053f0:	0612      	lsls	r2, r2, #24
 80053f2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80053f6:	430a      	orrs	r2, r1
 80053f8:	4924      	ldr	r1, [pc, #144]	@ (800548c <RCCEx_PLL3_Config+0x128>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80053fe:	4b23      	ldr	r3, [pc, #140]	@ (800548c <RCCEx_PLL3_Config+0x128>)
 8005400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005402:	f023 020c 	bic.w	r2, r3, #12
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	4920      	ldr	r1, [pc, #128]	@ (800548c <RCCEx_PLL3_Config+0x128>)
 800540c:	4313      	orrs	r3, r2
 800540e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005410:	4b1e      	ldr	r3, [pc, #120]	@ (800548c <RCCEx_PLL3_Config+0x128>)
 8005412:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	491c      	ldr	r1, [pc, #112]	@ (800548c <RCCEx_PLL3_Config+0x128>)
 800541a:	4313      	orrs	r3, r2
 800541c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800541e:	4b1b      	ldr	r3, [pc, #108]	@ (800548c <RCCEx_PLL3_Config+0x128>)
 8005420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005422:	4a1a      	ldr	r2, [pc, #104]	@ (800548c <RCCEx_PLL3_Config+0x128>)
 8005424:	f023 0310 	bic.w	r3, r3, #16
 8005428:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800542a:	4b18      	ldr	r3, [pc, #96]	@ (800548c <RCCEx_PLL3_Config+0x128>)
 800542c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800542e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005432:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	69d2      	ldr	r2, [r2, #28]
 800543a:	00d2      	lsls	r2, r2, #3
 800543c:	4913      	ldr	r1, [pc, #76]	@ (800548c <RCCEx_PLL3_Config+0x128>)
 800543e:	4313      	orrs	r3, r2
 8005440:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005442:	4b12      	ldr	r3, [pc, #72]	@ (800548c <RCCEx_PLL3_Config+0x128>)
 8005444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005446:	4a11      	ldr	r2, [pc, #68]	@ (800548c <RCCEx_PLL3_Config+0x128>)
 8005448:	f043 0310 	orr.w	r3, r3, #16
 800544c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800544e:	4b0f      	ldr	r3, [pc, #60]	@ (800548c <RCCEx_PLL3_Config+0x128>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a0e      	ldr	r2, [pc, #56]	@ (800548c <RCCEx_PLL3_Config+0x128>)
 8005454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005458:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800545a:	f7fb fc9f 	bl	8000d9c <HAL_GetTick>
 800545e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005460:	e008      	b.n	8005474 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005462:	f7fb fc9b 	bl	8000d9c <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d901      	bls.n	8005474 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e006      	b.n	8005482 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005474:	4b05      	ldr	r3, [pc, #20]	@ (800548c <RCCEx_PLL3_Config+0x128>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d0f0      	beq.n	8005462 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	46020c00 	.word	0x46020c00
 8005490:	80800000 	.word	0x80800000

08005494 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e0fb      	b.n	800569e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a7f      	ldr	r2, [pc, #508]	@ (80056a8 <HAL_SPI_Init+0x214>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d004      	beq.n	80054ba <HAL_SPI_Init+0x26>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a7d      	ldr	r2, [pc, #500]	@ (80056ac <HAL_SPI_Init+0x218>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	e000      	b.n	80054bc <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80054ba:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a78      	ldr	r2, [pc, #480]	@ (80056a8 <HAL_SPI_Init+0x214>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d004      	beq.n	80054d6 <HAL_SPI_Init+0x42>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a76      	ldr	r2, [pc, #472]	@ (80056ac <HAL_SPI_Init+0x218>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d105      	bne.n	80054e2 <HAL_SPI_Init+0x4e>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	2b0f      	cmp	r3, #15
 80054dc:	d901      	bls.n	80054e2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e0dd      	b.n	800569e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fd6c 	bl	8005fc0 <SPI_GetPacketSize>
 80054e8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a6e      	ldr	r2, [pc, #440]	@ (80056a8 <HAL_SPI_Init+0x214>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d004      	beq.n	80054fe <HAL_SPI_Init+0x6a>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a6c      	ldr	r2, [pc, #432]	@ (80056ac <HAL_SPI_Init+0x218>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d102      	bne.n	8005504 <HAL_SPI_Init+0x70>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b08      	cmp	r3, #8
 8005502:	d816      	bhi.n	8005532 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005508:	4a69      	ldr	r2, [pc, #420]	@ (80056b0 <HAL_SPI_Init+0x21c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00e      	beq.n	800552c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a68      	ldr	r2, [pc, #416]	@ (80056b4 <HAL_SPI_Init+0x220>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d009      	beq.n	800552c <HAL_SPI_Init+0x98>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a66      	ldr	r2, [pc, #408]	@ (80056b8 <HAL_SPI_Init+0x224>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d004      	beq.n	800552c <HAL_SPI_Init+0x98>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a65      	ldr	r2, [pc, #404]	@ (80056bc <HAL_SPI_Init+0x228>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d104      	bne.n	8005536 <HAL_SPI_Init+0xa2>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b10      	cmp	r3, #16
 8005530:	d901      	bls.n	8005536 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e0b3      	b.n	800569e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fb fa08 	bl	8000960 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0201 	bic.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005572:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800557c:	d119      	bne.n	80055b2 <HAL_SPI_Init+0x11e>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005586:	d103      	bne.n	8005590 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800558c:	2b00      	cmp	r3, #0
 800558e:	d008      	beq.n	80055a2 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10c      	bne.n	80055b2 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800559c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055a0:	d107      	bne.n	80055b2 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80055b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00f      	beq.n	80055de <HAL_SPI_Init+0x14a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	2b06      	cmp	r3, #6
 80055c4:	d90b      	bls.n	80055de <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	e007      	b.n	80055ee <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69da      	ldr	r2, [r3, #28]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f6:	431a      	orrs	r2, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005600:	ea42 0103 	orr.w	r1, r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005618:	431a      	orrs	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	431a      	orrs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	431a      	orrs	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	431a      	orrs	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800565a:	ea42 0103 	orr.w	r1, r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	46002000 	.word	0x46002000
 80056ac:	56002000 	.word	0x56002000
 80056b0:	40013000 	.word	0x40013000
 80056b4:	50013000 	.word	0x50013000
 80056b8:	40003800 	.word	0x40003800
 80056bc:	50003800 	.word	0x50003800

080056c0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af02      	add	r7, sp, #8
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	4613      	mov	r3, r2
 80056ce:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3320      	adds	r3, #32
 80056d6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056d8:	f7fb fb60 	bl	8000d9c <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d001      	beq.n	80056ee <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80056ea:	2302      	movs	r3, #2
 80056ec:	e1f3      	b.n	8005ad6 <HAL_SPI_Transmit+0x416>
  }

  if ((pData == NULL) || (Size == 0UL))
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <HAL_SPI_Transmit+0x3a>
 80056f4:	88fb      	ldrh	r3, [r7, #6]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e1eb      	b.n	8005ad6 <HAL_SPI_Transmit+0x416>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_SPI_Transmit+0x4c>
 8005708:	2302      	movs	r3, #2
 800570a:	e1e4      	b.n	8005ad6 <HAL_SPI_Transmit+0x416>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2203      	movs	r2, #3
 8005718:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	88fa      	ldrh	r2, [r7, #6]
 800572e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	88fa      	ldrh	r2, [r7, #6]
 8005736:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005764:	d108      	bne.n	8005778 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	e009      	b.n	800578c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800578a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	0c1b      	lsrs	r3, r3, #16
 8005794:	041b      	lsls	r3, r3, #16
 8005796:	88f9      	ldrh	r1, [r7, #6]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	430b      	orrs	r3, r1
 800579e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10c      	bne.n	80057d8 <HAL_SPI_Transmit+0x118>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057c6:	d107      	bne.n	80057d8 <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	2b0f      	cmp	r3, #15
 80057de:	d95b      	bls.n	8005898 <HAL_SPI_Transmit+0x1d8>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a8f      	ldr	r2, [pc, #572]	@ (8005a24 <HAL_SPI_Transmit+0x364>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d04f      	beq.n	800588a <HAL_SPI_Transmit+0x1ca>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a8e      	ldr	r2, [pc, #568]	@ (8005a28 <HAL_SPI_Transmit+0x368>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d04a      	beq.n	800588a <HAL_SPI_Transmit+0x1ca>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a8c      	ldr	r2, [pc, #560]	@ (8005a2c <HAL_SPI_Transmit+0x36c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d045      	beq.n	800588a <HAL_SPI_Transmit+0x1ca>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a8b      	ldr	r2, [pc, #556]	@ (8005a30 <HAL_SPI_Transmit+0x370>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d147      	bne.n	8005898 <HAL_SPI_Transmit+0x1d8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005808:	e03f      	b.n	800588a <HAL_SPI_Transmit+0x1ca>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b02      	cmp	r3, #2
 8005816:	d114      	bne.n	8005842 <HAL_SPI_Transmit+0x182>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6812      	ldr	r2, [r2, #0]
 8005822:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005828:	1d1a      	adds	r2, r3, #4
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005834:	b29b      	uxth	r3, r3
 8005836:	3b01      	subs	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005840:	e023      	b.n	800588a <HAL_SPI_Transmit+0x1ca>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005842:	f7fb faab 	bl	8000d9c <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d803      	bhi.n	800585a <HAL_SPI_Transmit+0x19a>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005858:	d102      	bne.n	8005860 <HAL_SPI_Transmit+0x1a0>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d114      	bne.n	800588a <HAL_SPI_Transmit+0x1ca>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 fadf 	bl	8005e24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800586c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e125      	b.n	8005ad6 <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1b9      	bne.n	800580a <HAL_SPI_Transmit+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005896:	e0f8      	b.n	8005a8a <HAL_SPI_Transmit+0x3ca>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	2b07      	cmp	r3, #7
 800589e:	f240 80ed 	bls.w	8005a7c <HAL_SPI_Transmit+0x3bc>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80058a2:	e05d      	b.n	8005960 <HAL_SPI_Transmit+0x2a0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d132      	bne.n	8005918 <HAL_SPI_Transmit+0x258>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d918      	bls.n	80058f0 <HAL_SPI_Transmit+0x230>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d014      	beq.n	80058f0 <HAL_SPI_Transmit+0x230>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6812      	ldr	r2, [r2, #0]
 80058d0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058d6:	1d1a      	adds	r2, r3, #4
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3b02      	subs	r3, #2
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80058ee:	e037      	b.n	8005960 <HAL_SPI_Transmit+0x2a0>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058f4:	881a      	ldrh	r2, [r3, #0]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058fe:	1c9a      	adds	r2, r3, #2
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800590a:	b29b      	uxth	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005916:	e023      	b.n	8005960 <HAL_SPI_Transmit+0x2a0>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005918:	f7fb fa40 	bl	8000d9c <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d803      	bhi.n	8005930 <HAL_SPI_Transmit+0x270>
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800592e:	d102      	bne.n	8005936 <HAL_SPI_Transmit+0x276>
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d114      	bne.n	8005960 <HAL_SPI_Transmit+0x2a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 fa74 	bl	8005e24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005942:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e0ba      	b.n	8005ad6 <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005966:	b29b      	uxth	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d19b      	bne.n	80058a4 <HAL_SPI_Transmit+0x1e4>
 800596c:	e08d      	b.n	8005a8a <HAL_SPI_Transmit+0x3ca>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b02      	cmp	r3, #2
 800597a:	d15b      	bne.n	8005a34 <HAL_SPI_Transmit+0x374>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005982:	b29b      	uxth	r3, r3
 8005984:	2b03      	cmp	r3, #3
 8005986:	d918      	bls.n	80059ba <HAL_SPI_Transmit+0x2fa>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800598c:	2b40      	cmp	r3, #64	@ 0x40
 800598e:	d914      	bls.n	80059ba <HAL_SPI_Transmit+0x2fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6812      	ldr	r2, [r2, #0]
 800599a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059a0:	1d1a      	adds	r2, r3, #4
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	3b04      	subs	r3, #4
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80059b8:	e060      	b.n	8005a7c <HAL_SPI_Transmit+0x3bc>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d917      	bls.n	80059f6 <HAL_SPI_Transmit+0x336>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d013      	beq.n	80059f6 <HAL_SPI_Transmit+0x336>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059d2:	881a      	ldrh	r2, [r3, #0]
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059dc:	1c9a      	adds	r2, r3, #2
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b02      	subs	r3, #2
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80059f4:	e042      	b.n	8005a7c <HAL_SPI_Transmit+0x3bc>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3320      	adds	r3, #32
 8005a00:	7812      	ldrb	r2, [r2, #0]
 8005a02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005a20:	e02c      	b.n	8005a7c <HAL_SPI_Transmit+0x3bc>
 8005a22:	bf00      	nop
 8005a24:	40013000 	.word	0x40013000
 8005a28:	50013000 	.word	0x50013000
 8005a2c:	40003800 	.word	0x40003800
 8005a30:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a34:	f7fb f9b2 	bl	8000d9c <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d803      	bhi.n	8005a4c <HAL_SPI_Transmit+0x38c>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a4a:	d102      	bne.n	8005a52 <HAL_SPI_Transmit+0x392>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d114      	bne.n	8005a7c <HAL_SPI_Transmit+0x3bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 f9e6 	bl	8005e24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e02c      	b.n	8005ad6 <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f47f af72 	bne.w	800596e <HAL_SPI_Transmit+0x2ae>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2200      	movs	r2, #0
 8005a92:	2108      	movs	r1, #8
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fa65 	bl	8005f64 <SPI_WaitOnFlagUntilTimeout>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d007      	beq.n	8005ab0 <HAL_SPI_Transmit+0x3f0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005aa6:	f043 0220 	orr.w	r2, r3, #32
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f000 f9b7 	bl	8005e24 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <HAL_SPI_Transmit+0x414>
  {
    return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e000      	b.n	8005ad6 <HAL_SPI_Transmit+0x416>
  }
  else
  {
    return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
  }
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop

08005ae0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	603b      	str	r3, [r7, #0]
 8005aec:	4613      	mov	r3, r2
 8005aee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3330      	adds	r3, #48	@ 0x30
 8005af6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005af8:	f7fb f950 	bl	8000d9c <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d001      	beq.n	8005b0e <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	e17e      	b.n	8005e0c <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <HAL_SPI_Receive+0x3a>
 8005b14:	88fb      	ldrh	r3, [r7, #6]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e176      	b.n	8005e0c <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_SPI_Receive+0x4c>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e16f      	b.n	8005e0c <HAL_SPI_Receive+0x32c>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2204      	movs	r2, #4
 8005b38:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	88fa      	ldrh	r2, [r7, #6]
 8005b4e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	88fa      	ldrh	r2, [r7, #6]
 8005b56:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005b84:	d108      	bne.n	8005b98 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	e009      	b.n	8005bac <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005baa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	0c1b      	lsrs	r3, r3, #16
 8005bb4:	041b      	lsls	r3, r3, #16
 8005bb6:	88f9      	ldrh	r1, [r7, #6]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	6812      	ldr	r2, [r2, #0]
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0201 	orr.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10c      	bne.n	8005bf8 <HAL_SPI_Receive+0x118>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005be6:	d107      	bne.n	8005bf8 <HAL_SPI_Receive+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bf6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	2b0f      	cmp	r3, #15
 8005bfe:	d95c      	bls.n	8005cba <HAL_SPI_Receive+0x1da>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a83      	ldr	r2, [pc, #524]	@ (8005e14 <HAL_SPI_Receive+0x334>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d050      	beq.n	8005cac <HAL_SPI_Receive+0x1cc>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a82      	ldr	r2, [pc, #520]	@ (8005e18 <HAL_SPI_Receive+0x338>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d04b      	beq.n	8005cac <HAL_SPI_Receive+0x1cc>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a80      	ldr	r2, [pc, #512]	@ (8005e1c <HAL_SPI_Receive+0x33c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d046      	beq.n	8005cac <HAL_SPI_Receive+0x1cc>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a7f      	ldr	r2, [pc, #508]	@ (8005e20 <HAL_SPI_Receive+0x340>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d148      	bne.n	8005cba <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005c28:	e040      	b.n	8005cac <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695a      	ldr	r2, [r3, #20]
 8005c30:	f248 0308 	movw	r3, #32776	@ 0x8008
 8005c34:	4013      	ands	r3, r2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d014      	beq.n	8005c64 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c42:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c44:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c4a:	1d1a      	adds	r2, r3, #4
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8005c62:	e023      	b.n	8005cac <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c64:	f7fb f89a 	bl	8000d9c <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d803      	bhi.n	8005c7c <HAL_SPI_Receive+0x19c>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c7a:	d102      	bne.n	8005c82 <HAL_SPI_Receive+0x1a2>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d114      	bne.n	8005cac <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 f8ce 	bl	8005e24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e0af      	b.n	8005e0c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1b8      	bne.n	8005c2a <HAL_SPI_Receive+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005cb8:	e095      	b.n	8005de6 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	2b07      	cmp	r3, #7
 8005cc0:	f240 808b 	bls.w	8005dda <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005cc4:	e03f      	b.n	8005d46 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d114      	bne.n	8005cfe <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	8812      	ldrh	r2, [r2, #0]
 8005cdc:	b292      	uxth	r2, r2
 8005cde:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ce4:	1c9a      	adds	r2, r3, #2
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8005cfc:	e023      	b.n	8005d46 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cfe:	f7fb f84d 	bl	8000d9c <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d803      	bhi.n	8005d16 <HAL_SPI_Receive+0x236>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d14:	d102      	bne.n	8005d1c <HAL_SPI_Receive+0x23c>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d114      	bne.n	8005d46 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 f881 	bl	8005e24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e062      	b.n	8005e0c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1b9      	bne.n	8005cc6 <HAL_SPI_Receive+0x1e6>
 8005d52:	e048      	b.n	8005de6 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d117      	bne.n	8005d92 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d6e:	7812      	ldrb	r2, [r2, #0]
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8005d90:	e023      	b.n	8005dda <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d92:	f7fb f803 	bl	8000d9c <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d803      	bhi.n	8005daa <HAL_SPI_Receive+0x2ca>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005da8:	d102      	bne.n	8005db0 <HAL_SPI_Receive+0x2d0>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d114      	bne.n	8005dda <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 f837 	bl	8005e24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005dbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e018      	b.n	8005e0c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1b6      	bne.n	8005d54 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 f81c 	bl	8005e24 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <HAL_SPI_Receive+0x32c>
  }
  else
  {
    return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
  }
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	40013000 	.word	0x40013000
 8005e18:	50013000 	.word	0x50013000
 8005e1c:	40003800 	.word	0x40003800
 8005e20:	50003800 	.word	0x50003800

08005e24 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0208 	orr.w	r2, r2, #8
 8005e42:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699a      	ldr	r2, [r3, #24]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0210 	orr.w	r2, r2, #16
 8005e52:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0201 	bic.w	r2, r2, #1
 8005e62:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6812      	ldr	r2, [r2, #0]
 8005e6e:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8005e72:	f023 0303 	bic.w	r3, r3, #3
 8005e76:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005e86:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d014      	beq.n	8005ebe <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00f      	beq.n	8005ebe <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ea4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699a      	ldr	r2, [r3, #24]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0220 	orr.w	r2, r2, #32
 8005ebc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	d014      	beq.n	8005ef4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00f      	beq.n	8005ef4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005eda:	f043 0204 	orr.w	r2, r3, #4
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699a      	ldr	r2, [r3, #24]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ef2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00f      	beq.n	8005f1e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f04:	f043 0201 	orr.w	r2, r3, #1
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	699a      	ldr	r2, [r3, #24]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f1c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00f      	beq.n	8005f48 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f2e:	f043 0208 	orr.w	r2, r3, #8
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f46:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8005f58:	bf00      	nop
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	603b      	str	r3, [r7, #0]
 8005f70:	4613      	mov	r3, r2
 8005f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005f74:	e010      	b.n	8005f98 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f76:	f7fa ff11 	bl	8000d9c <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d803      	bhi.n	8005f8e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f8c:	d102      	bne.n	8005f94 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e00f      	b.n	8005fb8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	695a      	ldr	r2, [r3, #20]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	bf0c      	ite	eq
 8005fa8:	2301      	moveq	r3, #1
 8005faa:	2300      	movne	r3, #0
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	461a      	mov	r2, r3
 8005fb0:	79fb      	ldrb	r3, [r7, #7]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d0df      	beq.n	8005f76 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fcc:	095b      	lsrs	r3, r3, #5
 8005fce:	3301      	adds	r3, #1
 8005fd0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	3307      	adds	r3, #7
 8005fde:	08db      	lsrs	r3, r3, #3
 8005fe0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	fb02 f303 	mul.w	r3, r2, r3
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b083      	sub	sp, #12
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	d12e      	bne.n	800606a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8006016:	2302      	movs	r3, #2
 8006018:	e028      	b.n	800606c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2202      	movs	r2, #2
 8006026:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0201 	bic.w	r2, r2, #1
 8006038:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8006046:	ea42 0103 	orr.w	r1, r2, r3
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	e000      	b.n	800606c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
  }
}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e042      	b.n	8006110 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006090:	2b00      	cmp	r3, #0
 8006092:	d106      	bne.n	80060a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7fa fcc9 	bl	8000a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2224      	movs	r2, #36	@ 0x24
 80060a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0201 	bic.w	r2, r2, #1
 80060b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fb40 	bl	8006748 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f99b 	bl	8006404 <UART_SetConfig>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d101      	bne.n	80060d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e01b      	b.n	8006110 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0201 	orr.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fbbf 	bl	800688c <UART_CheckIdleState>
 800610e:	4603      	mov	r3, r0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08a      	sub	sp, #40	@ 0x28
 800611c:	af02      	add	r7, sp, #8
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	603b      	str	r3, [r7, #0]
 8006124:	4613      	mov	r3, r2
 8006126:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800612e:	2b20      	cmp	r3, #32
 8006130:	f040 808b 	bne.w	800624a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d002      	beq.n	8006140 <HAL_UART_Transmit+0x28>
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e083      	b.n	800624c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800614e:	2b80      	cmp	r3, #128	@ 0x80
 8006150:	d107      	bne.n	8006162 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006160:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2221      	movs	r2, #33	@ 0x21
 800616e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006172:	f7fa fe13 	bl	8000d9c <HAL_GetTick>
 8006176:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	88fa      	ldrh	r2, [r7, #6]
 800617c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	88fa      	ldrh	r2, [r7, #6]
 8006184:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006190:	d108      	bne.n	80061a4 <HAL_UART_Transmit+0x8c>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d104      	bne.n	80061a4 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800619a:	2300      	movs	r3, #0
 800619c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	61bb      	str	r3, [r7, #24]
 80061a2:	e003      	b.n	80061ac <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061a8:	2300      	movs	r3, #0
 80061aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061ac:	e030      	b.n	8006210 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2200      	movs	r2, #0
 80061b6:	2180      	movs	r1, #128	@ 0x80
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 fc11 	bl	80069e0 <UART_WaitOnFlagUntilTimeout>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d005      	beq.n	80061d0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2220      	movs	r2, #32
 80061c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e03d      	b.n	800624c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10b      	bne.n	80061ee <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	3302      	adds	r3, #2
 80061ea:	61bb      	str	r3, [r7, #24]
 80061ec:	e007      	b.n	80061fe <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	781a      	ldrb	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	3301      	adds	r3, #1
 80061fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006204:	b29b      	uxth	r3, r3
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006216:	b29b      	uxth	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1c8      	bne.n	80061ae <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	2200      	movs	r2, #0
 8006224:	2140      	movs	r1, #64	@ 0x40
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 fbda 	bl	80069e0 <UART_WaitOnFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d005      	beq.n	800623e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2220      	movs	r2, #32
 8006236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e006      	b.n	800624c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2220      	movs	r2, #32
 8006242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	e000      	b.n	800624c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800624a:	2302      	movs	r3, #2
  }
}
 800624c:	4618      	mov	r0, r3
 800624e:	3720      	adds	r7, #32
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b08a      	sub	sp, #40	@ 0x28
 8006258:	af02      	add	r7, sp, #8
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	4613      	mov	r3, r2
 8006262:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800626a:	2b20      	cmp	r3, #32
 800626c:	f040 80c4 	bne.w	80063f8 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <HAL_UART_Receive+0x28>
 8006276:	88fb      	ldrh	r3, [r7, #6]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e0bc      	b.n	80063fa <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800628a:	2b40      	cmp	r3, #64	@ 0x40
 800628c:	d107      	bne.n	800629e <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689a      	ldr	r2, [r3, #8]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800629c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2222      	movs	r2, #34	@ 0x22
 80062aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062b4:	f7fa fd72 	bl	8000d9c <HAL_GetTick>
 80062b8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	88fa      	ldrh	r2, [r7, #6]
 80062be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	88fa      	ldrh	r2, [r7, #6]
 80062c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062d2:	d10e      	bne.n	80062f2 <HAL_UART_Receive+0x9e>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d105      	bne.n	80062e8 <HAL_UART_Receive+0x94>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80062e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80062e6:	e02d      	b.n	8006344 <HAL_UART_Receive+0xf0>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	22ff      	movs	r2, #255	@ 0xff
 80062ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80062f0:	e028      	b.n	8006344 <HAL_UART_Receive+0xf0>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10d      	bne.n	8006316 <HAL_UART_Receive+0xc2>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d104      	bne.n	800630c <HAL_UART_Receive+0xb8>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	22ff      	movs	r2, #255	@ 0xff
 8006306:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800630a:	e01b      	b.n	8006344 <HAL_UART_Receive+0xf0>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	227f      	movs	r2, #127	@ 0x7f
 8006310:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006314:	e016      	b.n	8006344 <HAL_UART_Receive+0xf0>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800631e:	d10d      	bne.n	800633c <HAL_UART_Receive+0xe8>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d104      	bne.n	8006332 <HAL_UART_Receive+0xde>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	227f      	movs	r2, #127	@ 0x7f
 800632c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006330:	e008      	b.n	8006344 <HAL_UART_Receive+0xf0>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	223f      	movs	r2, #63	@ 0x3f
 8006336:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800633a:	e003      	b.n	8006344 <HAL_UART_Receive+0xf0>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800634a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006354:	d108      	bne.n	8006368 <HAL_UART_Receive+0x114>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d104      	bne.n	8006368 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 800635e:	2300      	movs	r3, #0
 8006360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	61bb      	str	r3, [r7, #24]
 8006366:	e003      	b.n	8006370 <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800636c:	2300      	movs	r3, #0
 800636e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006370:	e036      	b.n	80063e0 <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2200      	movs	r2, #0
 800637a:	2120      	movs	r1, #32
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 fb2f 	bl	80069e0 <UART_WaitOnFlagUntilTimeout>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d005      	beq.n	8006394 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2220      	movs	r2, #32
 800638c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e032      	b.n	80063fa <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10c      	bne.n	80063b4 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	8a7b      	ldrh	r3, [r7, #18]
 80063a4:	4013      	ands	r3, r2
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	3302      	adds	r3, #2
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	e00c      	b.n	80063ce <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	8a7b      	ldrh	r3, [r7, #18]
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	4013      	ands	r3, r2
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	3301      	adds	r3, #1
 80063cc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1c2      	bne.n	8006372 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	e000      	b.n	80063fa <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 80063f8:	2302      	movs	r3, #2
  }
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3720      	adds	r7, #32
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006408:	b094      	sub	sp, #80	@ 0x50
 800640a:	af00      	add	r7, sp, #0
 800640c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	4b7e      	ldr	r3, [pc, #504]	@ (8006614 <UART_SetConfig+0x210>)
 800641a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800641c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	431a      	orrs	r2, r3
 8006426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	431a      	orrs	r2, r3
 800642c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	4313      	orrs	r3, r2
 8006432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4977      	ldr	r1, [pc, #476]	@ (8006618 <UART_SetConfig+0x214>)
 800643c:	4019      	ands	r1, r3
 800643e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006444:	430b      	orrs	r3, r1
 8006446:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006454:	68d9      	ldr	r1, [r3, #12]
 8006456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	ea40 0301 	orr.w	r3, r0, r1
 800645e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	4b6a      	ldr	r3, [pc, #424]	@ (8006614 <UART_SetConfig+0x210>)
 800646c:	429a      	cmp	r2, r3
 800646e:	d009      	beq.n	8006484 <UART_SetConfig+0x80>
 8006470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	4b69      	ldr	r3, [pc, #420]	@ (800661c <UART_SetConfig+0x218>)
 8006476:	429a      	cmp	r2, r3
 8006478:	d004      	beq.n	8006484 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800647a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647c:	6a1a      	ldr	r2, [r3, #32]
 800647e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006480:	4313      	orrs	r3, r2
 8006482:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800648e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8006492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006498:	430b      	orrs	r3, r1
 800649a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800649c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a2:	f023 000f 	bic.w	r0, r3, #15
 80064a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80064aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	ea40 0301 	orr.w	r3, r0, r1
 80064b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	4b59      	ldr	r3, [pc, #356]	@ (8006620 <UART_SetConfig+0x21c>)
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d102      	bne.n	80064c4 <UART_SetConfig+0xc0>
 80064be:	2301      	movs	r3, #1
 80064c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064c2:	e029      	b.n	8006518 <UART_SetConfig+0x114>
 80064c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	4b56      	ldr	r3, [pc, #344]	@ (8006624 <UART_SetConfig+0x220>)
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d102      	bne.n	80064d4 <UART_SetConfig+0xd0>
 80064ce:	2302      	movs	r3, #2
 80064d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064d2:	e021      	b.n	8006518 <UART_SetConfig+0x114>
 80064d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	4b53      	ldr	r3, [pc, #332]	@ (8006628 <UART_SetConfig+0x224>)
 80064da:	429a      	cmp	r2, r3
 80064dc:	d102      	bne.n	80064e4 <UART_SetConfig+0xe0>
 80064de:	2304      	movs	r3, #4
 80064e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064e2:	e019      	b.n	8006518 <UART_SetConfig+0x114>
 80064e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	4b50      	ldr	r3, [pc, #320]	@ (800662c <UART_SetConfig+0x228>)
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d102      	bne.n	80064f4 <UART_SetConfig+0xf0>
 80064ee:	2308      	movs	r3, #8
 80064f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064f2:	e011      	b.n	8006518 <UART_SetConfig+0x114>
 80064f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	4b4d      	ldr	r3, [pc, #308]	@ (8006630 <UART_SetConfig+0x22c>)
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d102      	bne.n	8006504 <UART_SetConfig+0x100>
 80064fe:	2310      	movs	r3, #16
 8006500:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006502:	e009      	b.n	8006518 <UART_SetConfig+0x114>
 8006504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	4b42      	ldr	r3, [pc, #264]	@ (8006614 <UART_SetConfig+0x210>)
 800650a:	429a      	cmp	r2, r3
 800650c:	d102      	bne.n	8006514 <UART_SetConfig+0x110>
 800650e:	2320      	movs	r3, #32
 8006510:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006512:	e001      	b.n	8006518 <UART_SetConfig+0x114>
 8006514:	2300      	movs	r3, #0
 8006516:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	4b3d      	ldr	r3, [pc, #244]	@ (8006614 <UART_SetConfig+0x210>)
 800651e:	429a      	cmp	r2, r3
 8006520:	d005      	beq.n	800652e <UART_SetConfig+0x12a>
 8006522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	4b3d      	ldr	r3, [pc, #244]	@ (800661c <UART_SetConfig+0x218>)
 8006528:	429a      	cmp	r2, r3
 800652a:	f040 8085 	bne.w	8006638 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800652e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006530:	2200      	movs	r2, #0
 8006532:	623b      	str	r3, [r7, #32]
 8006534:	627a      	str	r2, [r7, #36]	@ 0x24
 8006536:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800653a:	f7fd fc99 	bl	8003e70 <HAL_RCCEx_GetPeriphCLKFreq>
 800653e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 80e8 	beq.w	8006718 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800654a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654c:	4a39      	ldr	r2, [pc, #228]	@ (8006634 <UART_SetConfig+0x230>)
 800654e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006552:	461a      	mov	r2, r3
 8006554:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006556:	fbb3 f3f2 	udiv	r3, r3, r2
 800655a:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800655c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	4613      	mov	r3, r2
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	4413      	add	r3, r2
 8006566:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006568:	429a      	cmp	r2, r3
 800656a:	d305      	bcc.n	8006578 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800656c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006572:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006574:	429a      	cmp	r2, r3
 8006576:	d903      	bls.n	8006580 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800657e:	e048      	b.n	8006612 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006582:	2200      	movs	r2, #0
 8006584:	61bb      	str	r3, [r7, #24]
 8006586:	61fa      	str	r2, [r7, #28]
 8006588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800658a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658c:	4a29      	ldr	r2, [pc, #164]	@ (8006634 <UART_SetConfig+0x230>)
 800658e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006592:	b29b      	uxth	r3, r3
 8006594:	2200      	movs	r2, #0
 8006596:	613b      	str	r3, [r7, #16]
 8006598:	617a      	str	r2, [r7, #20]
 800659a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800659e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80065a2:	f7f9 fe69 	bl	8000278 <__aeabi_uldivmod>
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	4610      	mov	r0, r2
 80065ac:	4619      	mov	r1, r3
 80065ae:	f04f 0200 	mov.w	r2, #0
 80065b2:	f04f 0300 	mov.w	r3, #0
 80065b6:	020b      	lsls	r3, r1, #8
 80065b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065bc:	0202      	lsls	r2, r0, #8
 80065be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065c0:	6849      	ldr	r1, [r1, #4]
 80065c2:	0849      	lsrs	r1, r1, #1
 80065c4:	2000      	movs	r0, #0
 80065c6:	460c      	mov	r4, r1
 80065c8:	4605      	mov	r5, r0
 80065ca:	eb12 0804 	adds.w	r8, r2, r4
 80065ce:	eb43 0905 	adc.w	r9, r3, r5
 80065d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	60bb      	str	r3, [r7, #8]
 80065da:	60fa      	str	r2, [r7, #12]
 80065dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065e0:	4640      	mov	r0, r8
 80065e2:	4649      	mov	r1, r9
 80065e4:	f7f9 fe48 	bl	8000278 <__aeabi_uldivmod>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	4613      	mov	r3, r2
 80065ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065f6:	d308      	bcc.n	800660a <UART_SetConfig+0x206>
 80065f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065fe:	d204      	bcs.n	800660a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8006600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006606:	60da      	str	r2, [r3, #12]
 8006608:	e003      	b.n	8006612 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8006610:	e082      	b.n	8006718 <UART_SetConfig+0x314>
 8006612:	e081      	b.n	8006718 <UART_SetConfig+0x314>
 8006614:	46002400 	.word	0x46002400
 8006618:	cfff69f3 	.word	0xcfff69f3
 800661c:	56002400 	.word	0x56002400
 8006620:	40013800 	.word	0x40013800
 8006624:	40004400 	.word	0x40004400
 8006628:	40004800 	.word	0x40004800
 800662c:	40004c00 	.word	0x40004c00
 8006630:	40005000 	.word	0x40005000
 8006634:	08006ee0 	.word	0x08006ee0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006640:	d13c      	bne.n	80066bc <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006644:	2200      	movs	r2, #0
 8006646:	603b      	str	r3, [r7, #0]
 8006648:	607a      	str	r2, [r7, #4]
 800664a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800664e:	f7fd fc0f 	bl	8003e70 <HAL_RCCEx_GetPeriphCLKFreq>
 8006652:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006654:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006656:	2b00      	cmp	r3, #0
 8006658:	d05e      	beq.n	8006718 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800665a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800665c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665e:	4a39      	ldr	r2, [pc, #228]	@ (8006744 <UART_SetConfig+0x340>)
 8006660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006664:	461a      	mov	r2, r3
 8006666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006668:	fbb3 f3f2 	udiv	r3, r3, r2
 800666c:	005a      	lsls	r2, r3, #1
 800666e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	085b      	lsrs	r3, r3, #1
 8006674:	441a      	add	r2, r3
 8006676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	fbb2 f3f3 	udiv	r3, r2, r3
 800667e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006682:	2b0f      	cmp	r3, #15
 8006684:	d916      	bls.n	80066b4 <UART_SetConfig+0x2b0>
 8006686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800668c:	d212      	bcs.n	80066b4 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800668e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006690:	b29b      	uxth	r3, r3
 8006692:	f023 030f 	bic.w	r3, r3, #15
 8006696:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800669a:	085b      	lsrs	r3, r3, #1
 800669c:	b29b      	uxth	r3, r3
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80066a6:	4313      	orrs	r3, r2
 80066a8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80066aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80066b0:	60da      	str	r2, [r3, #12]
 80066b2:	e031      	b.n	8006718 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80066ba:	e02d      	b.n	8006718 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80066bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066be:	2200      	movs	r2, #0
 80066c0:	469a      	mov	sl, r3
 80066c2:	4693      	mov	fp, r2
 80066c4:	4650      	mov	r0, sl
 80066c6:	4659      	mov	r1, fp
 80066c8:	f7fd fbd2 	bl	8003e70 <HAL_RCCEx_GetPeriphCLKFreq>
 80066cc:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80066ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d021      	beq.n	8006718 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006744 <UART_SetConfig+0x340>)
 80066da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066de:	461a      	mov	r2, r3
 80066e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80066e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	085b      	lsrs	r3, r3, #1
 80066ec:	441a      	add	r2, r3
 80066ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066fa:	2b0f      	cmp	r3, #15
 80066fc:	d909      	bls.n	8006712 <UART_SetConfig+0x30e>
 80066fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006704:	d205      	bcs.n	8006712 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006708:	b29a      	uxth	r2, r3
 800670a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60da      	str	r2, [r3, #12]
 8006710:	e002      	b.n	8006718 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671a:	2201      	movs	r2, #1
 800671c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006722:	2201      	movs	r2, #1
 8006724:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800672a:	2200      	movs	r2, #0
 800672c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800672e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006730:	2200      	movs	r2, #0
 8006732:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006734:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006738:	4618      	mov	r0, r3
 800673a:	3750      	adds	r7, #80	@ 0x50
 800673c:	46bd      	mov	sp, r7
 800673e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006742:	bf00      	nop
 8006744:	08006ee0 	.word	0x08006ee0

08006748 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00a      	beq.n	8006772 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ba:	f003 0304 	and.w	r3, r3, #4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067dc:	f003 0310 	and.w	r3, r3, #16
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fe:	f003 0320 	and.w	r3, r3, #32
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01a      	beq.n	800685e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006842:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006846:	d10a      	bne.n	800685e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00a      	beq.n	8006880 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	605a      	str	r2, [r3, #4]
  }
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b098      	sub	sp, #96	@ 0x60
 8006890:	af02      	add	r7, sp, #8
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800689c:	f7fa fa7e 	bl	8000d9c <HAL_GetTick>
 80068a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0308 	and.w	r3, r3, #8
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d12f      	bne.n	8006910 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068b8:	2200      	movs	r2, #0
 80068ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f88e 	bl	80069e0 <UART_WaitOnFlagUntilTimeout>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d022      	beq.n	8006910 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068de:	653b      	str	r3, [r7, #80]	@ 0x50
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80068ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068f0:	e841 2300 	strex	r3, r2, [r1]
 80068f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e6      	bne.n	80068ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2220      	movs	r2, #32
 8006900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e063      	b.n	80069d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0304 	and.w	r3, r3, #4
 800691a:	2b04      	cmp	r3, #4
 800691c:	d149      	bne.n	80069b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800691e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006926:	2200      	movs	r2, #0
 8006928:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f857 	bl	80069e0 <UART_WaitOnFlagUntilTimeout>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d03c      	beq.n	80069b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	623b      	str	r3, [r7, #32]
   return(result);
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800694c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006956:	633b      	str	r3, [r7, #48]	@ 0x30
 8006958:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800695c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e6      	bne.n	8006938 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3308      	adds	r3, #8
 8006970:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	60fb      	str	r3, [r7, #12]
   return(result);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f023 0301 	bic.w	r3, r3, #1
 8006980:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3308      	adds	r3, #8
 8006988:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800698a:	61fa      	str	r2, [r7, #28]
 800698c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	69b9      	ldr	r1, [r7, #24]
 8006990:	69fa      	ldr	r2, [r7, #28]
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	617b      	str	r3, [r7, #20]
   return(result);
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1e5      	bne.n	800696a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e012      	b.n	80069d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2220      	movs	r2, #32
 80069be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3758      	adds	r7, #88	@ 0x58
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	603b      	str	r3, [r7, #0]
 80069ec:	4613      	mov	r3, r2
 80069ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f0:	e04f      	b.n	8006a92 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069f8:	d04b      	beq.n	8006a92 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069fa:	f7fa f9cf 	bl	8000d9c <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d302      	bcc.n	8006a10 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e04e      	b.n	8006ab2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0304 	and.w	r3, r3, #4
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d037      	beq.n	8006a92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	2b80      	cmp	r3, #128	@ 0x80
 8006a26:	d034      	beq.n	8006a92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b40      	cmp	r3, #64	@ 0x40
 8006a2c:	d031      	beq.n	8006a92 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	f003 0308 	and.w	r3, r3, #8
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	d110      	bne.n	8006a5e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2208      	movs	r2, #8
 8006a42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f838 	bl	8006aba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e029      	b.n	8006ab2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a6c:	d111      	bne.n	8006a92 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 f81e 	bl	8006aba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2220      	movs	r2, #32
 8006a82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e00f      	b.n	8006ab2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69da      	ldr	r2, [r3, #28]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	bf0c      	ite	eq
 8006aa2:	2301      	moveq	r3, #1
 8006aa4:	2300      	movne	r3, #0
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d0a0      	beq.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b095      	sub	sp, #84	@ 0x54
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aca:	e853 3f00 	ldrex	r3, [r3]
 8006ace:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	461a      	mov	r2, r3
 8006ade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ae0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ae2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ae6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e6      	bne.n	8006ac2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3308      	adds	r3, #8
 8006afa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	e853 3f00 	ldrex	r3, [r3]
 8006b02:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b0a:	f023 0301 	bic.w	r3, r3, #1
 8006b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3308      	adds	r3, #8
 8006b16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e3      	bne.n	8006af4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d118      	bne.n	8006b66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	e853 3f00 	ldrex	r3, [r3]
 8006b40:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	f023 0310 	bic.w	r3, r3, #16
 8006b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b52:	61bb      	str	r3, [r7, #24]
 8006b54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	6979      	ldr	r1, [r7, #20]
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e6      	bne.n	8006b34 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b7a:	bf00      	nop
 8006b7c:	3754      	adds	r7, #84	@ 0x54
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b085      	sub	sp, #20
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d101      	bne.n	8006b9c <HAL_UARTEx_DisableFifoMode+0x16>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e027      	b.n	8006bec <HAL_UARTEx_DisableFifoMode+0x66>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2224      	movs	r2, #36	@ 0x24
 8006ba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 0201 	bic.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006bca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e02d      	b.n	8006c6c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2224      	movs	r2, #36	@ 0x24
 8006c1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f022 0201 	bic.w	r2, r2, #1
 8006c36:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f84f 	bl	8006cf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d101      	bne.n	8006c8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c88:	2302      	movs	r3, #2
 8006c8a:	e02d      	b.n	8006ce8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2224      	movs	r2, #36	@ 0x24
 8006c98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0201 	bic.w	r2, r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f811 	bl	8006cf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d108      	bne.n	8006d12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d10:	e031      	b.n	8006d76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d12:	2308      	movs	r3, #8
 8006d14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d16:	2308      	movs	r3, #8
 8006d18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	0e5b      	lsrs	r3, r3, #25
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	0f5b      	lsrs	r3, r3, #29
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	f003 0307 	and.w	r3, r3, #7
 8006d38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d3a:	7bbb      	ldrb	r3, [r7, #14]
 8006d3c:	7b3a      	ldrb	r2, [r7, #12]
 8006d3e:	4911      	ldr	r1, [pc, #68]	@ (8006d84 <UARTEx_SetNbDataToProcess+0x94>)
 8006d40:	5c8a      	ldrb	r2, [r1, r2]
 8006d42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d46:	7b3a      	ldrb	r2, [r7, #12]
 8006d48:	490f      	ldr	r1, [pc, #60]	@ (8006d88 <UARTEx_SetNbDataToProcess+0x98>)
 8006d4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
 8006d5a:	7b7a      	ldrb	r2, [r7, #13]
 8006d5c:	4909      	ldr	r1, [pc, #36]	@ (8006d84 <UARTEx_SetNbDataToProcess+0x94>)
 8006d5e:	5c8a      	ldrb	r2, [r1, r2]
 8006d60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d64:	7b7a      	ldrb	r2, [r7, #13]
 8006d66:	4908      	ldr	r1, [pc, #32]	@ (8006d88 <UARTEx_SetNbDataToProcess+0x98>)
 8006d68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006d76:	bf00      	nop
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	08006ef8 	.word	0x08006ef8
 8006d88:	08006f00 	.word	0x08006f00

08006d8c <memset>:
 8006d8c:	4402      	add	r2, r0
 8006d8e:	4603      	mov	r3, r0
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d100      	bne.n	8006d96 <memset+0xa>
 8006d94:	4770      	bx	lr
 8006d96:	f803 1b01 	strb.w	r1, [r3], #1
 8006d9a:	e7f9      	b.n	8006d90 <memset+0x4>

08006d9c <__libc_init_array>:
 8006d9c:	b570      	push	{r4, r5, r6, lr}
 8006d9e:	4d0d      	ldr	r5, [pc, #52]	@ (8006dd4 <__libc_init_array+0x38>)
 8006da0:	2600      	movs	r6, #0
 8006da2:	4c0d      	ldr	r4, [pc, #52]	@ (8006dd8 <__libc_init_array+0x3c>)
 8006da4:	1b64      	subs	r4, r4, r5
 8006da6:	10a4      	asrs	r4, r4, #2
 8006da8:	42a6      	cmp	r6, r4
 8006daa:	d109      	bne.n	8006dc0 <__libc_init_array+0x24>
 8006dac:	4d0b      	ldr	r5, [pc, #44]	@ (8006ddc <__libc_init_array+0x40>)
 8006dae:	2600      	movs	r6, #0
 8006db0:	4c0b      	ldr	r4, [pc, #44]	@ (8006de0 <__libc_init_array+0x44>)
 8006db2:	f000 f817 	bl	8006de4 <_init>
 8006db6:	1b64      	subs	r4, r4, r5
 8006db8:	10a4      	asrs	r4, r4, #2
 8006dba:	42a6      	cmp	r6, r4
 8006dbc:	d105      	bne.n	8006dca <__libc_init_array+0x2e>
 8006dbe:	bd70      	pop	{r4, r5, r6, pc}
 8006dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dc4:	3601      	adds	r6, #1
 8006dc6:	4798      	blx	r3
 8006dc8:	e7ee      	b.n	8006da8 <__libc_init_array+0xc>
 8006dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dce:	3601      	adds	r6, #1
 8006dd0:	4798      	blx	r3
 8006dd2:	e7f2      	b.n	8006dba <__libc_init_array+0x1e>
 8006dd4:	08006f10 	.word	0x08006f10
 8006dd8:	08006f10 	.word	0x08006f10
 8006ddc:	08006f10 	.word	0x08006f10
 8006de0:	08006f14 	.word	0x08006f14

08006de4 <_init>:
 8006de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de6:	bf00      	nop
 8006de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dea:	bc08      	pop	{r3}
 8006dec:	469e      	mov	lr, r3
 8006dee:	4770      	bx	lr

08006df0 <_fini>:
 8006df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df2:	bf00      	nop
 8006df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006df6:	bc08      	pop	{r3}
 8006df8:	469e      	mov	lr, r3
 8006dfa:	4770      	bx	lr
