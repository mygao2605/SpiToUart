
SpiToUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ad4  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08006d0c  08006d0c  00007d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006e0c  08006e0c  00007e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006e14  08006e14  00007e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006e18  08006e18  00007e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000009  20000000  08006e1c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000568  2000000c  08006e25  0000800c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000574  08006e25  00008574  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00008009  2**0
                  CONTENTS, READONLY
 10 .debug_info   000114c7  00000000  00000000  0000803f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000021d6  00000000  00000000  00019506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d80  00000000  00000000  0001b6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032efc  00000000  00000000  0001c460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00011639  00000000  00000000  0004f35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013dd98  00000000  00000000  00060995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0019e72d  2**0
                  CONTENTS, READONLY
 17 .debug_rnglists 00000a55  00000000  00000000  0019e770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000037ac  00000000  00000000  0019f1c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  001a2974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	08006cf4 	.word	0x08006cf4

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	08006cf4 	.word	0x08006cf4

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000288:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <reverseByte>:
#include <stdint.h>
#include <string.h>
#include <stdlib.h>

uint8_t reverseByte(uint8_t byte)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
    byte = (byte & 0xF0) >> 4 | (byte & 0x0F) << 4;
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	091b      	lsrs	r3, r3, #4
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	b25a      	sxtb	r2, r3
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	011b      	lsls	r3, r3, #4
 80005a6:	b25b      	sxtb	r3, r3
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	71fb      	strb	r3, [r7, #7]
    byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	109b      	asrs	r3, r3, #2
 80005b2:	b25b      	sxtb	r3, r3
 80005b4:	f003 0333 	and.w	r3, r3, #51	@ 0x33
 80005b8:	b25a      	sxtb	r2, r3
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	f023 0333 	bic.w	r3, r3, #51	@ 0x33
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	4313      	orrs	r3, r2
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	71fb      	strb	r3, [r7, #7]
    byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	105b      	asrs	r3, r3, #1
 80005d0:	b25b      	sxtb	r3, r3
 80005d2:	f003 0355 	and.w	r3, r3, #85	@ 0x55
 80005d6:	b25a      	sxtb	r2, r3
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	b25b      	sxtb	r3, r3
 80005de:	f023 0355 	bic.w	r3, r3, #85	@ 0x55
 80005e2:	b25b      	sxtb	r3, r3
 80005e4:	4313      	orrs	r3, r2
 80005e6:	b25b      	sxtb	r3, r3
 80005e8:	71fb      	strb	r3, [r7, #7]
    return byte;
 80005ea:	79fb      	ldrb	r3, [r7, #7]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <crc16_arc>:
uint16_t crc16_arc(uint8_t *data, size_t length)
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b087      	sub	sp, #28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0x0000;
 8000602:	2300      	movs	r3, #0
 8000604:	82fb      	strh	r3, [r7, #22]
    uint16_t polynomial = 0x8005;
 8000606:	f248 0305 	movw	r3, #32773	@ 0x8005
 800060a:	81bb      	strh	r3, [r7, #12]

    for (size_t i = 0; i < length; i++)
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	e02a      	b.n	8000668 <crc16_arc+0x70>
    {
        crc ^= (uint16_t)reverseByte(data[i]) << 8;
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	693b      	ldr	r3, [r7, #16]
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffb8 	bl	8000590 <reverseByte>
 8000620:	4603      	mov	r3, r0
 8000622:	021b      	lsls	r3, r3, #8
 8000624:	b21a      	sxth	r2, r3
 8000626:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800062a:	4053      	eors	r3, r2
 800062c:	b21b      	sxth	r3, r3
 800062e:	82fb      	strh	r3, [r7, #22]

        for (uint8_t j = 0; j < 8; j++)
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]
 8000634:	e012      	b.n	800065c <crc16_arc+0x64>
        {
            if (crc & 0x8000)
 8000636:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800063a:	2b00      	cmp	r3, #0
 800063c:	da08      	bge.n	8000650 <crc16_arc+0x58>
            {
                crc = (crc << 1) ^ polynomial;
 800063e:	8afb      	ldrh	r3, [r7, #22]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	b21a      	sxth	r2, r3
 8000644:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000648:	4053      	eors	r3, r2
 800064a:	b21b      	sxth	r3, r3
 800064c:	82fb      	strh	r3, [r7, #22]
 800064e:	e002      	b.n	8000656 <crc16_arc+0x5e>
            }
            else
            {
                crc = crc << 1;
 8000650:	8afb      	ldrh	r3, [r7, #22]
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	82fb      	strh	r3, [r7, #22]
        for (uint8_t j = 0; j < 8; j++)
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	3301      	adds	r3, #1
 800065a:	73fb      	strb	r3, [r7, #15]
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	2b07      	cmp	r3, #7
 8000660:	d9e9      	bls.n	8000636 <crc16_arc+0x3e>
    for (size_t i = 0; i < length; i++)
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	3301      	adds	r3, #1
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693a      	ldr	r2, [r7, #16]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	429a      	cmp	r2, r3
 800066e:	d3d0      	bcc.n	8000612 <crc16_arc+0x1a>
            }
        }
    }

    return reverseByte(crc >> 8) | (reverseByte(crc & 0x00FF) << 8);
 8000670:	8afb      	ldrh	r3, [r7, #22]
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	b29b      	uxth	r3, r3
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff89 	bl	8000590 <reverseByte>
 800067e:	4603      	mov	r3, r0
 8000680:	b21c      	sxth	r4, r3
 8000682:	8afb      	ldrh	r3, [r7, #22]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ff82 	bl	8000590 <reverseByte>
 800068c:	4603      	mov	r3, r0
 800068e:	021b      	lsls	r3, r3, #8
 8000690:	b21b      	sxth	r3, r3
 8000692:	4323      	orrs	r3, r4
 8000694:	b21b      	sxth	r3, r3
 8000696:	b29b      	uxth	r3, r3
}
 8000698:	4618      	mov	r0, r3
 800069a:	371c      	adds	r7, #28
 800069c:	46bd      	mov	sp, r7
 800069e:	bd90      	pop	{r4, r7, pc}

080006a0 <RS485Process>:

//uint8_t sFrameRx;


void RS485Process(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0

	// ucChar =  USART_0_read_by#include "Data.h"te();

	while ((uint8_t)((USART3->ISR & 0x20)>>5) == 1)
 80006a6:	e055      	b.n	8000754 <RS485Process+0xb4>
	{
		uint8_t ucChar;
		ucChar = (uint8_t)(USART3->RDR);
 80006a8:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <RS485Process+0xd0>)
 80006aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ac:	71fb      	strb	r3, [r7, #7]

		// Reading-----------------------------------------------
		if (sFrameRx.modbus_state == READING)
 80006ae:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <RS485Process+0xd4>)
 80006b0:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d119      	bne.n	80006ec <RS485Process+0x4c>
		{
			sFrameRx.u8BuffRead[sFrameRx.data_pointer++] = ucChar;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <RS485Process+0xd4>)
 80006ba:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	4a2c      	ldr	r2, [pc, #176]	@ (8000774 <RS485Process+0xd4>)
 80006c4:	f882 1101 	strb.w	r1, [r2, #257]	@ 0x101
 80006c8:	4619      	mov	r1, r3
 80006ca:	4a2a      	ldr	r2, [pc, #168]	@ (8000774 <RS485Process+0xd4>)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	5453      	strb	r3, [r2, r1]
			if (sFrameRx.data_pointer == sFrameRx.byte_count)
 80006d0:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <RS485Process+0xd4>)
 80006d2:	f893 2101 	ldrb.w	r2, [r3, #257]	@ 0x101
 80006d6:	4b27      	ldr	r3, [pc, #156]	@ (8000774 <RS485Process+0xd4>)
 80006d8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80006dc:	429a      	cmp	r2, r3
 80006de:	d105      	bne.n	80006ec <RS485Process+0x4c>
			{
				sFrameRx.modbus_state = READING_END;
 80006e0:	4b24      	ldr	r3, [pc, #144]	@ (8000774 <RS485Process+0xd4>)
 80006e2:	2202      	movs	r2, #2
 80006e4:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
				ModbusProcess();
 80006e8:	f000 f846 	bl	8000778 <ModbusProcess>
			}
		}

		// Check byte_count--------------------------------------
		if ((sFrameRx.u8BuffRead[3] == 0) && (sFrameRx.u8BuffRead[4] > 0))
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <RS485Process+0xd4>)
 80006ee:	78db      	ldrb	r3, [r3, #3]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d10a      	bne.n	800070a <RS485Process+0x6a>
 80006f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000774 <RS485Process+0xd4>)
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d006      	beq.n	800070a <RS485Process+0x6a>
		{
			sFrameRx.byte_count = 10 + sFrameRx.u8BuffRead[4];
 80006fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <RS485Process+0xd4>)
 80006fe:	791b      	ldrb	r3, [r3, #4]
 8000700:	330a      	adds	r3, #10
 8000702:	b2da      	uxtb	r2, r3
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <RS485Process+0xd4>)
 8000706:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
		}

		// Start--------------------------------------------------
		if (sFrameRx.modbus_state == START)
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <RS485Process+0xd4>)
 800070c:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8000710:	2b00      	cmp	r3, #0
 8000712:	d11f      	bne.n	8000754 <RS485Process+0xb4>
		{
			if (ucChar == 0x55)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b55      	cmp	r3, #85	@ 0x55
 8000718:	d114      	bne.n	8000744 <RS485Process+0xa4>
			{
				sFrameRx.data_pointer = 0;
 800071a:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <RS485Process+0xd4>)
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
				sFrameRx.u8BuffRead[sFrameRx.data_pointer++] = ucChar;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <RS485Process+0xd4>)
 8000724:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8000728:	1c5a      	adds	r2, r3, #1
 800072a:	b2d1      	uxtb	r1, r2
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <RS485Process+0xd4>)
 800072e:	f882 1101 	strb.w	r1, [r2, #257]	@ 0x101
 8000732:	4619      	mov	r1, r3
 8000734:	4a0f      	ldr	r2, [pc, #60]	@ (8000774 <RS485Process+0xd4>)
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	5453      	strb	r3, [r2, r1]
				sFrameRx.modbus_state = READING;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <RS485Process+0xd4>)
 800073c:	2201      	movs	r2, #1
 800073e:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8000742:	e007      	b.n	8000754 <RS485Process+0xb4>

				}
				else
				{
					sFrameRx.modbus_state = START;
 8000744:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <RS485Process+0xd4>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
					sFrameRx.data_pointer = 0;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <RS485Process+0xd4>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
	while ((uint8_t)((USART3->ISR & 0x20)>>5) == 1)
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <RS485Process+0xd0>)
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	095b      	lsrs	r3, r3, #5
 800075a:	b2db      	uxtb	r3, r3
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b01      	cmp	r3, #1
 8000764:	d0a0      	beq.n	80006a8 <RS485Process+0x8>
				}
			}

		}

}
 8000766:	bf00      	nop
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40004800 	.word	0x40004800
 8000774:	20000028 	.word	0x20000028

08000778 <ModbusProcess>:

void ModbusProcess(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af02      	add	r7, sp, #8
//	}
//	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, SET);



	sFrameRx.modbus_state = START;
 800077e:	4b64      	ldr	r3, [pc, #400]	@ (8000910 <ModbusProcess+0x198>)
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2102      	movs	r1, #2
 800078a:	4862      	ldr	r0, [pc, #392]	@ (8000914 <ModbusProcess+0x19c>)
 800078c:	f001 f80a 	bl	80017a4 <HAL_GPIO_WritePin>
		if(sFrameRx.u8BuffRead[5] == 0x01){
 8000790:	4b5f      	ldr	r3, [pc, #380]	@ (8000910 <ModbusProcess+0x198>)
 8000792:	795b      	ldrb	r3, [r3, #5]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d159      	bne.n	800084c <ModbusProcess+0xd4>
		for (uint8_t i = 0 ; i< 21 ; i++){
 8000798:	2300      	movs	r3, #0
 800079a:	73fb      	strb	r3, [r7, #15]
 800079c:	e04d      	b.n	800083a <ModbusProcess+0xc2>

	//		HAL_UART_Transmit(&huart3, spi_data, sizeof(spi_data), HAL_MAX_DELAY);
			HAL_SPI_TransmitReceive(&hspi1, sFrameRx.u8BuffRead,spi_data,sizeof(spi_data), HAL_MAX_DELAY);
 800079e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007a8:	4a5b      	ldr	r2, [pc, #364]	@ (8000918 <ModbusProcess+0x1a0>)
 80007aa:	4959      	ldr	r1, [pc, #356]	@ (8000910 <ModbusProcess+0x198>)
 80007ac:	485b      	ldr	r0, [pc, #364]	@ (800091c <ModbusProcess+0x1a4>)
 80007ae:	f005 f93f 	bl	8005a30 <HAL_SPI_TransmitReceive>
			HAL_Delay(10);
 80007b2:	200a      	movs	r0, #10
 80007b4:	f000 fc92 	bl	80010dc <HAL_Delay>
			HAL_SPI_TransmitReceive(&hspi1,uart_data,spi_data,sizeof(uart_data), HAL_MAX_DELAY);
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007c2:	4a55      	ldr	r2, [pc, #340]	@ (8000918 <ModbusProcess+0x1a0>)
 80007c4:	4956      	ldr	r1, [pc, #344]	@ (8000920 <ModbusProcess+0x1a8>)
 80007c6:	4855      	ldr	r0, [pc, #340]	@ (800091c <ModbusProcess+0x1a4>)
 80007c8:	f005 f932 	bl	8005a30 <HAL_SPI_TransmitReceive>
			HAL_UART_Transmit(&huart3, spi_data, sizeof(spi_data), HAL_MAX_DELAY);
 80007cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007d4:	4950      	ldr	r1, [pc, #320]	@ (8000918 <ModbusProcess+0x1a0>)
 80007d6:	4853      	ldr	r0, [pc, #332]	@ (8000924 <ModbusProcess+0x1ac>)
 80007d8:	f005 fcfe 	bl	80061d8 <HAL_UART_Transmit>
			sFrameRx.u8BuffRead[2]++;
 80007dc:	4b4c      	ldr	r3, [pc, #304]	@ (8000910 <ModbusProcess+0x198>)
 80007de:	789b      	ldrb	r3, [r3, #2]
 80007e0:	3301      	adds	r3, #1
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b4a      	ldr	r3, [pc, #296]	@ (8000910 <ModbusProcess+0x198>)
 80007e6:	709a      	strb	r2, [r3, #2]
			for(int j =0; j < 6; j++)
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	e00b      	b.n	8000806 <ModbusProcess+0x8e>
			{
				Header[j] = sFrameRx.u8BuffRead[j];
 80007ee:	4a48      	ldr	r2, [pc, #288]	@ (8000910 <ModbusProcess+0x198>)
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	4413      	add	r3, r2
 80007f4:	7819      	ldrb	r1, [r3, #0]
 80007f6:	4a4c      	ldr	r2, [pc, #304]	@ (8000928 <ModbusProcess+0x1b0>)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	4413      	add	r3, r2
 80007fc:	460a      	mov	r2, r1
 80007fe:	701a      	strb	r2, [r3, #0]
			for(int j =0; j < 6; j++)
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	3301      	adds	r3, #1
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	2b05      	cmp	r3, #5
 800080a:	ddf0      	ble.n	80007ee <ModbusProcess+0x76>
			}
			checkCRC16_header=crc16_arc(Header, 6);
 800080c:	2106      	movs	r1, #6
 800080e:	4846      	ldr	r0, [pc, #280]	@ (8000928 <ModbusProcess+0x1b0>)
 8000810:	f7ff fef2 	bl	80005f8 <crc16_arc>
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	4b44      	ldr	r3, [pc, #272]	@ (800092c <ModbusProcess+0x1b4>)
 800081a:	801a      	strh	r2, [r3, #0]
			sFrameRx.u8BuffRead[6]=(uint8_t)(checkCRC16_header >> 8);
 800081c:	4b43      	ldr	r3, [pc, #268]	@ (800092c <ModbusProcess+0x1b4>)
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	0a1b      	lsrs	r3, r3, #8
 8000822:	b29b      	uxth	r3, r3
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b3a      	ldr	r3, [pc, #232]	@ (8000910 <ModbusProcess+0x198>)
 8000828:	719a      	strb	r2, [r3, #6]
			sFrameRx.u8BuffRead[7]=(uint8_t)(checkCRC16_header);
 800082a:	4b40      	ldr	r3, [pc, #256]	@ (800092c <ModbusProcess+0x1b4>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b37      	ldr	r3, [pc, #220]	@ (8000910 <ModbusProcess+0x198>)
 8000832:	71da      	strb	r2, [r3, #7]
		for (uint8_t i = 0 ; i< 21 ; i++){
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	3301      	adds	r3, #1
 8000838:	73fb      	strb	r3, [r7, #15]
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	2b14      	cmp	r3, #20
 800083e:	d9ae      	bls.n	800079e <ModbusProcess+0x26>
//			HAL_Delay(100);
		}
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, SET);
 8000840:	2201      	movs	r2, #1
 8000842:	2102      	movs	r1, #2
 8000844:	4833      	ldr	r0, [pc, #204]	@ (8000914 <ModbusProcess+0x19c>)
 8000846:	f000 ffad 	bl	80017a4 <HAL_GPIO_WritePin>
					}

			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, SET);

		}
}
 800084a:	e05c      	b.n	8000906 <ModbusProcess+0x18e>
		}else if(sFrameRx.u8BuffRead[5] == 0x02){
 800084c:	4b30      	ldr	r3, [pc, #192]	@ (8000910 <ModbusProcess+0x198>)
 800084e:	795b      	ldrb	r3, [r3, #5]
 8000850:	2b02      	cmp	r3, #2
 8000852:	d158      	bne.n	8000906 <ModbusProcess+0x18e>
			for (uint8_t i = 0 ; i< 16 ; i++){
 8000854:	2300      	movs	r3, #0
 8000856:	71fb      	strb	r3, [r7, #7]
 8000858:	e04d      	b.n	80008f6 <ModbusProcess+0x17e>
						HAL_SPI_TransmitReceive(&hspi1, sFrameRx.u8BuffRead,spi_data,sizeof(spi_data), HAL_MAX_DELAY);
 800085a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000864:	4a2c      	ldr	r2, [pc, #176]	@ (8000918 <ModbusProcess+0x1a0>)
 8000866:	492a      	ldr	r1, [pc, #168]	@ (8000910 <ModbusProcess+0x198>)
 8000868:	482c      	ldr	r0, [pc, #176]	@ (800091c <ModbusProcess+0x1a4>)
 800086a:	f005 f8e1 	bl	8005a30 <HAL_SPI_TransmitReceive>
						HAL_Delay(10);
 800086e:	200a      	movs	r0, #10
 8000870:	f000 fc34 	bl	80010dc <HAL_Delay>
						HAL_SPI_TransmitReceive(&hspi1,uart_data,spi_data,sizeof(uart_data), HAL_MAX_DELAY);
 8000874:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800087e:	4a26      	ldr	r2, [pc, #152]	@ (8000918 <ModbusProcess+0x1a0>)
 8000880:	4927      	ldr	r1, [pc, #156]	@ (8000920 <ModbusProcess+0x1a8>)
 8000882:	4826      	ldr	r0, [pc, #152]	@ (800091c <ModbusProcess+0x1a4>)
 8000884:	f005 f8d4 	bl	8005a30 <HAL_SPI_TransmitReceive>
						HAL_UART_Transmit(&huart3, spi_data, sizeof(spi_data), HAL_MAX_DELAY);
 8000888:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800088c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000890:	4921      	ldr	r1, [pc, #132]	@ (8000918 <ModbusProcess+0x1a0>)
 8000892:	4824      	ldr	r0, [pc, #144]	@ (8000924 <ModbusProcess+0x1ac>)
 8000894:	f005 fca0 	bl	80061d8 <HAL_UART_Transmit>
						sFrameRx.u8BuffRead[2]++;
 8000898:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <ModbusProcess+0x198>)
 800089a:	789b      	ldrb	r3, [r3, #2]
 800089c:	3301      	adds	r3, #1
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <ModbusProcess+0x198>)
 80008a2:	709a      	strb	r2, [r3, #2]
						for(int j =0; j < 6; j++)
 80008a4:	2300      	movs	r3, #0
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	e00b      	b.n	80008c2 <ModbusProcess+0x14a>
							Header[j] = sFrameRx.u8BuffRead[j];
 80008aa:	4a19      	ldr	r2, [pc, #100]	@ (8000910 <ModbusProcess+0x198>)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	7819      	ldrb	r1, [r3, #0]
 80008b2:	4a1d      	ldr	r2, [pc, #116]	@ (8000928 <ModbusProcess+0x1b0>)
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	460a      	mov	r2, r1
 80008ba:	701a      	strb	r2, [r3, #0]
						for(int j =0; j < 6; j++)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	3301      	adds	r3, #1
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	2b05      	cmp	r3, #5
 80008c6:	ddf0      	ble.n	80008aa <ModbusProcess+0x132>
						checkCRC16_header=crc16_arc(Header, 6);
 80008c8:	2106      	movs	r1, #6
 80008ca:	4817      	ldr	r0, [pc, #92]	@ (8000928 <ModbusProcess+0x1b0>)
 80008cc:	f7ff fe94 	bl	80005f8 <crc16_arc>
 80008d0:	4603      	mov	r3, r0
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b15      	ldr	r3, [pc, #84]	@ (800092c <ModbusProcess+0x1b4>)
 80008d6:	801a      	strh	r2, [r3, #0]
						sFrameRx.u8BuffRead[6]=(uint8_t)(checkCRC16_header >> 8);
 80008d8:	4b14      	ldr	r3, [pc, #80]	@ (800092c <ModbusProcess+0x1b4>)
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	b29b      	uxth	r3, r3
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <ModbusProcess+0x198>)
 80008e4:	719a      	strb	r2, [r3, #6]
						sFrameRx.u8BuffRead[7]=(uint8_t)(checkCRC16_header);
 80008e6:	4b11      	ldr	r3, [pc, #68]	@ (800092c <ModbusProcess+0x1b4>)
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <ModbusProcess+0x198>)
 80008ee:	71da      	strb	r2, [r3, #7]
			for (uint8_t i = 0 ; i< 16 ; i++){
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	3301      	adds	r3, #1
 80008f4:	71fb      	strb	r3, [r7, #7]
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b0f      	cmp	r3, #15
 80008fa:	d9ae      	bls.n	800085a <ModbusProcess+0xe2>
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2102      	movs	r1, #2
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <ModbusProcess+0x19c>)
 8000902:	f000 ff4f 	bl	80017a4 <HAL_GPIO_WritePin>
}
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000028 	.word	0x20000028
 8000914:	42020800 	.word	0x42020800
 8000918:	20000364 	.word	0x20000364
 800091c:	20000240 	.word	0x20000240
 8000920:	2000046c 	.word	0x2000046c
 8000924:	200002d0 	.word	0x200002d0
 8000928:	20000464 	.word	0x20000464
 800092c:	2000056c 	.word	0x2000056c

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000934:	f000 fb0c 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000938:	f000 f809 	bl	800094e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093c:	f000 f924 	bl	8000b88 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000940:	f000 f866 	bl	8000a10 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000944:	f000 f8d4 	bl	8000af0 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  RS485Process();
 8000948:	f7ff feaa 	bl	80006a0 <RS485Process>
 800094c:	e7fc      	b.n	8000948 <main+0x18>

0800094e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b09e      	sub	sp, #120	@ 0x78
 8000952:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000954:	f107 0318 	add.w	r3, r7, #24
 8000958:	2260      	movs	r2, #96	@ 0x60
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f006 f99d 	bl	8006c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000962:	463b      	mov	r3, r7
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
 8000970:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000972:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000976:	f000 ff2d 	bl	80017d4 <HAL_PWREx_ControlVoltageScaling>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000980:	f000 f962 	bl	8000c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI|RCC_OSCILLATORTYPE_MSIK;
 8000984:	2350      	movs	r3, #80	@ 0x50
 8000986:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000988:	2301      	movs	r3, #1
 800098a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800098c:	2310      	movs	r3, #16
 800098e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000990:	2300      	movs	r3, #0
 8000992:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSIKClockRange = RCC_MSIKRANGE_4;
 8000994:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000998:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIKState = RCC_MSIK_ON;
 800099a:	2310      	movs	r3, #16
 800099c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099e:	2302      	movs	r3, #2
 80009a0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009a2:	2301      	movs	r3, #1
 80009a4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80009a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80009ac:	2303      	movs	r3, #3
 80009ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009b0:	230a      	movs	r3, #10
 80009b2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80009bc:	2301      	movs	r3, #1
 80009be:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80009c0:	230c      	movs	r3, #12
 80009c2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c8:	f107 0318 	add.w	r3, r7, #24
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 ff8d 	bl	80018ec <HAL_RCC_OscConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80009d8:	f000 f936 	bl	8000c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009dc:	231f      	movs	r3, #31
 80009de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e0:	2303      	movs	r3, #3
 80009e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	2104      	movs	r1, #4
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 fe53 	bl	80026a4 <HAL_RCC_ClockConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000a04:	f000 f920 	bl	8000c48 <Error_Handler>
  }
}
 8000a08:	bf00      	nop
 8000a0a:	3778      	adds	r7, #120	@ 0x78
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a20:	4b31      	ldr	r3, [pc, #196]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000a22:	4a32      	ldr	r2, [pc, #200]	@ (8000aec <MX_SPI1_Init+0xdc>)
 8000a24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a26:	4b30      	ldr	r3, [pc, #192]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000a28:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000a2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a34:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000a36:	2207      	movs	r2, #7
 8000a38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a40:	4b29      	ldr	r3, [pc, #164]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a46:	4b28      	ldr	r3, [pc, #160]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000a48:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000a4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000a50:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8000a54:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a56:	4b24      	ldr	r3, [pc, #144]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a5c:	4b22      	ldr	r3, [pc, #136]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a62:	4b21      	ldr	r3, [pc, #132]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000a68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000a6a:	2207      	movs	r2, #7
 8000a6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000a70:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a74:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a82:	4b19      	ldr	r3, [pc, #100]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a88:	4b17      	ldr	r3, [pc, #92]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a94:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aac:	480e      	ldr	r0, [pc, #56]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000aae:	f004 fea9 	bl	8005804 <HAL_SPI_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 8000ab8:	f000 f8c6 	bl	8000c48 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000ac0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ac4:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	@ (8000ae8 <MX_SPI1_Init+0xd8>)
 8000ad0:	f005 faf1 	bl	80060b6 <HAL_SPIEx_SetConfigAutonomousMode>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 8000ada:	f000 f8b5 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000240 	.word	0x20000240
 8000aec:	40013000 	.word	0x40013000

08000af0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000af4:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000af6:	4a23      	ldr	r2, [pc, #140]	@ (8000b84 <MX_USART3_UART_Init+0x94>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000afa:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b1f      	ldr	r3, [pc, #124]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b26:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b38:	4811      	ldr	r0, [pc, #68]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b3a:	f005 fafd 	bl	8006138 <HAL_UART_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b44:	f000 f880 	bl	8000c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	480d      	ldr	r0, [pc, #52]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b4c:	f005 ffdc 	bl	8006b08 <HAL_UARTEx_SetTxFifoThreshold>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b56:	f000 f877 	bl	8000c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4808      	ldr	r0, [pc, #32]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b5e:	f006 f811 	bl	8006b84 <HAL_UARTEx_SetRxFifoThreshold>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b68:	f000 f86e 	bl	8000c48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b6e:	f005 ff92 	bl	8006a96 <HAL_UARTEx_DisableFifoMode>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b78:	f000 f866 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200002d0 	.word	0x200002d0
 8000b84:	40004800 	.word	0x40004800

08000b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	4b28      	ldr	r3, [pc, #160]	@ (8000c40 <MX_GPIO_Init+0xb8>)
 8000ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ba4:	4a26      	ldr	r2, [pc, #152]	@ (8000c40 <MX_GPIO_Init+0xb8>)
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bae:	4b24      	ldr	r3, [pc, #144]	@ (8000c40 <MX_GPIO_Init+0xb8>)
 8000bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bbc:	4b20      	ldr	r3, [pc, #128]	@ (8000c40 <MX_GPIO_Init+0xb8>)
 8000bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8000c40 <MX_GPIO_Init+0xb8>)
 8000bc4:	f043 0310 	orr.w	r3, r3, #16
 8000bc8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c40 <MX_GPIO_Init+0xb8>)
 8000bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bd2:	f003 0310 	and.w	r3, r3, #16
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bda:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <MX_GPIO_Init+0xb8>)
 8000bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000be0:	4a17      	ldr	r2, [pc, #92]	@ (8000c40 <MX_GPIO_Init+0xb8>)
 8000be2:	f043 0308 	orr.w	r3, r3, #8
 8000be6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bea:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <MX_GPIO_Init+0xb8>)
 8000bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bf0:	f003 0308 	and.w	r3, r3, #8
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	4811      	ldr	r0, [pc, #68]	@ (8000c44 <MX_GPIO_Init+0xbc>)
 8000bfe:	f000 fdd1 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000c02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	4619      	mov	r1, r3
 8000c16:	480b      	ldr	r0, [pc, #44]	@ (8000c44 <MX_GPIO_Init+0xbc>)
 8000c18:	f000 fbec 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	4619      	mov	r1, r3
 8000c32:	4804      	ldr	r0, [pc, #16]	@ (8000c44 <MX_GPIO_Init+0xbc>)
 8000c34:	f000 fbde 	bl	80013f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c38:	bf00      	nop
 8000c3a:	3720      	adds	r7, #32
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	46020c00 	.word	0x46020c00
 8000c44:	42020800 	.word	0x42020800

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <Error_Handler+0x8>

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <HAL_MspInit+0x30>)
 8000c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c60:	4a08      	ldr	r2, [pc, #32]	@ (8000c84 <HAL_MspInit+0x30>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_MspInit+0x30>)
 8000c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	46020c00 	.word	0x46020c00

08000c88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b0bc      	sub	sp, #240	@ 0xf0
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	22c8      	movs	r2, #200	@ 0xc8
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f005 fff7 	bl	8006c9c <memset>
  if(hspi->Instance==SPI1)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a27      	ldr	r2, [pc, #156]	@ (8000d50 <HAL_SPI_MspInit+0xc8>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d147      	bne.n	8000d48 <HAL_SPI_MspInit+0xc0>
  /* USER CODE BEGIN SPI1_MspInit 0 */
  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000cb8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_MSIK;
 8000cc4:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8000cc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f002 f8b7 	bl	8002e44 <HAL_RCCEx_PeriphCLKConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8000cdc:	f7ff ffb4 	bl	8000c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <HAL_SPI_MspInit+0xcc>)
 8000ce2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ce6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d54 <HAL_SPI_MspInit+0xcc>)
 8000ce8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cec:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000cf0:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <HAL_SPI_MspInit+0xcc>)
 8000cf2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000cf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <HAL_SPI_MspInit+0xcc>)
 8000d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d04:	4a13      	ldr	r2, [pc, #76]	@ (8000d54 <HAL_SPI_MspInit+0xcc>)
 8000d06:	f043 0310 	orr.w	r3, r3, #16
 8000d0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d0e:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <HAL_SPI_MspInit+0xcc>)
 8000d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d14:	f003 0310 	and.w	r3, r3, #16
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
    PE14     ------> SPI1_MISO
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    PE12     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12;
 8000d1c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000d20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d36:	2305      	movs	r3, #5
 8000d38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d3c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d40:	4619      	mov	r1, r3
 8000d42:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <HAL_SPI_MspInit+0xd0>)
 8000d44:	f000 fb56 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d48:	bf00      	nop
 8000d4a:	37f0      	adds	r7, #240	@ 0xf0
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40013000 	.word	0x40013000
 8000d54:	46020c00 	.word	0x46020c00
 8000d58:	42021000 	.word	0x42021000

08000d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0bc      	sub	sp, #240	@ 0xf0
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	22c8      	movs	r2, #200	@ 0xc8
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f005 ff8d 	bl	8006c9c <memset>
  if(huart->Instance==USART3)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a26      	ldr	r2, [pc, #152]	@ (8000e20 <HAL_UART_MspInit+0xc4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d145      	bne.n	8000e18 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d8c:	f04f 0204 	mov.w	r2, #4
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4618      	mov	r0, r3
 8000da2:	f002 f84f 	bl	8002e44 <HAL_RCCEx_PeriphCLKConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000dac:	f7ff ff4c 	bl	8000c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000db0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <HAL_UART_MspInit+0xc8>)
 8000db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000db6:	4a1b      	ldr	r2, [pc, #108]	@ (8000e24 <HAL_UART_MspInit+0xc8>)
 8000db8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dbc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000dc0:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <HAL_UART_MspInit+0xc8>)
 8000dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <HAL_UART_MspInit+0xc8>)
 8000dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dd4:	4a13      	ldr	r2, [pc, #76]	@ (8000e24 <HAL_UART_MspInit+0xc8>)
 8000dd6:	f043 0308 	orr.w	r3, r3, #8
 8000dda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <HAL_UART_MspInit+0xc8>)
 8000de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000de4:	f003 0308 	and.w	r3, r3, #8
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000df0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e06:	2307      	movs	r3, #7
 8000e08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e0c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e10:	4619      	mov	r1, r3
 8000e12:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <HAL_UART_MspInit+0xcc>)
 8000e14:	f000 faee 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e18:	bf00      	nop
 8000e1a:	37f0      	adds	r7, #240	@ 0xf0
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40004800 	.word	0x40004800
 8000e24:	46020c00 	.word	0x46020c00
 8000e28:	42020c00 	.word	0x42020c00

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <NMI_Handler+0x4>

08000e34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <HardFault_Handler+0x4>

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <MemManage_Handler+0x4>

08000e44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e82:	f000 f90b 	bl	800109c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <SystemInit+0x68>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e96:	4a17      	ldr	r2, [pc, #92]	@ (8000ef4 <SystemInit+0x68>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000ea0:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <SystemInit+0x6c>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000ea6:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <SystemInit+0x6c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <SystemInit+0x6c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <SystemInit+0x6c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <SystemInit+0x6c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef8 <SystemInit+0x6c>)
 8000ebe:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000ec2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000ec6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <SystemInit+0x6c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000ece:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <SystemInit+0x6c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a09      	ldr	r2, [pc, #36]	@ (8000ef8 <SystemInit+0x6c>)
 8000ed4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ed8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000eda:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <SystemInit+0x6c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ee0:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <SystemInit+0x68>)
 8000ee2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ee6:	609a      	str	r2, [r3, #8]
  #endif
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00
 8000ef8:	46020c00 	.word	0x46020c00

08000efc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f34 <LoopForever+0x2>
/* Call the clock system initialization function.*/  bl  SystemInit
 8000f00:	f7ff ffc4 	bl	8000e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f06:	e003      	b.n	8000f10 <LoopCopyDataInit>

08000f08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f08:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f0e:	3104      	adds	r1, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f10:	480a      	ldr	r0, [pc, #40]	@ (8000f3c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f12:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f18:	d3f6      	bcc.n	8000f08 <CopyDataInit>
	ldr	r2, =_sbss
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f1c:	e002      	b.n	8000f24 <LoopFillZerobss>

08000f1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f20:	f842 3b04 	str.w	r3, [r2], #4

08000f24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <LoopForever+0x16>)
	cmp	r2, r3
 8000f26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f28:	d3f9      	bcc.n	8000f1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f005 febf 	bl	8006cac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f2e:	f7ff fcff 	bl	8000930 <main>

08000f32 <LoopForever>:

LoopForever:
    b LoopForever
 8000f32:	e7fe      	b.n	8000f32 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000f34:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000f38:	08006e1c 	.word	0x08006e1c
	ldr	r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f40:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000f44:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000f48:	20000574 	.word	0x20000574

08000f4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC1_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <HAL_Init+0x50>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a11      	ldr	r2, [pc, #68]	@ (8000fa0 <HAL_Init+0x50>)
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 f96e 	bl	8001242 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000f66:	f001 fd8f 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <HAL_Init+0x54>)
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	f003 030f 	and.w	r3, r3, #15
 8000f74:	490c      	ldr	r1, [pc, #48]	@ (8000fa8 <HAL_Init+0x58>)
 8000f76:	5ccb      	ldrb	r3, [r1, r3]
 8000f78:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fac <HAL_Init+0x5c>)
 8000f7e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000f80:	2004      	movs	r0, #4
 8000f82:	f000 f9a5 	bl	80012d0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f86:	200f      	movs	r0, #15
 8000f88:	f000 f812 	bl	8000fb0 <HAL_InitTick>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e002      	b.n	8000f9c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f96:	f7ff fe5d 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40022000 	.word	0x40022000
 8000fa4:	46020c00 	.word	0x46020c00
 8000fa8:	08006d0c 	.word	0x08006d0c
 8000fac:	20000000 	.word	0x20000000

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000fbc:	4b33      	ldr	r3, [pc, #204]	@ (800108c <HAL_InitTick+0xdc>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e05c      	b.n	8001082 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000fc8:	4b31      	ldr	r3, [pc, #196]	@ (8001090 <HAL_InitTick+0xe0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	2b04      	cmp	r3, #4
 8000fd2:	d10c      	bne.n	8000fee <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001094 <HAL_InitTick+0xe4>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800108c <HAL_InitTick+0xdc>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	e037      	b.n	800105e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000fee:	f000 f9c7 	bl	8001380 <HAL_SYSTICK_GetCLKSourceConfig>
 8000ff2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d023      	beq.n	8001042 <HAL_InitTick+0x92>
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d82d      	bhi.n	800105c <HAL_InitTick+0xac>
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_InitTick+0x5e>
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d00d      	beq.n	8001028 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800100c:	e026      	b.n	800105c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800100e:	4b21      	ldr	r3, [pc, #132]	@ (8001094 <HAL_InitTick+0xe4>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <HAL_InitTick+0xdc>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	4619      	mov	r1, r3
 8001018:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800101c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001020:	fbb2 f3f3 	udiv	r3, r2, r3
 8001024:	60fb      	str	r3, [r7, #12]
        break;
 8001026:	e01a      	b.n	800105e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001028:	4b18      	ldr	r3, [pc, #96]	@ (800108c <HAL_InitTick+0xdc>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001032:	fbb3 f3f2 	udiv	r3, r3, r2
 8001036:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	60fb      	str	r3, [r7, #12]
        break;
 8001040:	e00d      	b.n	800105e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001042:	4b12      	ldr	r3, [pc, #72]	@ (800108c <HAL_InitTick+0xdc>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001050:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001054:	fbb2 f3f3 	udiv	r3, r2, r3
 8001058:	60fb      	str	r3, [r7, #12]
        break;
 800105a:	e000      	b.n	800105e <HAL_InitTick+0xae>
        break;
 800105c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f000 f914 	bl	800128c <HAL_SYSTICK_Config>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e009      	b.n	8001082 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106e:	2200      	movs	r2, #0
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001076:	f000 f8ef 	bl	8001258 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800107a:	4a07      	ldr	r2, [pc, #28]	@ (8001098 <HAL_InitTick+0xe8>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000008 	.word	0x20000008
 8001090:	e000e010 	.word	0xe000e010
 8001094:	20000000 	.word	0x20000000
 8001098:	20000004 	.word	0x20000004

0800109c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	@ (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20000570 	.word	0x20000570

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	@ (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000570 	.word	0x20000570

080010dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff ffee 	bl	80010c4 <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010f4:	d005      	beq.n	8001102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <HAL_Delay+0x44>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001102:	bf00      	nop
 8001104:	f7ff ffde 	bl	80010c4 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d8f7      	bhi.n	8001104 <HAL_Delay+0x28>
  {
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800114c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	@ (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	@ (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	@ 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	@ 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ff6a 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001266:	f7ff ff81 	bl	800116c <__NVIC_GetPriorityGrouping>
 800126a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	68b9      	ldr	r1, [r7, #8]
 8001270:	6978      	ldr	r0, [r7, #20]
 8001272:	f7ff ffb3 	bl	80011dc <NVIC_EncodePriority>
 8001276:	4602      	mov	r2, r0
 8001278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127c:	4611      	mov	r1, r2
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff82 	bl	8001188 <__NVIC_SetPriority>
}
 8001284:	bf00      	nop
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800129c:	d301      	bcc.n	80012a2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800129e:	2301      	movs	r3, #1
 80012a0:	e00d      	b.n	80012be <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80012a2:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <HAL_SYSTICK_Config+0x40>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80012aa:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <HAL_SYSTICK_Config+0x40>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <HAL_SYSTICK_Config+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a05      	ldr	r2, [pc, #20]	@ (80012cc <HAL_SYSTICK_Config+0x40>)
 80012b6:	f043 0303 	orr.w	r3, r3, #3
 80012ba:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e010 	.word	0xe000e010

080012d0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d844      	bhi.n	8001368 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80012de:	a201      	add	r2, pc, #4	@ (adr r2, 80012e4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80012e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e4:	08001307 	.word	0x08001307
 80012e8:	08001325 	.word	0x08001325
 80012ec:	08001347 	.word	0x08001347
 80012f0:	08001369 	.word	0x08001369
 80012f4:	080012f9 	.word	0x080012f9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80012f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001378 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	6013      	str	r3, [r2, #0]
      break;
 8001304:	e031      	b.n	800136a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001306:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a1b      	ldr	r2, [pc, #108]	@ (8001378 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800130c:	f023 0304 	bic.w	r3, r3, #4
 8001310:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001312:	4b1a      	ldr	r3, [pc, #104]	@ (800137c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001318:	4a18      	ldr	r2, [pc, #96]	@ (800137c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800131a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800131e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001322:	e022      	b.n	800136a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001324:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a13      	ldr	r2, [pc, #76]	@ (8001378 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800132a:	f023 0304 	bic.w	r3, r3, #4
 800132e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001336:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800133a:	4a10      	ldr	r2, [pc, #64]	@ (800137c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800133c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001340:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001344:	e011      	b.n	800136a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001346:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a0b      	ldr	r2, [pc, #44]	@ (8001378 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800134c:	f023 0304 	bic.w	r3, r3, #4
 8001350:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001358:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800135c:	4a07      	ldr	r2, [pc, #28]	@ (800137c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800135e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001362:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001366:	e000      	b.n	800136a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001368:	bf00      	nop
  }
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000e010 	.word	0xe000e010
 800137c:	46020c00 	.word	0x46020c00

08001380 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001386:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	2b00      	cmp	r3, #0
 8001390:	d002      	beq.n	8001398 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001392:	2304      	movs	r3, #4
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	e021      	b.n	80013dc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001398:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80013a2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80013aa:	d011      	beq.n	80013d0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80013b2:	d810      	bhi.n	80013d6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d004      	beq.n	80013c4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013c0:	d003      	beq.n	80013ca <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80013c2:	e008      	b.n	80013d6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80013c4:	2300      	movs	r3, #0
 80013c6:	607b      	str	r3, [r7, #4]
        break;
 80013c8:	e008      	b.n	80013dc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80013ca:	2301      	movs	r3, #1
 80013cc:	607b      	str	r3, [r7, #4]
        break;
 80013ce:	e005      	b.n	80013dc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80013d0:	2302      	movs	r3, #2
 80013d2:	607b      	str	r3, [r7, #4]
        break;
 80013d4:	e002      	b.n	80013dc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
        break;
 80013da:	bf00      	nop
    }
  }
  return systick_source;
 80013dc:	687b      	ldr	r3, [r7, #4]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010
 80013f0:	46020c00 	.word	0x46020c00

080013f4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	@ 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001406:	e1ba      	b.n	800177e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2101      	movs	r1, #1
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	fa01 f303 	lsl.w	r3, r1, r3
 8001414:	4013      	ands	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 81aa 	beq.w	8001778 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a55      	ldr	r2, [pc, #340]	@ (800157c <HAL_GPIO_Init+0x188>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d15d      	bne.n	80014e8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001432:	2201      	movs	r2, #1
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	69fa      	ldr	r2, [r7, #28]
 800143e:	4013      	ands	r3, r2
 8001440:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0201 	and.w	r2, r3, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69fa      	ldr	r2, [r7, #28]
 8001452:	4313      	orrs	r3, r2
 8001454:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69fa      	ldr	r2, [r7, #28]
 800145a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800145c:	4a48      	ldr	r2, [pc, #288]	@ (8001580 <HAL_GPIO_Init+0x18c>)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001464:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001466:	4a46      	ldr	r2, [pc, #280]	@ (8001580 <HAL_GPIO_Init+0x18c>)
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4413      	add	r3, r2
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	08da      	lsrs	r2, r3, #3
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	3208      	adds	r2, #8
 800147a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	220f      	movs	r2, #15
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	69fa      	ldr	r2, [r7, #28]
 8001492:	4013      	ands	r3, r2
 8001494:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	220b      	movs	r2, #11
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	69fa      	ldr	r2, [r7, #28]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	08da      	lsrs	r2, r3, #3
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	3208      	adds	r2, #8
 80014b2:	69f9      	ldr	r1, [r7, #28]
 80014b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	2202      	movs	r2, #2
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	69fa      	ldr	r2, [r7, #28]
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	e067      	b.n	80015b8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x104>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b12      	cmp	r3, #18
 80014f6:	d145      	bne.n	8001584 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	08da      	lsrs	r2, r3, #3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3208      	adds	r2, #8
 8001500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001504:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	220f      	movs	r2, #15
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	4013      	ands	r3, r2
 800151a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	f003 020f 	and.w	r2, r3, #15
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69fa      	ldr	r2, [r7, #28]
 8001532:	4313      	orrs	r3, r2
 8001534:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	08da      	lsrs	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3208      	adds	r2, #8
 800153e:	69f9      	ldr	r1, [r7, #28]
 8001540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	2203      	movs	r2, #3
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	4013      	ands	r3, r2
 800155a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0203 	and.w	r2, r3, #3
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	4313      	orrs	r3, r2
 8001570:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e01e      	b.n	80015b8 <HAL_GPIO_Init+0x1c4>
 800157a:	bf00      	nop
 800157c:	46020000 	.word	0x46020000
 8001580:	08006d64 	.word	0x08006d64
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69fa      	ldr	r2, [r7, #28]
 8001598:	4013      	ands	r3, r2
 800159a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0203 	and.w	r2, r3, #3
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	69fa      	ldr	r2, [r7, #28]
 80015b6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d00b      	beq.n	80015d8 <HAL_GPIO_Init+0x1e4>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d007      	beq.n	80015d8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015cc:	2b11      	cmp	r3, #17
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b12      	cmp	r3, #18
 80015d6:	d130      	bne.n	800163a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69fa      	ldr	r2, [r7, #28]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	69fa      	ldr	r2, [r7, #28]
 8001606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800160e:	2201      	movs	r2, #1
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	69fa      	ldr	r2, [r7, #28]
 800161a:	4013      	ands	r3, r2
 800161c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	f003 0201 	and.w	r2, r3, #1
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	4313      	orrs	r3, r2
 8001632:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b03      	cmp	r3, #3
 8001640:	d017      	beq.n	8001672 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	2203      	movs	r2, #3
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	69fa      	ldr	r2, [r7, #28]
 8001656:	4013      	ands	r3, r2
 8001658:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	4313      	orrs	r3, r2
 800166a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d07c      	beq.n	8001778 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800167e:	4a47      	ldr	r2, [pc, #284]	@ (800179c <HAL_GPIO_Init+0x3a8>)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	089b      	lsrs	r3, r3, #2
 8001684:	3318      	adds	r3, #24
 8001686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	220f      	movs	r2, #15
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	4013      	ands	r3, r2
 80016a0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	0a9a      	lsrs	r2, r3, #10
 80016a6:	4b3e      	ldr	r3, [pc, #248]	@ (80017a0 <HAL_GPIO_Init+0x3ac>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	f002 0203 	and.w	r2, r2, #3
 80016b0:	00d2      	lsls	r2, r2, #3
 80016b2:	4093      	lsls	r3, r2
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80016ba:	4938      	ldr	r1, [pc, #224]	@ (800179c <HAL_GPIO_Init+0x3a8>)
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	3318      	adds	r3, #24
 80016c2:	69fa      	ldr	r2, [r7, #28]
 80016c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80016c8:	4b34      	ldr	r3, [pc, #208]	@ (800179c <HAL_GPIO_Init+0x3a8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80016ec:	4a2b      	ldr	r2, [pc, #172]	@ (800179c <HAL_GPIO_Init+0x3a8>)
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80016f2:	4b2a      	ldr	r3, [pc, #168]	@ (800179c <HAL_GPIO_Init+0x3a8>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	4013      	ands	r3, r2
 8001700:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001716:	4a21      	ldr	r2, [pc, #132]	@ (800179c <HAL_GPIO_Init+0x3a8>)
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800171c:	4b1f      	ldr	r3, [pc, #124]	@ (800179c <HAL_GPIO_Init+0x3a8>)
 800171e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001722:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43db      	mvns	r3, r3
 8001728:	69fa      	ldr	r2, [r7, #28]
 800172a:	4013      	ands	r3, r2
 800172c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001742:	4a16      	ldr	r2, [pc, #88]	@ (800179c <HAL_GPIO_Init+0x3a8>)
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800174a:	4b14      	ldr	r3, [pc, #80]	@ (800179c <HAL_GPIO_Init+0x3a8>)
 800174c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001750:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	43db      	mvns	r3, r3
 8001756:	69fa      	ldr	r2, [r7, #28]
 8001758:	4013      	ands	r3, r2
 800175a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4313      	orrs	r3, r2
 800176e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001770:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <HAL_GPIO_Init+0x3a8>)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	3301      	adds	r3, #1
 800177c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	f47f ae3d 	bne.w	8001408 <HAL_GPIO_Init+0x14>
  }
}
 800178e:	bf00      	nop
 8001790:	bf00      	nop
 8001792:	3724      	adds	r7, #36	@ 0x24
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	46022000 	.word	0x46022000
 80017a0:	002f7f7f 	.word	0x002f7f7f

080017a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]
 80017b0:	4613      	mov	r3, r2
 80017b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017b4:	787b      	ldrb	r3, [r7, #1]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80017c0:	e002      	b.n	80017c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80017dc:	4b39      	ldr	r3, [pc, #228]	@ (80018c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80017de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017e4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d10b      	bne.n	8001806 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017f4:	d905      	bls.n	8001802 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80017f6:	4b33      	ldr	r3, [pc, #204]	@ (80018c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	4a32      	ldr	r2, [pc, #200]	@ (80018c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80017fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001800:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e057      	b.n	80018b6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800180c:	d90a      	bls.n	8001824 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800180e:	4b2d      	ldr	r3, [pc, #180]	@ (80018c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4313      	orrs	r3, r2
 800181a:	4a2a      	ldr	r2, [pc, #168]	@ (80018c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800181c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001820:	60d3      	str	r3, [r2, #12]
 8001822:	e007      	b.n	8001834 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001824:	4b27      	ldr	r3, [pc, #156]	@ (80018c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800182c:	4925      	ldr	r1, [pc, #148]	@ (80018c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4313      	orrs	r3, r2
 8001832:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001834:	4b24      	ldr	r3, [pc, #144]	@ (80018c8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a24      	ldr	r2, [pc, #144]	@ (80018cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	099b      	lsrs	r3, r3, #6
 8001840:	2232      	movs	r2, #50	@ 0x32
 8001842:	fb02 f303 	mul.w	r3, r2, r3
 8001846:	4a21      	ldr	r2, [pc, #132]	@ (80018cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001848:	fba2 2303 	umull	r2, r3, r2, r3
 800184c:	099b      	lsrs	r3, r3, #6
 800184e:	3301      	adds	r3, #1
 8001850:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001852:	e002      	b.n	800185a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3b01      	subs	r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800185a:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d102      	bne.n	800186c <HAL_PWREx_ControlVoltageScaling+0x98>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f3      	bne.n	8001854 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d01b      	beq.n	80018aa <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001872:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a15      	ldr	r2, [pc, #84]	@ (80018cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001878:	fba2 2303 	umull	r2, r3, r2, r3
 800187c:	099b      	lsrs	r3, r3, #6
 800187e:	2232      	movs	r2, #50	@ 0x32
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	4a11      	ldr	r2, [pc, #68]	@ (80018cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	099b      	lsrs	r3, r3, #6
 800188c:	3301      	adds	r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001890:	e002      	b.n	8001898 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	3b01      	subs	r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001898:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800189a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800189c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <HAL_PWREx_ControlVoltageScaling+0xd6>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f3      	bne.n	8001892 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e000      	b.n	80018b6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	46020800 	.word	0x46020800
 80018c8:	20000000 	.word	0x20000000
 80018cc:	10624dd3 	.word	0x10624dd3

080018d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80018d4:	4b04      	ldr	r3, [pc, #16]	@ (80018e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80018d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	46020800 	.word	0x46020800

080018ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08e      	sub	sp, #56	@ 0x38
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	f000 bec8 	b.w	8002696 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001906:	4b99      	ldr	r3, [pc, #612]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001910:	4b96      	ldr	r3, [pc, #600]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 816c 	beq.w	8001c00 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800192a:	2b00      	cmp	r3, #0
 800192c:	d007      	beq.n	800193e <HAL_RCC_OscConfig+0x52>
 800192e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001930:	2b0c      	cmp	r3, #12
 8001932:	f040 80de 	bne.w	8001af2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001938:	2b01      	cmp	r3, #1
 800193a:	f040 80da 	bne.w	8001af2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	f000 bea5 	b.w	8002696 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001950:	4b86      	ldr	r3, [pc, #536]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d004      	beq.n	8001966 <HAL_RCC_OscConfig+0x7a>
 800195c:	4b83      	ldr	r3, [pc, #524]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001964:	e005      	b.n	8001972 <HAL_RCC_OscConfig+0x86>
 8001966:	4b81      	ldr	r3, [pc, #516]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001968:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800196c:	041b      	lsls	r3, r3, #16
 800196e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001972:	4293      	cmp	r3, r2
 8001974:	d255      	bcs.n	8001a22 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10a      	bne.n	8001992 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001980:	4618      	mov	r0, r3
 8001982:	f001 f9d9 	bl	8002d38 <RCC_SetFlashLatencyFromMSIRange>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	f000 be82 	b.w	8002696 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001992:	4b76      	ldr	r3, [pc, #472]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	4a75      	ldr	r2, [pc, #468]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001998:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800199c:	6093      	str	r3, [r2, #8]
 800199e:	4b73      	ldr	r3, [pc, #460]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019aa:	4970      	ldr	r1, [pc, #448]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80019b8:	d309      	bcc.n	80019ce <HAL_RCC_OscConfig+0xe2>
 80019ba:	4b6c      	ldr	r3, [pc, #432]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f023 021f 	bic.w	r2, r3, #31
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	4969      	ldr	r1, [pc, #420]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60cb      	str	r3, [r1, #12]
 80019cc:	e07e      	b.n	8001acc <HAL_RCC_OscConfig+0x1e0>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	da0a      	bge.n	80019ec <HAL_RCC_OscConfig+0x100>
 80019d6:	4b65      	ldr	r3, [pc, #404]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	015b      	lsls	r3, r3, #5
 80019e4:	4961      	ldr	r1, [pc, #388]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	60cb      	str	r3, [r1, #12]
 80019ea:	e06f      	b.n	8001acc <HAL_RCC_OscConfig+0x1e0>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019f4:	d30a      	bcc.n	8001a0c <HAL_RCC_OscConfig+0x120>
 80019f6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	029b      	lsls	r3, r3, #10
 8001a04:	4959      	ldr	r1, [pc, #356]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	60cb      	str	r3, [r1, #12]
 8001a0a:	e05f      	b.n	8001acc <HAL_RCC_OscConfig+0x1e0>
 8001a0c:	4b57      	ldr	r3, [pc, #348]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	03db      	lsls	r3, r3, #15
 8001a1a:	4954      	ldr	r1, [pc, #336]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	60cb      	str	r3, [r1, #12]
 8001a20:	e054      	b.n	8001acc <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001a22:	4b52      	ldr	r3, [pc, #328]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	4a51      	ldr	r2, [pc, #324]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001a28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a2c:	6093      	str	r3, [r2, #8]
 8001a2e:	4b4f      	ldr	r3, [pc, #316]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3a:	494c      	ldr	r1, [pc, #304]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001a48:	d309      	bcc.n	8001a5e <HAL_RCC_OscConfig+0x172>
 8001a4a:	4b48      	ldr	r3, [pc, #288]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	f023 021f 	bic.w	r2, r3, #31
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	4945      	ldr	r1, [pc, #276]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	60cb      	str	r3, [r1, #12]
 8001a5c:	e028      	b.n	8001ab0 <HAL_RCC_OscConfig+0x1c4>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	da0a      	bge.n	8001a7c <HAL_RCC_OscConfig+0x190>
 8001a66:	4b41      	ldr	r3, [pc, #260]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	015b      	lsls	r3, r3, #5
 8001a74:	493d      	ldr	r1, [pc, #244]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	60cb      	str	r3, [r1, #12]
 8001a7a:	e019      	b.n	8001ab0 <HAL_RCC_OscConfig+0x1c4>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a84:	d30a      	bcc.n	8001a9c <HAL_RCC_OscConfig+0x1b0>
 8001a86:	4b39      	ldr	r3, [pc, #228]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	029b      	lsls	r3, r3, #10
 8001a94:	4935      	ldr	r1, [pc, #212]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	60cb      	str	r3, [r1, #12]
 8001a9a:	e009      	b.n	8001ab0 <HAL_RCC_OscConfig+0x1c4>
 8001a9c:	4b33      	ldr	r3, [pc, #204]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	03db      	lsls	r3, r3, #15
 8001aaa:	4930      	ldr	r1, [pc, #192]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10a      	bne.n	8001acc <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aba:	4618      	mov	r0, r3
 8001abc:	f001 f93c 	bl	8002d38 <RCC_SetFlashLatencyFromMSIRange>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f000 bde5 	b.w	8002696 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001acc:	f001 f8de 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ad0:	4b27      	ldr	r3, [pc, #156]	@ (8001b70 <HAL_RCC_OscConfig+0x284>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fa6b 	bl	8000fb0 <HAL_InitTick>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8001ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 808a 	beq.w	8001bfe <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8001aea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001aee:	f000 bdd2 	b.w	8002696 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d066      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001afa:	4b1c      	ldr	r3, [pc, #112]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a1b      	ldr	r2, [pc, #108]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001b06:	f7ff fadd 	bl	80010c4 <HAL_GetTick>
 8001b0a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001b0c:	e009      	b.n	8001b22 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b0e:	f7ff fad9 	bl	80010c4 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d902      	bls.n	8001b22 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	f000 bdba 	b.w	8002696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001b22:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0ef      	beq.n	8001b0e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	4a0e      	ldr	r2, [pc, #56]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001b34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b38:	6093      	str	r3, [r2, #8]
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b46:	4909      	ldr	r1, [pc, #36]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b50:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001b54:	d30e      	bcc.n	8001b74 <HAL_RCC_OscConfig+0x288>
 8001b56:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f023 021f 	bic.w	r2, r3, #31
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	4902      	ldr	r1, [pc, #8]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	60cb      	str	r3, [r1, #12]
 8001b68:	e04a      	b.n	8001c00 <HAL_RCC_OscConfig+0x314>
 8001b6a:	bf00      	nop
 8001b6c:	46020c00 	.word	0x46020c00
 8001b70:	20000004 	.word	0x20000004
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	da0a      	bge.n	8001b92 <HAL_RCC_OscConfig+0x2a6>
 8001b7c:	4b98      	ldr	r3, [pc, #608]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	015b      	lsls	r3, r3, #5
 8001b8a:	4995      	ldr	r1, [pc, #596]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	60cb      	str	r3, [r1, #12]
 8001b90:	e036      	b.n	8001c00 <HAL_RCC_OscConfig+0x314>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b9a:	d30a      	bcc.n	8001bb2 <HAL_RCC_OscConfig+0x2c6>
 8001b9c:	4b90      	ldr	r3, [pc, #576]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	029b      	lsls	r3, r3, #10
 8001baa:	498d      	ldr	r1, [pc, #564]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	60cb      	str	r3, [r1, #12]
 8001bb0:	e026      	b.n	8001c00 <HAL_RCC_OscConfig+0x314>
 8001bb2:	4b8b      	ldr	r3, [pc, #556]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	03db      	lsls	r3, r3, #15
 8001bc0:	4987      	ldr	r1, [pc, #540]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	60cb      	str	r3, [r1, #12]
 8001bc6:	e01b      	b.n	8001c00 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001bc8:	4b85      	ldr	r3, [pc, #532]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a84      	ldr	r2, [pc, #528]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001bce:	f023 0301 	bic.w	r3, r3, #1
 8001bd2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001bd4:	f7ff fa76 	bl	80010c4 <HAL_GetTick>
 8001bd8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001bda:	e009      	b.n	8001bf0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bdc:	f7ff fa72 	bl	80010c4 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d902      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	f000 bd53 	b.w	8002696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001bf0:	4b7b      	ldr	r3, [pc, #492]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1ef      	bne.n	8001bdc <HAL_RCC_OscConfig+0x2f0>
 8001bfc:	e000      	b.n	8001c00 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001bfe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 808b 	beq.w	8001d24 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_OscConfig+0x334>
 8001c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c16:	2b0c      	cmp	r3, #12
 8001c18:	d109      	bne.n	8001c2e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d106      	bne.n	8001c2e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d17d      	bne.n	8001d24 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f000 bd34 	b.w	8002696 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c36:	d106      	bne.n	8001c46 <HAL_RCC_OscConfig+0x35a>
 8001c38:	4b69      	ldr	r3, [pc, #420]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a68      	ldr	r2, [pc, #416]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	e041      	b.n	8001cca <HAL_RCC_OscConfig+0x3de>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c4e:	d112      	bne.n	8001c76 <HAL_RCC_OscConfig+0x38a>
 8001c50:	4b63      	ldr	r3, [pc, #396]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a62      	ldr	r2, [pc, #392]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b60      	ldr	r3, [pc, #384]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a5f      	ldr	r2, [pc, #380]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b5d      	ldr	r3, [pc, #372]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a5c      	ldr	r2, [pc, #368]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	e029      	b.n	8001cca <HAL_RCC_OscConfig+0x3de>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001c7e:	d112      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x3ba>
 8001c80:	4b57      	ldr	r3, [pc, #348]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a56      	ldr	r2, [pc, #344]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b54      	ldr	r3, [pc, #336]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a53      	ldr	r2, [pc, #332]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b51      	ldr	r3, [pc, #324]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a50      	ldr	r2, [pc, #320]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	e011      	b.n	8001cca <HAL_RCC_OscConfig+0x3de>
 8001ca6:	4b4e      	ldr	r3, [pc, #312]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a4d      	ldr	r2, [pc, #308]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b4b      	ldr	r3, [pc, #300]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a4a      	ldr	r2, [pc, #296]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b48      	ldr	r3, [pc, #288]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a47      	ldr	r2, [pc, #284]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001cc8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d014      	beq.n	8001cfc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001cd2:	f7ff f9f7 	bl	80010c4 <HAL_GetTick>
 8001cd6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cd8:	e009      	b.n	8001cee <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cda:	f7ff f9f3 	bl	80010c4 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b64      	cmp	r3, #100	@ 0x64
 8001ce6:	d902      	bls.n	8001cee <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	f000 bcd4 	b.w	8002696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cee:	4b3c      	ldr	r3, [pc, #240]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0ef      	beq.n	8001cda <HAL_RCC_OscConfig+0x3ee>
 8001cfa:	e013      	b.n	8001d24 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001cfc:	f7ff f9e2 	bl	80010c4 <HAL_GetTick>
 8001d00:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d02:	e009      	b.n	8001d18 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d04:	f7ff f9de 	bl	80010c4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	@ 0x64
 8001d10:	d902      	bls.n	8001d18 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	f000 bcbf 	b.w	8002696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d18:	4b31      	ldr	r3, [pc, #196]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1ef      	bne.n	8001d04 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d05f      	beq.n	8001df0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d005      	beq.n	8001d42 <HAL_RCC_OscConfig+0x456>
 8001d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d38:	2b0c      	cmp	r3, #12
 8001d3a:	d114      	bne.n	8001d66 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d111      	bne.n	8001d66 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	f000 bca3 	b.w	8002696 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001d50:	4b23      	ldr	r3, [pc, #140]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	041b      	lsls	r3, r3, #16
 8001d5e:	4920      	ldr	r1, [pc, #128]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d64:	e044      	b.n	8001df0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d024      	beq.n	8001db8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a1b      	ldr	r2, [pc, #108]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d78:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001d7a:	f7ff f9a3 	bl	80010c4 <HAL_GetTick>
 8001d7e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d80:	e009      	b.n	8001d96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d82:	f7ff f99f 	bl	80010c4 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d902      	bls.n	8001d96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	f000 bc80 	b.w	8002696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d96:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0ef      	beq.n	8001d82 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001da2:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	041b      	lsls	r3, r3, #16
 8001db0:	490b      	ldr	r1, [pc, #44]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	610b      	str	r3, [r1, #16]
 8001db6:	e01b      	b.n	8001df0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001db8:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a08      	ldr	r2, [pc, #32]	@ (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dc2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001dc4:	f7ff f97e 	bl	80010c4 <HAL_GetTick>
 8001dc8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dcc:	f7ff f97a 	bl	80010c4 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d904      	bls.n	8001de4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	f000 bc5b 	b.w	8002696 <HAL_RCC_OscConfig+0xdaa>
 8001de0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de4:	4baf      	ldr	r3, [pc, #700]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1ed      	bne.n	8001dcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80c8 	beq.w	8001f8e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e04:	4ba7      	ldr	r3, [pc, #668]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d111      	bne.n	8001e36 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	4ba4      	ldr	r3, [pc, #656]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e18:	4aa2      	ldr	r2, [pc, #648]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001e22:	4ba0      	ldr	r3, [pc, #640]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001e30:	2301      	movs	r3, #1
 8001e32:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e36:	4b9c      	ldr	r3, [pc, #624]	@ (80020a8 <HAL_RCC_OscConfig+0x7bc>)
 8001e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d119      	bne.n	8001e76 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001e42:	4b99      	ldr	r3, [pc, #612]	@ (80020a8 <HAL_RCC_OscConfig+0x7bc>)
 8001e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e46:	4a98      	ldr	r2, [pc, #608]	@ (80020a8 <HAL_RCC_OscConfig+0x7bc>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4e:	f7ff f939 	bl	80010c4 <HAL_GetTick>
 8001e52:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e54:	e009      	b.n	8001e6a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e56:	f7ff f935 	bl	80010c4 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d902      	bls.n	8001e6a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	f000 bc16 	b.w	8002696 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e6a:	4b8f      	ldr	r3, [pc, #572]	@ (80020a8 <HAL_RCC_OscConfig+0x7bc>)
 8001e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0ef      	beq.n	8001e56 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d05f      	beq.n	8001f3e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001e7e:	4b89      	ldr	r3, [pc, #548]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e84:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699a      	ldr	r2, [r3, #24]
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d037      	beq.n	8001f04 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d006      	beq.n	8001eac <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e3f4      	b.n	8002696 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d01b      	beq.n	8001eee <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001eb6:	4b7b      	ldr	r3, [pc, #492]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001eb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ebc:	4a79      	ldr	r2, [pc, #484]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001ebe:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001ec2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8001ec6:	f7ff f8fd 	bl	80010c4 <HAL_GetTick>
 8001eca:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ece:	f7ff f8f9 	bl	80010c4 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b05      	cmp	r3, #5
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e3da      	b.n	8002696 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ee0:	4b70      	ldr	r3, [pc, #448]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001ee2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ee6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1ef      	bne.n	8001ece <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001eee:	4b6d      	ldr	r3, [pc, #436]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ef4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	4969      	ldr	r1, [pc, #420]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001f04:	4b67      	ldr	r3, [pc, #412]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f0a:	4a66      	ldr	r2, [pc, #408]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001f0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001f14:	f7ff f8d6 	bl	80010c4 <HAL_GetTick>
 8001f18:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1c:	f7ff f8d2 	bl	80010c4 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b05      	cmp	r3, #5
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e3b3      	b.n	8002696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001f2e:	4b5d      	ldr	r3, [pc, #372]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ef      	beq.n	8001f1c <HAL_RCC_OscConfig+0x630>
 8001f3c:	e01b      	b.n	8001f76 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001f3e:	4b59      	ldr	r3, [pc, #356]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f44:	4a57      	ldr	r2, [pc, #348]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001f46:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001f4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001f4e:	f7ff f8b9 	bl	80010c4 <HAL_GetTick>
 8001f52:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f56:	f7ff f8b5 	bl	80010c4 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b05      	cmp	r3, #5
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e396      	b.n	8002696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001f68:	4b4e      	ldr	r3, [pc, #312]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1ef      	bne.n	8001f56 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f76:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d107      	bne.n	8001f8e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7e:	4b49      	ldr	r3, [pc, #292]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f84:	4a47      	ldr	r2, [pc, #284]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001f86:	f023 0304 	bic.w	r3, r3, #4
 8001f8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8111 	beq.w	80021be <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa2:	4b40      	ldr	r3, [pc, #256]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d111      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb0:	4b3c      	ldr	r3, [pc, #240]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fb6:	4a3b      	ldr	r2, [pc, #236]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001fc0:	4b38      	ldr	r3, [pc, #224]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8001fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001fd4:	4b34      	ldr	r3, [pc, #208]	@ (80020a8 <HAL_RCC_OscConfig+0x7bc>)
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d118      	bne.n	8002012 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001fe0:	4b31      	ldr	r3, [pc, #196]	@ (80020a8 <HAL_RCC_OscConfig+0x7bc>)
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe4:	4a30      	ldr	r2, [pc, #192]	@ (80020a8 <HAL_RCC_OscConfig+0x7bc>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fec:	f7ff f86a 	bl	80010c4 <HAL_GetTick>
 8001ff0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff4:	f7ff f866 	bl	80010c4 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e347      	b.n	8002696 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002006:	4b28      	ldr	r3, [pc, #160]	@ (80020a8 <HAL_RCC_OscConfig+0x7bc>)
 8002008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d01f      	beq.n	800205e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	2b00      	cmp	r3, #0
 8002028:	d010      	beq.n	800204c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800202a:	4b1e      	ldr	r3, [pc, #120]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 800202c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002030:	4a1c      	ldr	r2, [pc, #112]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800203a:	4b1a      	ldr	r3, [pc, #104]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 800203c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002040:	4a18      	ldr	r2, [pc, #96]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800204a:	e018      	b.n	800207e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800204c:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 800204e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002052:	4a14      	ldr	r2, [pc, #80]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800205c:	e00f      	b.n	800207e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800205e:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8002060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002064:	4a0f      	ldr	r2, [pc, #60]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8002066:	f023 0301 	bic.w	r3, r3, #1
 800206a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800206e:	4b0d      	ldr	r3, [pc, #52]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8002070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002074:	4a0b      	ldr	r2, [pc, #44]	@ (80020a4 <HAL_RCC_OscConfig+0x7b8>)
 8002076:	f023 0304 	bic.w	r3, r3, #4
 800207a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d057      	beq.n	8002136 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002086:	f7ff f81d 	bl	80010c4 <HAL_GetTick>
 800208a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800208c:	e00e      	b.n	80020ac <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7ff f819 	bl	80010c4 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209c:	4293      	cmp	r3, r2
 800209e:	d905      	bls.n	80020ac <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e2f8      	b.n	8002696 <HAL_RCC_OscConfig+0xdaa>
 80020a4:	46020c00 	.word	0x46020c00
 80020a8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ac:	4b9c      	ldr	r3, [pc, #624]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 80020ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0e9      	beq.n	800208e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d01b      	beq.n	80020fe <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020c6:	4b96      	ldr	r3, [pc, #600]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 80020c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020cc:	4a94      	ldr	r2, [pc, #592]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 80020ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d8:	f7fe fff4 	bl	80010c4 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e2d3      	b.n	8002696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020ee:	4b8c      	ldr	r3, [pc, #560]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 80020f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0ed      	beq.n	80020d8 <HAL_RCC_OscConfig+0x7ec>
 80020fc:	e053      	b.n	80021a6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020fe:	4b88      	ldr	r3, [pc, #544]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 8002100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002104:	4a86      	ldr	r2, [pc, #536]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 8002106:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800210a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800210e:	e00a      	b.n	8002126 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002110:	f7fe ffd8 	bl	80010c4 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e2b7      	b.n	8002696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002126:	4b7e      	ldr	r3, [pc, #504]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 8002128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800212c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1ed      	bne.n	8002110 <HAL_RCC_OscConfig+0x824>
 8002134:	e037      	b.n	80021a6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002136:	f7fe ffc5 	bl	80010c4 <HAL_GetTick>
 800213a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800213c:	e00a      	b.n	8002154 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213e:	f7fe ffc1 	bl	80010c4 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214c:	4293      	cmp	r3, r2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e2a0      	b.n	8002696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002154:	4b72      	ldr	r3, [pc, #456]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 8002156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1ed      	bne.n	800213e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002162:	4b6f      	ldr	r3, [pc, #444]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 8002164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01a      	beq.n	80021a6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002170:	4b6b      	ldr	r3, [pc, #428]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 8002172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002176:	4a6a      	ldr	r2, [pc, #424]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 8002178:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800217c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002180:	e00a      	b.n	8002198 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002182:	f7fe ff9f 	bl	80010c4 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002190:	4293      	cmp	r3, r2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e27e      	b.n	8002696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002198:	4b61      	ldr	r3, [pc, #388]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 800219a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800219e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1ed      	bne.n	8002182 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021a6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 80021b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021b4:	4a5a      	ldr	r2, [pc, #360]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 80021b6:	f023 0304 	bic.w	r3, r3, #4
 80021ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d036      	beq.n	8002238 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d019      	beq.n	8002206 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80021d2:	4b53      	ldr	r3, [pc, #332]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a52      	ldr	r2, [pc, #328]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 80021d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021dc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80021de:	f7fe ff71 	bl	80010c4 <HAL_GetTick>
 80021e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021e6:	f7fe ff6d 	bl	80010c4 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e24e      	b.n	8002696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80021f8:	4b49      	ldr	r3, [pc, #292]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x8fa>
 8002204:	e018      	b.n	8002238 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002206:	4b46      	ldr	r3, [pc, #280]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a45      	ldr	r2, [pc, #276]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 800220c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002210:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002212:	f7fe ff57 	bl	80010c4 <HAL_GetTick>
 8002216:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800221a:	f7fe ff53 	bl	80010c4 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e234      	b.n	8002696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800222c:	4b3c      	ldr	r3, [pc, #240]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002240:	2b00      	cmp	r3, #0
 8002242:	d036      	beq.n	80022b2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002248:	2b00      	cmp	r3, #0
 800224a:	d019      	beq.n	8002280 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800224c:	4b34      	ldr	r3, [pc, #208]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a33      	ldr	r2, [pc, #204]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 8002252:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002256:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002258:	f7fe ff34 	bl	80010c4 <HAL_GetTick>
 800225c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002260:	f7fe ff30 	bl	80010c4 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e211      	b.n	8002696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002272:	4b2b      	ldr	r3, [pc, #172]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x974>
 800227e:	e018      	b.n	80022b2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002280:	4b27      	ldr	r3, [pc, #156]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a26      	ldr	r2, [pc, #152]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 8002286:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800228a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800228c:	f7fe ff1a 	bl	80010c4 <HAL_GetTick>
 8002290:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002294:	f7fe ff16 	bl	80010c4 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e1f7      	b.n	8002696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80022a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d07f      	beq.n	80023be <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d062      	beq.n	800238c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80022c6:	4b16      	ldr	r3, [pc, #88]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	4a15      	ldr	r2, [pc, #84]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 80022cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022d0:	6093      	str	r3, [r2, #8]
 80022d2:	4b13      	ldr	r3, [pc, #76]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022de:	4910      	ldr	r1, [pc, #64]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80022ec:	d309      	bcc.n	8002302 <HAL_RCC_OscConfig+0xa16>
 80022ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f023 021f 	bic.w	r2, r3, #31
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	4909      	ldr	r1, [pc, #36]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60cb      	str	r3, [r1, #12]
 8002300:	e02a      	b.n	8002358 <HAL_RCC_OscConfig+0xa6c>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002306:	2b00      	cmp	r3, #0
 8002308:	da0c      	bge.n	8002324 <HAL_RCC_OscConfig+0xa38>
 800230a:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	015b      	lsls	r3, r3, #5
 8002318:	4901      	ldr	r1, [pc, #4]	@ (8002320 <HAL_RCC_OscConfig+0xa34>)
 800231a:	4313      	orrs	r3, r2
 800231c:	60cb      	str	r3, [r1, #12]
 800231e:	e01b      	b.n	8002358 <HAL_RCC_OscConfig+0xa6c>
 8002320:	46020c00 	.word	0x46020c00
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800232c:	d30a      	bcc.n	8002344 <HAL_RCC_OscConfig+0xa58>
 800232e:	4ba1      	ldr	r3, [pc, #644]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	029b      	lsls	r3, r3, #10
 800233c:	499d      	ldr	r1, [pc, #628]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 800233e:	4313      	orrs	r3, r2
 8002340:	60cb      	str	r3, [r1, #12]
 8002342:	e009      	b.n	8002358 <HAL_RCC_OscConfig+0xa6c>
 8002344:	4b9b      	ldr	r3, [pc, #620]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	03db      	lsls	r3, r3, #15
 8002352:	4998      	ldr	r1, [pc, #608]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 8002354:	4313      	orrs	r3, r2
 8002356:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002358:	4b96      	ldr	r3, [pc, #600]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a95      	ldr	r2, [pc, #596]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 800235e:	f043 0310 	orr.w	r3, r3, #16
 8002362:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002364:	f7fe feae 	bl	80010c4 <HAL_GetTick>
 8002368:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800236c:	f7fe feaa 	bl	80010c4 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e18b      	b.n	8002696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800237e:	4b8d      	ldr	r3, [pc, #564]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0xa80>
 800238a:	e018      	b.n	80023be <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800238c:	4b89      	ldr	r3, [pc, #548]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a88      	ldr	r2, [pc, #544]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 8002392:	f023 0310 	bic.w	r3, r3, #16
 8002396:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002398:	f7fe fe94 	bl	80010c4 <HAL_GetTick>
 800239c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80023a0:	f7fe fe90 	bl	80010c4 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e171      	b.n	8002696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80023b2:	4b80      	ldr	r3, [pc, #512]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 8166 	beq.w	8002694 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ce:	4b79      	ldr	r3, [pc, #484]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b0c      	cmp	r3, #12
 80023d8:	f000 80f2 	beq.w	80025c0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	f040 80c5 	bne.w	8002570 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80023e6:	4b73      	ldr	r3, [pc, #460]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a72      	ldr	r2, [pc, #456]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 80023ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023f0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80023f2:	f7fe fe67 	bl	80010c4 <HAL_GetTick>
 80023f6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fa:	f7fe fe63 	bl	80010c4 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e144      	b.n	8002696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800240c:	4b69      	ldr	r3, [pc, #420]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f0      	bne.n	80023fa <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002418:	4b66      	ldr	r3, [pc, #408]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 800241a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b00      	cmp	r3, #0
 8002424:	d111      	bne.n	800244a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	4b63      	ldr	r3, [pc, #396]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 8002428:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800242c:	4a61      	ldr	r2, [pc, #388]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 800242e:	f043 0304 	orr.w	r3, r3, #4
 8002432:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002436:	4b5f      	ldr	r3, [pc, #380]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 8002438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002444:	2301      	movs	r3, #1
 8002446:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800244a:	4b5b      	ldr	r3, [pc, #364]	@ (80025b8 <HAL_RCC_OscConfig+0xccc>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002452:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002456:	d102      	bne.n	800245e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002458:	2301      	movs	r3, #1
 800245a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800245e:	4b56      	ldr	r3, [pc, #344]	@ (80025b8 <HAL_RCC_OscConfig+0xccc>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	4a55      	ldr	r2, [pc, #340]	@ (80025b8 <HAL_RCC_OscConfig+0xccc>)
 8002464:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002468:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800246a:	4b52      	ldr	r3, [pc, #328]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 800246c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002472:	f023 0303 	bic.w	r3, r3, #3
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800247e:	3a01      	subs	r2, #1
 8002480:	0212      	lsls	r2, r2, #8
 8002482:	4311      	orrs	r1, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002488:	430a      	orrs	r2, r1
 800248a:	494a      	ldr	r1, [pc, #296]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 800248c:	4313      	orrs	r3, r2
 800248e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002490:	4b48      	ldr	r3, [pc, #288]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 8002492:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002494:	4b49      	ldr	r3, [pc, #292]	@ (80025bc <HAL_RCC_OscConfig+0xcd0>)
 8002496:	4013      	ands	r3, r2
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800249c:	3a01      	subs	r2, #1
 800249e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80024a6:	3a01      	subs	r2, #1
 80024a8:	0252      	lsls	r2, r2, #9
 80024aa:	b292      	uxth	r2, r2
 80024ac:	4311      	orrs	r1, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024b2:	3a01      	subs	r2, #1
 80024b4:	0412      	lsls	r2, r2, #16
 80024b6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80024ba:	4311      	orrs	r1, r2
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80024c0:	3a01      	subs	r2, #1
 80024c2:	0612      	lsls	r2, r2, #24
 80024c4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80024c8:	430a      	orrs	r2, r1
 80024ca:	493a      	ldr	r1, [pc, #232]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80024d0:	4b38      	ldr	r3, [pc, #224]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 80024d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d4:	4a37      	ldr	r2, [pc, #220]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 80024d6:	f023 0310 	bic.w	r3, r3, #16
 80024da:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e0:	4a34      	ldr	r2, [pc, #208]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80024e6:	4b33      	ldr	r3, [pc, #204]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 80024e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ea:	4a32      	ldr	r2, [pc, #200]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 80024ec:	f043 0310 	orr.w	r3, r3, #16
 80024f0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80024f2:	4b30      	ldr	r3, [pc, #192]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 80024f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f6:	f023 020c 	bic.w	r2, r3, #12
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fe:	492d      	ldr	r1, [pc, #180]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 8002500:	4313      	orrs	r3, r2
 8002502:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002504:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800250c:	4b2a      	ldr	r3, [pc, #168]	@ (80025b8 <HAL_RCC_OscConfig+0xccc>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4a29      	ldr	r2, [pc, #164]	@ (80025b8 <HAL_RCC_OscConfig+0xccc>)
 8002512:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002516:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002518:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800251c:	2b01      	cmp	r3, #1
 800251e:	d107      	bne.n	8002530 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002520:	4b24      	ldr	r3, [pc, #144]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 8002522:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002526:	4a23      	ldr	r2, [pc, #140]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 8002528:	f023 0304 	bic.w	r3, r3, #4
 800252c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002530:	4b20      	ldr	r3, [pc, #128]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a1f      	ldr	r2, [pc, #124]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 8002536:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800253a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800253c:	f7fe fdc2 	bl	80010c4 <HAL_GetTick>
 8002540:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002544:	f7fe fdbe 	bl	80010c4 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e09f      	b.n	8002696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002556:	4b17      	ldr	r3, [pc, #92]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002562:	4b14      	ldr	r3, [pc, #80]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 8002564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002566:	4a13      	ldr	r2, [pc, #76]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 8002568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800256c:	6293      	str	r3, [r2, #40]	@ 0x28
 800256e:	e091      	b.n	8002694 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002570:	4b10      	ldr	r3, [pc, #64]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0f      	ldr	r2, [pc, #60]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 8002576:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800257a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800257c:	f7fe fda2 	bl	80010c4 <HAL_GetTick>
 8002580:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002584:	f7fe fd9e 	bl	80010c4 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e07f      	b.n	8002696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002596:	4b07      	ldr	r3, [pc, #28]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80025a2:	4b04      	ldr	r3, [pc, #16]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 80025a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a6:	4a03      	ldr	r2, [pc, #12]	@ (80025b4 <HAL_RCC_OscConfig+0xcc8>)
 80025a8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80025ac:	f023 0303 	bic.w	r3, r3, #3
 80025b0:	6293      	str	r3, [r2, #40]	@ 0x28
 80025b2:	e06f      	b.n	8002694 <HAL_RCC_OscConfig+0xda8>
 80025b4:	46020c00 	.word	0x46020c00
 80025b8:	46020800 	.word	0x46020800
 80025bc:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80025c0:	4b37      	ldr	r3, [pc, #220]	@ (80026a0 <HAL_RCC_OscConfig+0xdb4>)
 80025c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80025c6:	4b36      	ldr	r3, [pc, #216]	@ (80026a0 <HAL_RCC_OscConfig+0xdb4>)
 80025c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ca:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d039      	beq.n	8002648 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0203 	and.w	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d132      	bne.n	8002648 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d129      	bne.n	8002648 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d122      	bne.n	8002648 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800260c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d11a      	bne.n	8002648 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	0a5b      	lsrs	r3, r3, #9
 8002616:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002620:	429a      	cmp	r2, r3
 8002622:	d111      	bne.n	8002648 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	0c1b      	lsrs	r3, r3, #16
 8002628:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002630:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002632:	429a      	cmp	r2, r3
 8002634:	d108      	bne.n	8002648 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	0e1b      	lsrs	r3, r3, #24
 800263a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002642:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e024      	b.n	8002696 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800264c:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <HAL_RCC_OscConfig+0xdb4>)
 800264e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002650:	08db      	lsrs	r3, r3, #3
 8002652:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800265a:	429a      	cmp	r2, r3
 800265c:	d01a      	beq.n	8002694 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800265e:	4b10      	ldr	r3, [pc, #64]	@ (80026a0 <HAL_RCC_OscConfig+0xdb4>)
 8002660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002662:	4a0f      	ldr	r2, [pc, #60]	@ (80026a0 <HAL_RCC_OscConfig+0xdb4>)
 8002664:	f023 0310 	bic.w	r3, r3, #16
 8002668:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7fe fd2b 	bl	80010c4 <HAL_GetTick>
 800266e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002670:	bf00      	nop
 8002672:	f7fe fd27 	bl	80010c4 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267a:	4293      	cmp	r3, r2
 800267c:	d0f9      	beq.n	8002672 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002682:	4a07      	ldr	r2, [pc, #28]	@ (80026a0 <HAL_RCC_OscConfig+0xdb4>)
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002688:	4b05      	ldr	r3, [pc, #20]	@ (80026a0 <HAL_RCC_OscConfig+0xdb4>)
 800268a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268c:	4a04      	ldr	r2, [pc, #16]	@ (80026a0 <HAL_RCC_OscConfig+0xdb4>)
 800268e:	f043 0310 	orr.w	r3, r3, #16
 8002692:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3738      	adds	r7, #56	@ 0x38
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	46020c00 	.word	0x46020c00

080026a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e1d9      	b.n	8002a6c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026b8:	4b9b      	ldr	r3, [pc, #620]	@ (8002928 <HAL_RCC_ClockConfig+0x284>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d910      	bls.n	80026e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c6:	4b98      	ldr	r3, [pc, #608]	@ (8002928 <HAL_RCC_ClockConfig+0x284>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 020f 	bic.w	r2, r3, #15
 80026ce:	4996      	ldr	r1, [pc, #600]	@ (8002928 <HAL_RCC_ClockConfig+0x284>)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b94      	ldr	r3, [pc, #592]	@ (8002928 <HAL_RCC_ClockConfig+0x284>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e1c1      	b.n	8002a6c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d010      	beq.n	8002716 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695a      	ldr	r2, [r3, #20]
 80026f8:	4b8c      	ldr	r3, [pc, #560]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002700:	429a      	cmp	r2, r3
 8002702:	d908      	bls.n	8002716 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002704:	4b89      	ldr	r3, [pc, #548]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 8002706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002708:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	4986      	ldr	r1, [pc, #536]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 8002712:	4313      	orrs	r3, r2
 8002714:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d012      	beq.n	8002748 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	4b81      	ldr	r3, [pc, #516]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002730:	429a      	cmp	r2, r3
 8002732:	d909      	bls.n	8002748 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002734:	4b7d      	ldr	r3, [pc, #500]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	497a      	ldr	r1, [pc, #488]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 8002744:	4313      	orrs	r3, r2
 8002746:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d010      	beq.n	8002776 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	4b74      	ldr	r3, [pc, #464]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002760:	429a      	cmp	r2, r3
 8002762:	d908      	bls.n	8002776 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002764:	4b71      	ldr	r3, [pc, #452]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	496e      	ldr	r1, [pc, #440]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 8002772:	4313      	orrs	r3, r2
 8002774:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d010      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	4b69      	ldr	r3, [pc, #420]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	429a      	cmp	r2, r3
 8002790:	d908      	bls.n	80027a4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002792:	4b66      	ldr	r3, [pc, #408]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	f023 020f 	bic.w	r2, r3, #15
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	4963      	ldr	r1, [pc, #396]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80d2 	beq.w	8002956 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d143      	bne.n	8002846 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027be:	4b5b      	ldr	r3, [pc, #364]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 80027c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d110      	bne.n	80027ee <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80027cc:	4b57      	ldr	r3, [pc, #348]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 80027ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027d2:	4a56      	ldr	r2, [pc, #344]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80027dc:	4b53      	ldr	r3, [pc, #332]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 80027de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80027ea:	2301      	movs	r3, #1
 80027ec:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80027ee:	f7fe fc69 	bl	80010c4 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80027f4:	4b4e      	ldr	r3, [pc, #312]	@ (8002930 <HAL_RCC_ClockConfig+0x28c>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00f      	beq.n	8002820 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002802:	f7fe fc5f 	bl	80010c4 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e12b      	b.n	8002a6c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002814:	4b46      	ldr	r3, [pc, #280]	@ (8002930 <HAL_RCC_ClockConfig+0x28c>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002820:	7dfb      	ldrb	r3, [r7, #23]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002826:	4b41      	ldr	r3, [pc, #260]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 8002828:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800282c:	4a3f      	ldr	r2, [pc, #252]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 800282e:	f023 0304 	bic.w	r3, r3, #4
 8002832:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002836:	4b3d      	ldr	r3, [pc, #244]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d121      	bne.n	8002886 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e112      	b.n	8002a6c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d107      	bne.n	800285e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800284e:	4b37      	ldr	r3, [pc, #220]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d115      	bne.n	8002886 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e106      	b.n	8002a6c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002866:	4b31      	ldr	r3, [pc, #196]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	d109      	bne.n	8002886 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0fa      	b.n	8002a6c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002876:	4b2d      	ldr	r3, [pc, #180]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e0f2      	b.n	8002a6c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002886:	4b29      	ldr	r3, [pc, #164]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	f023 0203 	bic.w	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4926      	ldr	r1, [pc, #152]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 8002894:	4313      	orrs	r3, r2
 8002896:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002898:	f7fe fc14 	bl	80010c4 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d112      	bne.n	80028cc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028a6:	e00a      	b.n	80028be <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a8:	f7fe fc0c 	bl	80010c4 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e0d6      	b.n	8002a6c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028be:	4b1b      	ldr	r3, [pc, #108]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b0c      	cmp	r3, #12
 80028c8:	d1ee      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x204>
 80028ca:	e044      	b.n	8002956 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d112      	bne.n	80028fa <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d6:	f7fe fbf5 	bl	80010c4 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e0bf      	b.n	8002a6c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028ec:	4b0f      	ldr	r3, [pc, #60]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d1ee      	bne.n	80028d6 <HAL_RCC_ClockConfig+0x232>
 80028f8:	e02d      	b.n	8002956 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d123      	bne.n	800294a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002902:	e00a      	b.n	800291a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002904:	f7fe fbde 	bl	80010c4 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e0a8      	b.n	8002a6c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800291a:	4b04      	ldr	r3, [pc, #16]	@ (800292c <HAL_RCC_ClockConfig+0x288>)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1ee      	bne.n	8002904 <HAL_RCC_ClockConfig+0x260>
 8002926:	e016      	b.n	8002956 <HAL_RCC_ClockConfig+0x2b2>
 8002928:	40022000 	.word	0x40022000
 800292c:	46020c00 	.word	0x46020c00
 8002930:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002934:	f7fe fbc6 	bl	80010c4 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e090      	b.n	8002a6c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800294a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a74 <HAL_RCC_ClockConfig+0x3d0>)
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b04      	cmp	r3, #4
 8002954:	d1ee      	bne.n	8002934 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d010      	beq.n	8002984 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	4b43      	ldr	r3, [pc, #268]	@ (8002a74 <HAL_RCC_ClockConfig+0x3d0>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	429a      	cmp	r2, r3
 8002970:	d208      	bcs.n	8002984 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002972:	4b40      	ldr	r3, [pc, #256]	@ (8002a74 <HAL_RCC_ClockConfig+0x3d0>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f023 020f 	bic.w	r2, r3, #15
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	493d      	ldr	r1, [pc, #244]	@ (8002a74 <HAL_RCC_ClockConfig+0x3d0>)
 8002980:	4313      	orrs	r3, r2
 8002982:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002984:	4b3c      	ldr	r3, [pc, #240]	@ (8002a78 <HAL_RCC_ClockConfig+0x3d4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d210      	bcs.n	80029b4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	4b39      	ldr	r3, [pc, #228]	@ (8002a78 <HAL_RCC_ClockConfig+0x3d4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 020f 	bic.w	r2, r3, #15
 800299a:	4937      	ldr	r1, [pc, #220]	@ (8002a78 <HAL_RCC_ClockConfig+0x3d4>)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a2:	4b35      	ldr	r3, [pc, #212]	@ (8002a78 <HAL_RCC_ClockConfig+0x3d4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e05b      	b.n	8002a6c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d010      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a74 <HAL_RCC_ClockConfig+0x3d0>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d208      	bcs.n	80029e2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80029d0:	4b28      	ldr	r3, [pc, #160]	@ (8002a74 <HAL_RCC_ClockConfig+0x3d0>)
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4925      	ldr	r1, [pc, #148]	@ (8002a74 <HAL_RCC_ClockConfig+0x3d0>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d012      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	4b20      	ldr	r3, [pc, #128]	@ (8002a74 <HAL_RCC_ClockConfig+0x3d0>)
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d209      	bcs.n	8002a14 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002a00:	4b1c      	ldr	r3, [pc, #112]	@ (8002a74 <HAL_RCC_ClockConfig+0x3d0>)
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	4919      	ldr	r1, [pc, #100]	@ (8002a74 <HAL_RCC_ClockConfig+0x3d0>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d010      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	4b13      	ldr	r3, [pc, #76]	@ (8002a74 <HAL_RCC_ClockConfig+0x3d0>)
 8002a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d208      	bcs.n	8002a42 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002a30:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <HAL_RCC_ClockConfig+0x3d0>)
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	490d      	ldr	r1, [pc, #52]	@ (8002a74 <HAL_RCC_ClockConfig+0x3d0>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002a42:	f000 f821 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8002a46:	4602      	mov	r2, r0
 8002a48:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <HAL_RCC_ClockConfig+0x3d0>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	490a      	ldr	r1, [pc, #40]	@ (8002a7c <HAL_RCC_ClockConfig+0x3d8>)
 8002a52:	5ccb      	ldrb	r3, [r1, r3]
 8002a54:	fa22 f303 	lsr.w	r3, r2, r3
 8002a58:	4a09      	ldr	r2, [pc, #36]	@ (8002a80 <HAL_RCC_ClockConfig+0x3dc>)
 8002a5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a5c:	4b09      	ldr	r3, [pc, #36]	@ (8002a84 <HAL_RCC_ClockConfig+0x3e0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe faa5 	bl	8000fb0 <HAL_InitTick>
 8002a66:	4603      	mov	r3, r0
 8002a68:	73fb      	strb	r3, [r7, #15]

  return status;
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	46020c00 	.word	0x46020c00
 8002a78:	40022000 	.word	0x40022000
 8002a7c:	08006d0c 	.word	0x08006d0c
 8002a80:	20000000 	.word	0x20000000
 8002a84:	20000004 	.word	0x20000004

08002a88 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b08b      	sub	sp, #44	@ 0x2c
 8002a8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a96:	4b78      	ldr	r3, [pc, #480]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aa0:	4b75      	ldr	r3, [pc, #468]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x34>
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	2b0c      	cmp	r3, #12
 8002ab4:	d121      	bne.n	8002afa <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d11e      	bne.n	8002afa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002abc:	4b6e      	ldr	r3, [pc, #440]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d107      	bne.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002ac8:	4b6b      	ldr	r3, [pc, #428]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002aca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002ace:	0b1b      	lsrs	r3, r3, #12
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ad6:	e005      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002ad8:	4b67      	ldr	r3, [pc, #412]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	0f1b      	lsrs	r3, r3, #28
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ae4:	4a65      	ldr	r2, [pc, #404]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aec:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d110      	bne.n	8002b16 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002af8:	e00d      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002afa:	4b5f      	ldr	r3, [pc, #380]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d102      	bne.n	8002b0c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b06:	4b5e      	ldr	r3, [pc, #376]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002b08:	623b      	str	r3, [r7, #32]
 8002b0a:	e004      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d101      	bne.n	8002b16 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b12:	4b5b      	ldr	r3, [pc, #364]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002b14:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2b0c      	cmp	r3, #12
 8002b1a:	f040 80a5 	bne.w	8002c68 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002b1e:	4b56      	ldr	r3, [pc, #344]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002b28:	4b53      	ldr	r3, [pc, #332]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2c:	0a1b      	lsrs	r3, r3, #8
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	3301      	adds	r3, #1
 8002b34:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002b36:	4b50      	ldr	r3, [pc, #320]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3a:	091b      	lsrs	r3, r3, #4
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002b42:	4b4d      	ldr	r3, [pc, #308]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b46:	08db      	lsrs	r3, r3, #3
 8002b48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	ee07 3a90 	vmov	s15, r3
 8002b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d003      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0xe4>
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d022      	beq.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x128>
 8002b6a:	e043      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b76:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002c84 <HAL_RCC_GetSysClockFreq+0x1fc>
 8002b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b86:	ee07 3a90 	vmov	s15, r3
 8002b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b8e:	ed97 6a01 	vldr	s12, [r7, #4]
 8002b92:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8002c88 <HAL_RCC_GetSysClockFreq+0x200>
 8002b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bae:	e046      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bba:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8002c84 <HAL_RCC_GetSysClockFreq+0x1fc>
 8002bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bca:	ee07 3a90 	vmov	s15, r3
 8002bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002bd2:	ed97 6a01 	vldr	s12, [r7, #4]
 8002bd6:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8002c88 <HAL_RCC_GetSysClockFreq+0x200>
 8002bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bf2:	e024      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf6:	ee07 3a90 	vmov	s15, r3
 8002bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c14:	ee07 3a90 	vmov	s15, r3
 8002c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002c1c:	ed97 6a01 	vldr	s12, [r7, #4]
 8002c20:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8002c88 <HAL_RCC_GetSysClockFreq+0x200>
 8002c24:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c28:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002c2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c30:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c3c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c42:	0e1b      	lsrs	r3, r3, #24
 8002c44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c48:	3301      	adds	r3, #1
 8002c4a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	ee07 3a90 	vmov	s15, r3
 8002c52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c56:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c62:	ee17 3a90 	vmov	r3, s15
 8002c66:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8002c68:	6a3b      	ldr	r3, [r7, #32]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	372c      	adds	r7, #44	@ 0x2c
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	46020c00 	.word	0x46020c00
 8002c7c:	08006d24 	.word	0x08006d24
 8002c80:	00f42400 	.word	0x00f42400
 8002c84:	4b742400 	.word	0x4b742400
 8002c88:	46000000 	.word	0x46000000

08002c8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002c90:	f7ff fefa 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b07      	ldr	r3, [pc, #28]	@ (8002cb4 <HAL_RCC_GetHCLKFreq+0x28>)
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	4906      	ldr	r1, [pc, #24]	@ (8002cb8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002ca0:	5ccb      	ldrb	r3, [r1, r3]
 8002ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca6:	4a05      	ldr	r2, [pc, #20]	@ (8002cbc <HAL_RCC_GetHCLKFreq+0x30>)
 8002ca8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002caa:	4b04      	ldr	r3, [pc, #16]	@ (8002cbc <HAL_RCC_GetHCLKFreq+0x30>)
 8002cac:	681b      	ldr	r3, [r3, #0]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	46020c00 	.word	0x46020c00
 8002cb8:	08006d0c 	.word	0x08006d0c
 8002cbc:	20000000 	.word	0x20000000

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002cc4:	f7ff ffe2 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b05      	ldr	r3, [pc, #20]	@ (8002ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4903      	ldr	r1, [pc, #12]	@ (8002ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	46020c00 	.word	0x46020c00
 8002ce4:	08006d1c 	.word	0x08006d1c

08002ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002cec:	f7ff ffce 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	@ (8002d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4903      	ldr	r1, [pc, #12]	@ (8002d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	46020c00 	.word	0x46020c00
 8002d0c:	08006d1c 	.word	0x08006d1c

08002d10 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002d14:	f7ff ffba 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <HAL_RCC_GetPCLK3Freq+0x20>)
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	091b      	lsrs	r3, r3, #4
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4903      	ldr	r1, [pc, #12]	@ (8002d34 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	46020c00 	.word	0x46020c00
 8002d34:	08006d1c 	.word	0x08006d1c

08002d38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d40:	4b3e      	ldr	r3, [pc, #248]	@ (8002e3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d4e:	f7fe fdbf 	bl	80018d0 <HAL_PWREx_GetVoltageRange>
 8002d52:	6178      	str	r0, [r7, #20]
 8002d54:	e019      	b.n	8002d8a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d56:	4b39      	ldr	r3, [pc, #228]	@ (8002e3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d5c:	4a37      	ldr	r2, [pc, #220]	@ (8002e3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d5e:	f043 0304 	orr.w	r3, r3, #4
 8002d62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002d66:	4b35      	ldr	r3, [pc, #212]	@ (8002e3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d74:	f7fe fdac 	bl	80018d0 <HAL_PWREx_GetVoltageRange>
 8002d78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d7a:	4b30      	ldr	r3, [pc, #192]	@ (8002e3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d80:	4a2e      	ldr	r2, [pc, #184]	@ (8002e3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d82:	f023 0304 	bic.w	r3, r3, #4
 8002d86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d90:	d003      	beq.n	8002d9a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d98:	d109      	bne.n	8002dae <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002da0:	d202      	bcs.n	8002da8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002da2:	2301      	movs	r3, #1
 8002da4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002da6:	e033      	b.n	8002e10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002da8:	2300      	movs	r3, #0
 8002daa:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002dac:	e030      	b.n	8002e10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002db4:	d208      	bcs.n	8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dbc:	d102      	bne.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	e025      	b.n	8002e10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e035      	b.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dce:	d90f      	bls.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d109      	bne.n	8002dea <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002ddc:	d902      	bls.n	8002de4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	e015      	b.n	8002e10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002de4:	2301      	movs	r3, #1
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	e012      	b.n	8002e10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	e00f      	b.n	8002e10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002df6:	d109      	bne.n	8002e0c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dfe:	d102      	bne.n	8002e06 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002e00:	2301      	movs	r3, #1
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	e004      	b.n	8002e10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002e06:	2302      	movs	r3, #2
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	e001      	b.n	8002e10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e10:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f023 020f 	bic.w	r2, r3, #15
 8002e18:	4909      	ldr	r1, [pc, #36]	@ (8002e40 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002e20:	4b07      	ldr	r3, [pc, #28]	@ (8002e40 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d001      	beq.n	8002e32 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	46020c00 	.word	0x46020c00
 8002e40:	40022000 	.word	0x40022000

08002e44 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e48:	b0ba      	sub	sp, #232	@ 0xe8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e50:	2300      	movs	r3, #0
 8002e52:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e56:	2300      	movs	r3, #0
 8002e58:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e64:	f002 0401 	and.w	r4, r2, #1
 8002e68:	2500      	movs	r5, #0
 8002e6a:	ea54 0305 	orrs.w	r3, r4, r5
 8002e6e:	d00b      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002e70:	4bcb      	ldr	r3, [pc, #812]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e76:	f023 0103 	bic.w	r1, r3, #3
 8002e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e80:	4ac7      	ldr	r2, [pc, #796]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e82:	430b      	orrs	r3, r1
 8002e84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e90:	f002 0802 	and.w	r8, r2, #2
 8002e94:	f04f 0900 	mov.w	r9, #0
 8002e98:	ea58 0309 	orrs.w	r3, r8, r9
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002e9e:	4bc0      	ldr	r3, [pc, #768]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ea4:	f023 010c 	bic.w	r1, r3, #12
 8002ea8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eae:	4abc      	ldr	r2, [pc, #752]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	f002 0a04 	and.w	sl, r2, #4
 8002ec2:	f04f 0b00 	mov.w	fp, #0
 8002ec6:	ea5a 030b 	orrs.w	r3, sl, fp
 8002eca:	d00b      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002ecc:	4bb4      	ldr	r3, [pc, #720]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ed2:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002edc:	4ab0      	ldr	r2, [pc, #704]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ee4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eec:	f002 0308 	and.w	r3, r2, #8
 8002ef0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002efa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002efe:	460b      	mov	r3, r1
 8002f00:	4313      	orrs	r3, r2
 8002f02:	d00b      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002f04:	4ba6      	ldr	r3, [pc, #664]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f14:	4aa2      	ldr	r2, [pc, #648]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f16:	430b      	orrs	r3, r1
 8002f18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	f002 0310 	and.w	r3, r2, #16
 8002f28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f32:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	d00b      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002f3c:	4b98      	ldr	r3, [pc, #608]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f42:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f4c:	4a94      	ldr	r2, [pc, #592]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5c:	f002 0320 	and.w	r3, r2, #32
 8002f60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002f6a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4313      	orrs	r3, r2
 8002f72:	d00b      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002f74:	4b8a      	ldr	r3, [pc, #552]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f7a:	f023 0107 	bic.w	r1, r3, #7
 8002f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f84:	4a86      	ldr	r2, [pc, #536]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f86:	430b      	orrs	r3, r1
 8002f88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f94:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002f98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fa2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	d00b      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002fac:	4b7c      	ldr	r3, [pc, #496]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fb2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8002fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fbc:	4a78      	ldr	r2, [pc, #480]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fbe:	430b      	orrs	r3, r1
 8002fc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fcc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002fda:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	d00b      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002fe4:	4b6e      	ldr	r3, [pc, #440]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ff4:	4a6a      	ldr	r2, [pc, #424]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ffc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003004:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003008:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800300c:	2300      	movs	r3, #0
 800300e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003012:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003016:	460b      	mov	r3, r1
 8003018:	4313      	orrs	r3, r2
 800301a:	d00b      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800301c:	4b60      	ldr	r3, [pc, #384]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800301e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003022:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800302a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302c:	4a5c      	ldr	r2, [pc, #368]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800302e:	430b      	orrs	r3, r1
 8003030:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003034:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003040:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003044:	2300      	movs	r3, #0
 8003046:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800304a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800304e:	460b      	mov	r3, r1
 8003050:	4313      	orrs	r3, r2
 8003052:	d00b      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003054:	4b52      	ldr	r3, [pc, #328]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800305a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800305e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003062:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003064:	4a4e      	ldr	r2, [pc, #312]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003066:	430b      	orrs	r3, r1
 8003068:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800306c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003074:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003078:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800307c:	2300      	movs	r3, #0
 800307e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003082:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003086:	460b      	mov	r3, r1
 8003088:	4313      	orrs	r3, r2
 800308a:	d00b      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800308c:	4b44      	ldr	r3, [pc, #272]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800308e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003092:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800309a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800309c:	4a40      	ldr	r2, [pc, #256]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800309e:	430b      	orrs	r3, r1
 80030a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ac:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80030b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030b4:	2300      	movs	r3, #0
 80030b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80030ba:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80030be:	460b      	mov	r3, r1
 80030c0:	4313      	orrs	r3, r2
 80030c2:	d00b      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80030c4:	4b36      	ldr	r3, [pc, #216]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030ca:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80030ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030d4:	4a32      	ldr	r2, [pc, #200]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030d6:	430b      	orrs	r3, r1
 80030d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80030dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80030e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80030ec:	2300      	movs	r3, #0
 80030ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80030f2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80030f6:	460b      	mov	r3, r1
 80030f8:	4313      	orrs	r3, r2
 80030fa:	d00c      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80030fc:	4b28      	ldr	r3, [pc, #160]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003102:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800310a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800310e:	4a24      	ldr	r2, [pc, #144]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003110:	430b      	orrs	r3, r1
 8003112:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800311a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003122:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003124:	2300      	movs	r3, #0
 8003126:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003128:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800312c:	460b      	mov	r3, r1
 800312e:	4313      	orrs	r3, r2
 8003130:	d04f      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313a:	2b80      	cmp	r3, #128	@ 0x80
 800313c:	d02d      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x356>
 800313e:	2b80      	cmp	r3, #128	@ 0x80
 8003140:	d827      	bhi.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003142:	2b60      	cmp	r3, #96	@ 0x60
 8003144:	d02e      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003146:	2b60      	cmp	r3, #96	@ 0x60
 8003148:	d823      	bhi.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800314a:	2b40      	cmp	r3, #64	@ 0x40
 800314c:	d006      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x318>
 800314e:	2b40      	cmp	r3, #64	@ 0x40
 8003150:	d81f      	bhi.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003152:	2b00      	cmp	r3, #0
 8003154:	d009      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8003156:	2b20      	cmp	r3, #32
 8003158:	d011      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800315a:	e01a      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800315c:	4b10      	ldr	r3, [pc, #64]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800315e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003160:	4a0f      	ldr	r2, [pc, #60]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003162:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003166:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003168:	e01d      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800316a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800316e:	3308      	adds	r3, #8
 8003170:	4618      	mov	r0, r3
 8003172:	f002 fa17 	bl	80055a4 <RCCEx_PLL2_Config>
 8003176:	4603      	mov	r3, r0
 8003178:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800317c:	e013      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800317e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003182:	332c      	adds	r3, #44	@ 0x2c
 8003184:	4618      	mov	r0, r3
 8003186:	f002 faa5 	bl	80056d4 <RCCEx_PLL3_Config>
 800318a:	4603      	mov	r3, r0
 800318c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003190:	e009      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003198:	e005      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800319a:	bf00      	nop
 800319c:	e003      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800319e:	bf00      	nop
 80031a0:	46020c00 	.word	0x46020c00
        break;
 80031a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10d      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80031ae:	4bb6      	ldr	r3, [pc, #728]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80031b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80031b4:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80031b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c0:	4ab1      	ldr	r2, [pc, #708]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80031c2:	430b      	orrs	r3, r1
 80031c4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80031c8:	e003      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80031ce:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031da:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80031de:	673b      	str	r3, [r7, #112]	@ 0x70
 80031e0:	2300      	movs	r3, #0
 80031e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80031e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80031e8:	460b      	mov	r3, r1
 80031ea:	4313      	orrs	r3, r2
 80031ec:	d053      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80031ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031fa:	d033      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80031fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003200:	d82c      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003202:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003206:	d02f      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003208:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800320c:	d826      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x418>
 800320e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003212:	d008      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8003214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003218:	d820      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x418>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800321e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003222:	d011      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003224:	e01a      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003226:	4b98      	ldr	r3, [pc, #608]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322a:	4a97      	ldr	r2, [pc, #604]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003230:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003232:	e01a      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003234:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003238:	3308      	adds	r3, #8
 800323a:	4618      	mov	r0, r3
 800323c:	f002 f9b2 	bl	80055a4 <RCCEx_PLL2_Config>
 8003240:	4603      	mov	r3, r0
 8003242:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003246:	e010      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003248:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800324c:	332c      	adds	r3, #44	@ 0x2c
 800324e:	4618      	mov	r0, r3
 8003250:	f002 fa40 	bl	80056d4 <RCCEx_PLL3_Config>
 8003254:	4603      	mov	r3, r0
 8003256:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800325a:	e006      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003262:	e002      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8003264:	bf00      	nop
 8003266:	e000      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8003268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800326a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10d      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003272:	4b85      	ldr	r3, [pc, #532]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003274:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003278:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800327c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003280:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003284:	4a80      	ldr	r2, [pc, #512]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003286:	430b      	orrs	r3, r1
 8003288:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800328c:	e003      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003292:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003296:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80032a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032a4:	2300      	movs	r3, #0
 80032a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032a8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80032ac:	460b      	mov	r3, r1
 80032ae:	4313      	orrs	r3, r2
 80032b0:	d046      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80032b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80032ba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80032be:	d028      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80032c0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80032c4:	d821      	bhi.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80032c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032ca:	d022      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80032cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032d0:	d81b      	bhi.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80032d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032d6:	d01c      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80032d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032dc:	d815      	bhi.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80032de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032e2:	d008      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80032e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032e8:	d80f      	bhi.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d011      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80032ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032f2:	d00e      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80032f4:	e009      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032fa:	3308      	adds	r3, #8
 80032fc:	4618      	mov	r0, r3
 80032fe:	f002 f951 	bl	80055a4 <RCCEx_PLL2_Config>
 8003302:	4603      	mov	r3, r0
 8003304:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003308:	e004      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003310:	e000      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8003312:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003314:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10d      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800331c:	4b5a      	ldr	r3, [pc, #360]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800331e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003322:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800332a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800332e:	4a56      	ldr	r2, [pc, #344]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003330:	430b      	orrs	r3, r1
 8003332:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003336:	e003      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003338:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800333c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003340:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003348:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800334c:	663b      	str	r3, [r7, #96]	@ 0x60
 800334e:	2300      	movs	r3, #0
 8003350:	667b      	str	r3, [r7, #100]	@ 0x64
 8003352:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003356:	460b      	mov	r3, r1
 8003358:	4313      	orrs	r3, r2
 800335a:	d03f      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800335c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003364:	2b04      	cmp	r3, #4
 8003366:	d81e      	bhi.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8003368:	a201      	add	r2, pc, #4	@ (adr r2, 8003370 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800336a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336e:	bf00      	nop
 8003370:	080033af 	.word	0x080033af
 8003374:	08003385 	.word	0x08003385
 8003378:	08003393 	.word	0x08003393
 800337c:	080033af 	.word	0x080033af
 8003380:	080033af 	.word	0x080033af
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003384:	4b40      	ldr	r3, [pc, #256]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003388:	4a3f      	ldr	r2, [pc, #252]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800338a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800338e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003390:	e00e      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003392:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003396:	332c      	adds	r3, #44	@ 0x2c
 8003398:	4618      	mov	r0, r3
 800339a:	f002 f99b 	bl	80056d4 <RCCEx_PLL3_Config>
 800339e:	4603      	mov	r3, r0
 80033a0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80033a4:	e004      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80033ac:	e000      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 80033ae:	bf00      	nop
    }
    if (ret == HAL_OK)
 80033b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10d      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80033b8:	4b33      	ldr	r3, [pc, #204]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80033ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80033be:	f023 0107 	bic.w	r1, r3, #7
 80033c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ca:	4a2f      	ldr	r2, [pc, #188]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80033cc:	430b      	orrs	r3, r1
 80033ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80033d2:	e003      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80033d8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80033dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80033e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033ea:	2300      	movs	r3, #0
 80033ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033ee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80033f2:	460b      	mov	r3, r1
 80033f4:	4313      	orrs	r3, r2
 80033f6:	d04d      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80033f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003400:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003404:	d028      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003406:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800340a:	d821      	bhi.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800340c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003410:	d024      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003412:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003416:	d81b      	bhi.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003418:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800341c:	d00e      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800341e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003422:	d815      	bhi.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01b      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8003428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800342c:	d110      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800342e:	4b16      	ldr	r3, [pc, #88]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003432:	4a15      	ldr	r2, [pc, #84]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003438:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800343a:	e012      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800343c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003440:	332c      	adds	r3, #44	@ 0x2c
 8003442:	4618      	mov	r0, r3
 8003444:	f002 f946 	bl	80056d4 <RCCEx_PLL3_Config>
 8003448:	4603      	mov	r3, r0
 800344a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800344e:	e008      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003456:	e004      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003458:	bf00      	nop
 800345a:	e002      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800345c:	bf00      	nop
 800345e:	e000      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003460:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003462:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d110      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800346a:	4b07      	ldr	r3, [pc, #28]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800346c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003470:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003474:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003478:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800347c:	4a02      	ldr	r2, [pc, #8]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800347e:	430b      	orrs	r3, r1
 8003480:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003484:	e006      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8003486:	bf00      	nop
 8003488:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003490:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003494:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80034a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80034a2:	2300      	movs	r3, #0
 80034a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80034a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80034aa:	460b      	mov	r3, r1
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f000 80b5 	beq.w	800361c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b2:	2300      	movs	r3, #0
 80034b4:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b8:	4b9d      	ldr	r3, [pc, #628]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80034ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d113      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c6:	4b9a      	ldr	r3, [pc, #616]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80034c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034cc:	4a98      	ldr	r2, [pc, #608]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80034ce:	f043 0304 	orr.w	r3, r3, #4
 80034d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80034d6:	4b96      	ldr	r3, [pc, #600]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80034d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 80034e8:	2301      	movs	r3, #1
 80034ea:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80034ee:	4b91      	ldr	r3, [pc, #580]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80034f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f2:	4a90      	ldr	r2, [pc, #576]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034fa:	f7fd fde3 	bl	80010c4 <HAL_GetTick>
 80034fe:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003502:	e00b      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003504:	f7fd fdde 	bl	80010c4 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d903      	bls.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800351a:	e005      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800351c:	4b85      	ldr	r3, [pc, #532]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800351e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0ed      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8003528:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d165      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003530:	4b7f      	ldr	r3, [pc, #508]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800353a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800353e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003542:	2b00      	cmp	r3, #0
 8003544:	d023      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8003546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800354a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800354e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003552:	4293      	cmp	r3, r2
 8003554:	d01b      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003556:	4b76      	ldr	r3, [pc, #472]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800355c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003560:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003564:	4b72      	ldr	r3, [pc, #456]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800356a:	4a71      	ldr	r2, [pc, #452]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800356c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003570:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003574:	4b6e      	ldr	r3, [pc, #440]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800357a:	4a6d      	ldr	r2, [pc, #436]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800357c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003580:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003584:	4a6a      	ldr	r2, [pc, #424]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800358a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800358e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d019      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359a:	f7fd fd93 	bl	80010c4 <HAL_GetTick>
 800359e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a2:	e00d      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a4:	f7fd fd8e 	bl	80010c4 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035ae:	1ad2      	subs	r2, r2, r3
 80035b0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d903      	bls.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 80035be:	e006      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035c0:	4b5b      	ldr	r3, [pc, #364]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80035c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0ea      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 80035ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10d      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80035d6:	4b56      	ldr	r3, [pc, #344]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80035d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035dc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80035e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80035e8:	4a51      	ldr	r2, [pc, #324]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80035ea:	430b      	orrs	r3, r1
 80035ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80035f0:	e008      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80035f6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 80035fa:	e003      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003600:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003604:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8003608:	2b01      	cmp	r3, #1
 800360a:	d107      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800360c:	4b48      	ldr	r3, [pc, #288]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800360e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003612:	4a47      	ldr	r2, [pc, #284]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003614:	f023 0304 	bic.w	r3, r3, #4
 8003618:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800361c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003624:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003628:	64bb      	str	r3, [r7, #72]	@ 0x48
 800362a:	2300      	movs	r3, #0
 800362c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800362e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003632:	460b      	mov	r3, r1
 8003634:	4313      	orrs	r3, r2
 8003636:	d042      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003638:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800363c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003640:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003644:	d022      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8003646:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800364a:	d81b      	bhi.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800364c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003650:	d011      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8003652:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003656:	d815      	bhi.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8003658:	2b00      	cmp	r3, #0
 800365a:	d019      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800365c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003660:	d110      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003666:	3308      	adds	r3, #8
 8003668:	4618      	mov	r0, r3
 800366a:	f001 ff9b 	bl	80055a4 <RCCEx_PLL2_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003674:	e00d      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003676:	4b2e      	ldr	r3, [pc, #184]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367a:	4a2d      	ldr	r2, [pc, #180]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800367c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003680:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003682:	e006      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800368a:	e002      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800368c:	bf00      	nop
 800368e:	e000      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8003690:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003692:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10d      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800369a:	4b25      	ldr	r3, [pc, #148]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800369c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036a0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80036a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80036ac:	4a20      	ldr	r2, [pc, #128]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80036ae:	430b      	orrs	r3, r1
 80036b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036b4:	e003      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80036ba:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80036be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80036ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80036cc:	2300      	movs	r3, #0
 80036ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80036d0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80036d4:	460b      	mov	r3, r1
 80036d6:	4313      	orrs	r3, r2
 80036d8:	d032      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80036da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036e6:	d00b      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80036e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036ec:	d804      	bhi.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80036f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036f6:	d007      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80036fe:	e004      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003700:	bf00      	nop
 8003702:	e002      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003704:	bf00      	nop
 8003706:	e000      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003708:	bf00      	nop
    }
    if (ret == HAL_OK)
 800370a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d112      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003712:	4b07      	ldr	r3, [pc, #28]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003714:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003718:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800371c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003720:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003724:	4a02      	ldr	r2, [pc, #8]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003726:	430b      	orrs	r3, r1
 8003728:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800372c:	e008      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800372e:	bf00      	nop
 8003730:	46020c00 	.word	0x46020c00
 8003734:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003738:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800373c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003740:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003748:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800374c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800374e:	2300      	movs	r3, #0
 8003750:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003752:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003756:	460b      	mov	r3, r1
 8003758:	4313      	orrs	r3, r2
 800375a:	d00c      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800375c:	4b98      	ldr	r3, [pc, #608]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800375e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003762:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8003766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800376a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800376e:	4a94      	ldr	r2, [pc, #592]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003770:	430b      	orrs	r3, r1
 8003772:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800377a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003782:	633b      	str	r3, [r7, #48]	@ 0x30
 8003784:	2300      	movs	r3, #0
 8003786:	637b      	str	r3, [r7, #52]	@ 0x34
 8003788:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800378c:	460b      	mov	r3, r1
 800378e:	4313      	orrs	r3, r2
 8003790:	d019      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003796:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800379a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800379e:	d105      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80037a0:	4b87      	ldr	r3, [pc, #540]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80037a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a4:	4a86      	ldr	r2, [pc, #536]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80037a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037aa:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80037ac:	4b84      	ldr	r3, [pc, #528]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80037ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80037b2:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80037b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80037be:	4a80      	ldr	r2, [pc, #512]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80037c0:	430b      	orrs	r3, r1
 80037c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80037c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ce:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80037d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037d4:	2300      	movs	r3, #0
 80037d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037d8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80037dc:	460b      	mov	r3, r1
 80037de:	4313      	orrs	r3, r2
 80037e0:	d00c      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80037e2:	4b77      	ldr	r3, [pc, #476]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80037e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80037f4:	4972      	ldr	r1, [pc, #456]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80037fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003808:	623b      	str	r3, [r7, #32]
 800380a:	2300      	movs	r3, #0
 800380c:	627b      	str	r3, [r7, #36]	@ 0x24
 800380e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003812:	460b      	mov	r3, r1
 8003814:	4313      	orrs	r3, r2
 8003816:	d00c      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003818:	4b69      	ldr	r3, [pc, #420]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800381a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800381e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003826:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800382a:	4965      	ldr	r1, [pc, #404]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800383e:	61bb      	str	r3, [r7, #24]
 8003840:	2300      	movs	r3, #0
 8003842:	61fb      	str	r3, [r7, #28]
 8003844:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003848:	460b      	mov	r3, r1
 800384a:	4313      	orrs	r3, r2
 800384c:	d00c      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800384e:	4b5c      	ldr	r3, [pc, #368]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003850:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003854:	f023 0218 	bic.w	r2, r3, #24
 8003858:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800385c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003860:	4957      	ldr	r1, [pc, #348]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003868:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800386c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003870:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800387e:	460b      	mov	r3, r1
 8003880:	4313      	orrs	r3, r2
 8003882:	d032      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003884:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003888:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800388c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003890:	d105      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003892:	4b4b      	ldr	r3, [pc, #300]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003896:	4a4a      	ldr	r2, [pc, #296]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800389c:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800389e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80038aa:	d108      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038b0:	3308      	adds	r3, #8
 80038b2:	4618      	mov	r0, r3
 80038b4:	f001 fe76 	bl	80055a4 <RCCEx_PLL2_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 80038be:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10d      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80038c6:	4b3e      	ldr	r3, [pc, #248]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80038c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80038cc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038d8:	4939      	ldr	r1, [pc, #228]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80038e0:	e003      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80038e6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80038ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003900:	460b      	mov	r3, r1
 8003902:	4313      	orrs	r3, r2
 8003904:	d03a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800390a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800390e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003912:	d00e      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8003914:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003918:	d815      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800391a:	2b00      	cmp	r3, #0
 800391c:	d017      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800391e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003922:	d110      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003924:	4b26      	ldr	r3, [pc, #152]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003928:	4a25      	ldr	r2, [pc, #148]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800392a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800392e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003930:	e00e      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003936:	3308      	adds	r3, #8
 8003938:	4618      	mov	r0, r3
 800393a:	f001 fe33 	bl	80055a4 <RCCEx_PLL2_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003944:	e004      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800394c:	e000      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800394e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003950:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10d      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003958:	4b19      	ldr	r3, [pc, #100]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800395a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800395e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800396a:	4915      	ldr	r1, [pc, #84]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003972:	e003      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003974:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003978:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800397c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003988:	603b      	str	r3, [r7, #0]
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]
 800398e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003992:	460b      	mov	r3, r1
 8003994:	4313      	orrs	r3, r2
 8003996:	d00c      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003998:	4b09      	ldr	r3, [pc, #36]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800399a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800399e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80039a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80039aa:	4905      	ldr	r1, [pc, #20]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80039b2:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	37e8      	adds	r7, #232	@ 0xe8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039c0:	46020c00 	.word	0x46020c00

080039c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b089      	sub	sp, #36	@ 0x24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80039cc:	4ba6      	ldr	r3, [pc, #664]	@ (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80039ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80039d6:	4ba4      	ldr	r3, [pc, #656]	@ (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80039d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80039e0:	4ba1      	ldr	r3, [pc, #644]	@ (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80039e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e4:	0a1b      	lsrs	r3, r3, #8
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	3301      	adds	r3, #1
 80039ec:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80039ee:	4b9e      	ldr	r3, [pc, #632]	@ (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80039f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80039fa:	4b9b      	ldr	r3, [pc, #620]	@ (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80039fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fe:	08db      	lsrs	r3, r3, #3
 8003a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	fb02 f303 	mul.w	r3, r2, r3
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a12:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d062      	beq.n	8003ae2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	f200 8081 	bhi.w	8003b26 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d024      	beq.n	8003a74 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d17a      	bne.n	8003b26 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8003c6c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8003a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a42:	4b89      	ldr	r3, [pc, #548]	@ (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a56:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8003c70 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a72:	e08f      	b.n	8003b94 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003a74:	4b7c      	ldr	r3, [pc, #496]	@ (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003a80:	4b79      	ldr	r3, [pc, #484]	@ (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	0f1b      	lsrs	r3, r3, #28
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	e006      	b.n	8003a9a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8003a8c:	4b76      	ldr	r3, [pc, #472]	@ (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003a8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a92:	041b      	lsls	r3, r3, #16
 8003a94:	0f1b      	lsrs	r3, r3, #28
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	4a76      	ldr	r2, [pc, #472]	@ (8003c74 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8003a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa0:	ee07 3a90 	vmov	s15, r3
 8003aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	ee07 3a90 	vmov	s15, r3
 8003abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ac4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8003c70 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003ac8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003acc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ad0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003adc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ae0:	e058      	b.n	8003b94 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	ee07 3a90 	vmov	s15, r3
 8003ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aec:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003c6c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8003af0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af4:	4b5c      	ldr	r3, [pc, #368]	@ (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afc:	ee07 3a90 	vmov	s15, r3
 8003b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b04:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b08:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8003c70 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003b0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b10:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b18:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b24:	e036      	b.n	8003b94 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003b26:	4b50      	ldr	r3, [pc, #320]	@ (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d005      	beq.n	8003b3e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8003b32:	4b4d      	ldr	r3, [pc, #308]	@ (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	0f1b      	lsrs	r3, r3, #28
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	e006      	b.n	8003b4c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8003b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003b40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b44:	041b      	lsls	r3, r3, #16
 8003b46:	0f1b      	lsrs	r3, r3, #28
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	4a49      	ldr	r2, [pc, #292]	@ (8003c74 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8003b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	ee07 3a90 	vmov	s15, r3
 8003b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b72:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b76:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003c70 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b92:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003b94:	4b34      	ldr	r3, [pc, #208]	@ (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d017      	beq.n	8003bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003ba0:	4b31      	ldr	r3, [pc, #196]	@ (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba4:	0a5b      	lsrs	r3, r3, #9
 8003ba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003baa:	ee07 3a90 	vmov	s15, r3
 8003bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003bb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bb6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003bba:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc6:	ee17 2a90 	vmov	r2, s15
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	e002      	b.n	8003bd6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003bd6:	4b24      	ldr	r3, [pc, #144]	@ (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d017      	beq.n	8003c12 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003be2:	4b21      	ldr	r3, [pc, #132]	@ (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be6:	0c1b      	lsrs	r3, r3, #16
 8003be8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bec:	ee07 3a90 	vmov	s15, r3
 8003bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003bf4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bf8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003bfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c08:	ee17 2a90 	vmov	r2, s15
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	605a      	str	r2, [r3, #4]
 8003c10:	e002      	b.n	8003c18 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003c18:	4b13      	ldr	r3, [pc, #76]	@ (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d017      	beq.n	8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c24:	4b10      	ldr	r3, [pc, #64]	@ (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c28:	0e1b      	lsrs	r3, r3, #24
 8003c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c2e:	ee07 3a90 	vmov	s15, r3
 8003c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003c36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c3a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c4a:	ee17 2a90 	vmov	r2, s15
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003c52:	e002      	b.n	8003c5a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	609a      	str	r2, [r3, #8]
}
 8003c5a:	bf00      	nop
 8003c5c:	3724      	adds	r7, #36	@ 0x24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	46020c00 	.word	0x46020c00
 8003c6c:	4b742400 	.word	0x4b742400
 8003c70:	46000000 	.word	0x46000000
 8003c74:	08006d24 	.word	0x08006d24

08003c78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b089      	sub	sp, #36	@ 0x24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003c80:	4ba6      	ldr	r3, [pc, #664]	@ (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c88:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003c8a:	4ba4      	ldr	r3, [pc, #656]	@ (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003c94:	4ba1      	ldr	r3, [pc, #644]	@ (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c98:	0a1b      	lsrs	r3, r3, #8
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003ca2:	4b9e      	ldr	r3, [pc, #632]	@ (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003cae:	4b9b      	ldr	r3, [pc, #620]	@ (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb2:	08db      	lsrs	r3, r3, #3
 8003cb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	fb02 f303 	mul.w	r3, r2, r3
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d062      	beq.n	8003d96 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	f200 8081 	bhi.w	8003dda <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d024      	beq.n	8003d28 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d17a      	bne.n	8003dda <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	ee07 3a90 	vmov	s15, r3
 8003cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cee:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8003f20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8003cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cf6:	4b89      	ldr	r3, [pc, #548]	@ (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfe:	ee07 3a90 	vmov	s15, r3
 8003d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d06:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d0a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8003f24 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d26:	e08f      	b.n	8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003d28:	4b7c      	ldr	r3, [pc, #496]	@ (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8003d34:	4b79      	ldr	r3, [pc, #484]	@ (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	0f1b      	lsrs	r3, r3, #28
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	e006      	b.n	8003d4e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8003d40:	4b76      	ldr	r3, [pc, #472]	@ (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003d42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d46:	041b      	lsls	r3, r3, #16
 8003d48:	0f1b      	lsrs	r3, r3, #28
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	4a76      	ldr	r2, [pc, #472]	@ (8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8003d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d54:	ee07 3a90 	vmov	s15, r3
 8003d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	ee07 3a90 	vmov	s15, r3
 8003d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d74:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d78:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8003f24 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003d7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d94:	e058      	b.n	8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	ee07 3a90 	vmov	s15, r3
 8003d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003f20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8003da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003da8:	4b5c      	ldr	r3, [pc, #368]	@ (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db0:	ee07 3a90 	vmov	s15, r3
 8003db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003db8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dbc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8003f24 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003dc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003dc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003dd8:	e036      	b.n	8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003dda:	4b50      	ldr	r3, [pc, #320]	@ (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d005      	beq.n	8003df2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8003de6:	4b4d      	ldr	r3, [pc, #308]	@ (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	0f1b      	lsrs	r3, r3, #28
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	e006      	b.n	8003e00 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8003df2:	4b4a      	ldr	r3, [pc, #296]	@ (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003df8:	041b      	lsls	r3, r3, #16
 8003dfa:	0f1b      	lsrs	r3, r3, #28
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	4a49      	ldr	r2, [pc, #292]	@ (8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8003e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	ee07 3a90 	vmov	s15, r3
 8003e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	ee07 3a90 	vmov	s15, r3
 8003e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e26:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e2a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003f24 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e46:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003e48:	4b34      	ldr	r3, [pc, #208]	@ (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d017      	beq.n	8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e54:	4b31      	ldr	r3, [pc, #196]	@ (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e58:	0a5b      	lsrs	r3, r3, #9
 8003e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e5e:	ee07 3a90 	vmov	s15, r3
 8003e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003e66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e6a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e7a:	ee17 2a90 	vmov	r2, s15
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	e002      	b.n	8003e8a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003e8a:	4b24      	ldr	r3, [pc, #144]	@ (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d017      	beq.n	8003ec6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e96:	4b21      	ldr	r3, [pc, #132]	@ (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e9a:	0c1b      	lsrs	r3, r3, #16
 8003e9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ea0:	ee07 3a90 	vmov	s15, r3
 8003ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003ea8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003eac:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003eb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ebc:	ee17 2a90 	vmov	r2, s15
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	605a      	str	r2, [r3, #4]
 8003ec4:	e002      	b.n	8003ecc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003ecc:	4b13      	ldr	r3, [pc, #76]	@ (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d017      	beq.n	8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003ed8:	4b10      	ldr	r3, [pc, #64]	@ (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003edc:	0e1b      	lsrs	r3, r3, #24
 8003ede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003eea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003eee:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003ef2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003efe:	ee17 2a90 	vmov	r2, s15
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003f06:	e002      	b.n	8003f0e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	609a      	str	r2, [r3, #8]
}
 8003f0e:	bf00      	nop
 8003f10:	3724      	adds	r7, #36	@ 0x24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	46020c00 	.word	0x46020c00
 8003f20:	4b742400 	.word	0x4b742400
 8003f24:	46000000 	.word	0x46000000
 8003f28:	08006d24 	.word	0x08006d24

08003f2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b089      	sub	sp, #36	@ 0x24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003f34:	4ba6      	ldr	r3, [pc, #664]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f3c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003f3e:	4ba4      	ldr	r3, [pc, #656]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003f48:	4ba1      	ldr	r3, [pc, #644]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4c:	0a1b      	lsrs	r3, r3, #8
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	3301      	adds	r3, #1
 8003f54:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8003f56:	4b9e      	ldr	r3, [pc, #632]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5a:	091b      	lsrs	r3, r3, #4
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003f62:	4b9b      	ldr	r3, [pc, #620]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f66:	08db      	lsrs	r3, r3, #3
 8003f68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d062      	beq.n	800404a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	f200 8081 	bhi.w	800408e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d024      	beq.n	8003fdc <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d17a      	bne.n	800408e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80041d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8003fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003faa:	4b89      	ldr	r3, [pc, #548]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fbe:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80041d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8003fda:	e08f      	b.n	80040fc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003fdc:	4b7c      	ldr	r3, [pc, #496]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8003fe8:	4b79      	ldr	r3, [pc, #484]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	0f1b      	lsrs	r3, r3, #28
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	e006      	b.n	8004002 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8003ff4:	4b76      	ldr	r3, [pc, #472]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003ff6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ffa:	041b      	lsls	r3, r3, #16
 8003ffc:	0f1b      	lsrs	r3, r3, #28
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	4a76      	ldr	r2, [pc, #472]	@ (80041dc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004008:	ee07 3a90 	vmov	s15, r3
 800400c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800401a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	ee07 3a90 	vmov	s15, r3
 8004024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004028:	ed97 6a02 	vldr	s12, [r7, #8]
 800402c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80041d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004030:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004038:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800403c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004044:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004048:	e058      	b.n	80040fc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	ee07 3a90 	vmov	s15, r3
 8004050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004054:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80041d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800405c:	4b5c      	ldr	r3, [pc, #368]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800405e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004064:	ee07 3a90 	vmov	s15, r3
 8004068:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800406c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004070:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80041d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004074:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004078:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800407c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004080:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004088:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800408c:	e036      	b.n	80040fc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800408e:	4b50      	ldr	r3, [pc, #320]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800409a:	4b4d      	ldr	r3, [pc, #308]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	0f1b      	lsrs	r3, r3, #28
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	e006      	b.n	80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80040a6:	4b4a      	ldr	r3, [pc, #296]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80040a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80040ac:	041b      	lsls	r3, r3, #16
 80040ae:	0f1b      	lsrs	r3, r3, #28
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	4a49      	ldr	r2, [pc, #292]	@ (80041dc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80040b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	ee07 3a90 	vmov	s15, r3
 80040c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	ee07 3a90 	vmov	s15, r3
 80040d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040da:	ed97 6a02 	vldr	s12, [r7, #8]
 80040de:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80041d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80040e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80040f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040fa:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80040fc:	4b34      	ldr	r3, [pc, #208]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80040fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004100:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d017      	beq.n	8004138 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004108:	4b31      	ldr	r3, [pc, #196]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800410a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410c:	0a5b      	lsrs	r3, r3, #9
 800410e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800411a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800411e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004122:	edd7 6a07 	vldr	s13, [r7, #28]
 8004126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800412a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800412e:	ee17 2a90 	vmov	r2, s15
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	e002      	b.n	800413e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800413e:	4b24      	ldr	r3, [pc, #144]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d017      	beq.n	800417a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800414a:	4b21      	ldr	r3, [pc, #132]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800414c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414e:	0c1b      	lsrs	r3, r3, #16
 8004150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004154:	ee07 3a90 	vmov	s15, r3
 8004158:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800415c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004160:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004164:	edd7 6a07 	vldr	s13, [r7, #28]
 8004168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800416c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004170:	ee17 2a90 	vmov	r2, s15
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	605a      	str	r2, [r3, #4]
 8004178:	e002      	b.n	8004180 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004180:	4b13      	ldr	r3, [pc, #76]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004184:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d017      	beq.n	80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800418c:	4b10      	ldr	r3, [pc, #64]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800418e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004190:	0e1b      	lsrs	r3, r3, #24
 8004192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800419e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041a2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80041a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80041aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041b2:	ee17 2a90 	vmov	r2, s15
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80041ba:	e002      	b.n	80041c2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	609a      	str	r2, [r3, #8]
}
 80041c2:	bf00      	nop
 80041c4:	3724      	adds	r7, #36	@ 0x24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	46020c00 	.word	0x46020c00
 80041d4:	4b742400 	.word	0x4b742400
 80041d8:	46000000 	.word	0x46000000
 80041dc:	08006d24 	.word	0x08006d24

080041e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08e      	sub	sp, #56	@ 0x38
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80041ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ee:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80041f2:	430b      	orrs	r3, r1
 80041f4:	d145      	bne.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80041f6:	4ba7      	ldr	r3, [pc, #668]	@ (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80041f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004200:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004202:	4ba4      	ldr	r3, [pc, #656]	@ (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b02      	cmp	r3, #2
 800420e:	d108      	bne.n	8004222 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004216:	d104      	bne.n	8004222 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004218:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800421c:	637b      	str	r3, [r7, #52]	@ 0x34
 800421e:	f001 b9b3 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004222:	4b9c      	ldr	r3, [pc, #624]	@ (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004224:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004228:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800422c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004230:	d114      	bne.n	800425c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004238:	d110      	bne.n	800425c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800423a:	4b96      	ldr	r3, [pc, #600]	@ (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800423c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004244:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004248:	d103      	bne.n	8004252 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800424a:	23fa      	movs	r3, #250	@ 0xfa
 800424c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800424e:	f001 b99b 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8004252:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004256:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004258:	f001 b996 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800425c:	4b8d      	ldr	r3, [pc, #564]	@ (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004264:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004268:	d107      	bne.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800426a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004270:	d103      	bne.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8004272:	4b89      	ldr	r3, [pc, #548]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004274:	637b      	str	r3, [r7, #52]	@ 0x34
 8004276:	f001 b987 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	637b      	str	r3, [r7, #52]	@ 0x34
 800427e:	f001 b983 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004282:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004286:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800428a:	430b      	orrs	r3, r1
 800428c:	d151      	bne.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800428e:	4b81      	ldr	r3, [pc, #516]	@ (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004290:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004294:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004298:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800429a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429c:	2b80      	cmp	r3, #128	@ 0x80
 800429e:	d035      	beq.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80042a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a2:	2b80      	cmp	r3, #128	@ 0x80
 80042a4:	d841      	bhi.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80042a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a8:	2b60      	cmp	r3, #96	@ 0x60
 80042aa:	d02a      	beq.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80042ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ae:	2b60      	cmp	r3, #96	@ 0x60
 80042b0:	d83b      	bhi.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80042b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b4:	2b40      	cmp	r3, #64	@ 0x40
 80042b6:	d009      	beq.n	80042cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80042b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ba:	2b40      	cmp	r3, #64	@ 0x40
 80042bc:	d835      	bhi.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80042be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00c      	beq.n	80042de <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80042c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	d012      	beq.n	80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80042ca:	e02e      	b.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80042cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff fb77 	bl	80039c4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80042d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042da:	f001 b955 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042de:	f107 0318 	add.w	r3, r7, #24
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff fcc8 	bl	8003c78 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042ec:	f001 b94c 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80042f0:	f107 030c 	add.w	r3, r7, #12
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fe19 	bl	8003f2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042fe:	f001 b943 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004302:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004306:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004308:	f001 b93e 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800430c:	4b61      	ldr	r3, [pc, #388]	@ (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004318:	d103      	bne.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800431a:	4b60      	ldr	r3, [pc, #384]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800431c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800431e:	f001 b933 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004326:	f001 b92f 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800432e:	f001 b92b 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004332:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004336:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800433a:	430b      	orrs	r3, r1
 800433c:	d158      	bne.n	80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800433e:	4b55      	ldr	r3, [pc, #340]	@ (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004340:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004344:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004348:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800434a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004350:	d03b      	beq.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004354:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004358:	d846      	bhi.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800435a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004360:	d02e      	beq.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004364:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004368:	d83e      	bhi.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800436a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004370:	d00b      	beq.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8004372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004378:	d836      	bhi.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800437a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00d      	beq.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004386:	d012      	beq.n	80043ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8004388:	e02e      	b.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800438a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff fb18 	bl	80039c4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004396:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004398:	f001 b8f6 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800439c:	f107 0318 	add.w	r3, r7, #24
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff fc69 	bl	8003c78 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043aa:	f001 b8ed 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80043ae:	f107 030c 	add.w	r3, r7, #12
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff fdba 	bl	8003f2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043bc:	f001 b8e4 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80043c0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80043c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043c6:	f001 b8df 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043ca:	4b32      	ldr	r3, [pc, #200]	@ (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043d6:	d103      	bne.n	80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80043d8:	4b30      	ldr	r3, [pc, #192]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80043da:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80043dc:	f001 b8d4 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043e4:	f001 b8d0 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043ec:	f001 b8cc 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80043f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043f4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80043f8:	430b      	orrs	r3, r1
 80043fa:	d126      	bne.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80043fc:	4b25      	ldr	r3, [pc, #148]	@ (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80043fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004402:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004406:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004408:	4b22      	ldr	r3, [pc, #136]	@ (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004410:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004414:	d106      	bne.n	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004418:	2b00      	cmp	r3, #0
 800441a:	d103      	bne.n	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800441c:	4b1f      	ldr	r3, [pc, #124]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800441e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004420:	f001 b8b2 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004424:	4b1b      	ldr	r3, [pc, #108]	@ (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004430:	d107      	bne.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8004432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004438:	d103      	bne.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800443a:	4b19      	ldr	r3, [pc, #100]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800443c:	637b      	str	r3, [r7, #52]	@ 0x34
 800443e:	f001 b8a3 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	637b      	str	r3, [r7, #52]	@ 0x34
 8004446:	f001 b89f 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800444a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800444e:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8004452:	430b      	orrs	r3, r1
 8004454:	d16e      	bne.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004456:	4b0f      	ldr	r3, [pc, #60]	@ (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800445c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004460:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004464:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004468:	d03d      	beq.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800446a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004470:	d85c      	bhi.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004474:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004478:	d014      	beq.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800447a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004480:	d854      	bhi.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01f      	beq.n	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8004488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800448e:	d012      	beq.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004490:	e04c      	b.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004492:	bf00      	nop
 8004494:	46020c00 	.word	0x46020c00
 8004498:	0007a120 	.word	0x0007a120
 800449c:	00f42400 	.word	0x00f42400
 80044a0:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80044a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff fa8b 	bl	80039c4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80044ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044b2:	f001 b869 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044b6:	f107 0318 	add.w	r3, r7, #24
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff fbdc 	bl	8003c78 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044c4:	f001 b860 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80044c8:	4ba7      	ldr	r3, [pc, #668]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044d4:	d103      	bne.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80044d6:	4ba5      	ldr	r3, [pc, #660]	@ (800476c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80044d8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80044da:	f001 b855 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044e2:	f001 b851 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80044e6:	4ba0      	ldr	r3, [pc, #640]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	d118      	bne.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80044f2:	4b9d      	ldr	r3, [pc, #628]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80044fe:	4b9a      	ldr	r3, [pc, #616]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	0e1b      	lsrs	r3, r3, #24
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	e006      	b.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800450a:	4b97      	ldr	r3, [pc, #604]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800450c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004510:	041b      	lsls	r3, r3, #16
 8004512:	0e1b      	lsrs	r3, r3, #24
 8004514:	f003 030f 	and.w	r3, r3, #15
 8004518:	4a95      	ldr	r2, [pc, #596]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800451a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800451e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004520:	f001 b832 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004528:	f001 b82e 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004530:	f001 b82a 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004534:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004538:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800453c:	430b      	orrs	r3, r1
 800453e:	d17f      	bne.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004540:	4b89      	ldr	r3, [pc, #548]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004542:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800454a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800454c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454e:	2b00      	cmp	r3, #0
 8004550:	d165      	bne.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004552:	4b85      	ldr	r3, [pc, #532]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004558:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800455c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800455e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004560:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004564:	d034      	beq.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8004566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004568:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800456c:	d853      	bhi.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004570:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004574:	d00b      	beq.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8004576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004578:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800457c:	d84b      	bhi.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800457e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004580:	2b00      	cmp	r3, #0
 8004582:	d016      	beq.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8004584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004586:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800458a:	d009      	beq.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800458c:	e043      	b.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800458e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff fa16 	bl	80039c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800459c:	f000 bff4 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045a0:	f107 0318 	add.w	r3, r7, #24
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff fb67 	bl	8003c78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80045ae:	f000 bfeb 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80045b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045be:	d103      	bne.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 80045c0:	4b6a      	ldr	r3, [pc, #424]	@ (800476c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80045c2:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80045c4:	f000 bfe0 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80045cc:	f000 bfdc 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80045d0:	4b65      	ldr	r3, [pc, #404]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0320 	and.w	r3, r3, #32
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d118      	bne.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80045dc:	4b62      	ldr	r3, [pc, #392]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80045e8:	4b5f      	ldr	r3, [pc, #380]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	0e1b      	lsrs	r3, r3, #24
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	e006      	b.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80045f4:	4b5c      	ldr	r3, [pc, #368]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80045f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80045fa:	041b      	lsls	r3, r3, #16
 80045fc:	0e1b      	lsrs	r3, r3, #24
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	4a5b      	ldr	r2, [pc, #364]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004608:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800460a:	f000 bfbd 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004612:	f000 bfb9 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800461a:	f000 bfb5 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800461e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004620:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004624:	d108      	bne.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff f9ca 	bl	80039c4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004632:	637b      	str	r3, [r7, #52]	@ 0x34
 8004634:	f000 bfa8 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	637b      	str	r3, [r7, #52]	@ 0x34
 800463c:	f000 bfa4 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004644:	1e51      	subs	r1, r2, #1
 8004646:	430b      	orrs	r3, r1
 8004648:	d136      	bne.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800464a:	4b47      	ldr	r3, [pc, #284]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800464c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004658:	2b00      	cmp	r3, #0
 800465a:	d104      	bne.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800465c:	f7fe fb44 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 8004660:	6378      	str	r0, [r7, #52]	@ 0x34
 8004662:	f000 bf91 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004668:	2b01      	cmp	r3, #1
 800466a:	d104      	bne.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800466c:	f7fe fa0c 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8004670:	6378      	str	r0, [r7, #52]	@ 0x34
 8004672:	f000 bf89 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004676:	4b3c      	ldr	r3, [pc, #240]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800467e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004682:	d106      	bne.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8004684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004686:	2b02      	cmp	r3, #2
 8004688:	d103      	bne.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800468a:	4b3a      	ldr	r3, [pc, #232]	@ (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800468c:	637b      	str	r3, [r7, #52]	@ 0x34
 800468e:	f000 bf7b 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004692:	4b35      	ldr	r3, [pc, #212]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b02      	cmp	r3, #2
 800469e:	d107      	bne.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80046a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d104      	bne.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 80046a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80046ac:	f000 bf6c 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80046b4:	f000 bf68 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80046b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046bc:	1e91      	subs	r1, r2, #2
 80046be:	430b      	orrs	r3, r1
 80046c0:	d136      	bne.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80046c2:	4b29      	ldr	r3, [pc, #164]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80046c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046c8:	f003 030c 	and.w	r3, r3, #12
 80046cc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80046ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d104      	bne.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80046d4:	f7fe faf4 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 80046d8:	6378      	str	r0, [r7, #52]	@ 0x34
 80046da:	f000 bf55 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80046de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d104      	bne.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80046e4:	f7fe f9d0 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 80046e8:	6378      	str	r0, [r7, #52]	@ 0x34
 80046ea:	f000 bf4d 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80046ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046fa:	d106      	bne.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80046fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d103      	bne.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8004702:	4b1c      	ldr	r3, [pc, #112]	@ (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004704:	637b      	str	r3, [r7, #52]	@ 0x34
 8004706:	f000 bf3f 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800470a:	4b17      	ldr	r3, [pc, #92]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800470c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b02      	cmp	r3, #2
 8004716:	d107      	bne.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8004718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d104      	bne.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800471e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004722:	637b      	str	r3, [r7, #52]	@ 0x34
 8004724:	f000 bf30 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	637b      	str	r3, [r7, #52]	@ 0x34
 800472c:	f000 bf2c 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004730:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004734:	1f11      	subs	r1, r2, #4
 8004736:	430b      	orrs	r3, r1
 8004738:	d13f      	bne.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800473a:	4b0b      	ldr	r3, [pc, #44]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800473c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004740:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004744:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004748:	2b00      	cmp	r3, #0
 800474a:	d104      	bne.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800474c:	f7fe fab8 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8004750:	6378      	str	r0, [r7, #52]	@ 0x34
 8004752:	f000 bf19 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8004756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004758:	2b10      	cmp	r3, #16
 800475a:	d10d      	bne.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800475c:	f7fe f994 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8004760:	6378      	str	r0, [r7, #52]	@ 0x34
 8004762:	f000 bf11 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8004766:	bf00      	nop
 8004768:	46020c00 	.word	0x46020c00
 800476c:	02dc6c00 	.word	0x02dc6c00
 8004770:	08006d24 	.word	0x08006d24
 8004774:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004778:	4ba6      	ldr	r3, [pc, #664]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004780:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004784:	d106      	bne.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8004786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004788:	2b20      	cmp	r3, #32
 800478a:	d103      	bne.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800478c:	4ba2      	ldr	r3, [pc, #648]	@ (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800478e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004790:	f000 befa 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004794:	4b9f      	ldr	r3, [pc, #636]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d107      	bne.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80047a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a4:	2b30      	cmp	r3, #48	@ 0x30
 80047a6:	d104      	bne.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 80047a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ae:	f000 beeb 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80047b6:	f000 bee7 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80047ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047be:	f1a2 0108 	sub.w	r1, r2, #8
 80047c2:	430b      	orrs	r3, r1
 80047c4:	d136      	bne.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80047c6:	4b93      	ldr	r3, [pc, #588]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80047c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047cc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80047d0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80047d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d104      	bne.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80047d8:	f7fe fa72 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 80047dc:	6378      	str	r0, [r7, #52]	@ 0x34
 80047de:	f000 bed3 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80047e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e4:	2b40      	cmp	r3, #64	@ 0x40
 80047e6:	d104      	bne.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80047e8:	f7fe f94e 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 80047ec:	6378      	str	r0, [r7, #52]	@ 0x34
 80047ee:	f000 becb 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80047f2:	4b88      	ldr	r3, [pc, #544]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047fe:	d106      	bne.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8004800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004802:	2b80      	cmp	r3, #128	@ 0x80
 8004804:	d103      	bne.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8004806:	4b84      	ldr	r3, [pc, #528]	@ (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004808:	637b      	str	r3, [r7, #52]	@ 0x34
 800480a:	f000 bebd 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800480e:	4b81      	ldr	r3, [pc, #516]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b02      	cmp	r3, #2
 800481a:	d107      	bne.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800481c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004820:	d104      	bne.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8004822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004826:	637b      	str	r3, [r7, #52]	@ 0x34
 8004828:	f000 beae 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004830:	f000 beaa 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004834:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004838:	f1a2 0110 	sub.w	r1, r2, #16
 800483c:	430b      	orrs	r3, r1
 800483e:	d139      	bne.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004840:	4b74      	ldr	r3, [pc, #464]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800484a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800484c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484e:	2b00      	cmp	r3, #0
 8004850:	d104      	bne.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004852:	f7fe fa35 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8004856:	6378      	str	r0, [r7, #52]	@ 0x34
 8004858:	f000 be96 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004862:	d104      	bne.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004864:	f7fe f910 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8004868:	6378      	str	r0, [r7, #52]	@ 0x34
 800486a:	f000 be8d 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800486e:	4b69      	ldr	r3, [pc, #420]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800487a:	d107      	bne.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800487c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004882:	d103      	bne.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8004884:	4b64      	ldr	r3, [pc, #400]	@ (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004886:	637b      	str	r3, [r7, #52]	@ 0x34
 8004888:	f000 be7e 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800488c:	4b61      	ldr	r3, [pc, #388]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800488e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b02      	cmp	r3, #2
 8004898:	d108      	bne.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800489a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048a0:	d104      	bne.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 80048a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80048a8:	f000 be6e 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80048b0:	f000 be6a 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80048b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048b8:	f1a2 0120 	sub.w	r1, r2, #32
 80048bc:	430b      	orrs	r3, r1
 80048be:	d158      	bne.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80048c0:	4b54      	ldr	r3, [pc, #336]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80048c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80048cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d104      	bne.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80048d2:	f7fe fa1d 	bl	8002d10 <HAL_RCC_GetPCLK3Freq>
 80048d6:	6378      	str	r0, [r7, #52]	@ 0x34
 80048d8:	f000 be56 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80048dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d104      	bne.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80048e2:	f7fe f8d1 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 80048e6:	6378      	str	r0, [r7, #52]	@ 0x34
 80048e8:	f000 be4e 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80048ec:	4b49      	ldr	r3, [pc, #292]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048f8:	d106      	bne.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80048fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d103      	bne.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8004900:	4b45      	ldr	r3, [pc, #276]	@ (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004902:	637b      	str	r3, [r7, #52]	@ 0x34
 8004904:	f000 be40 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004908:	4b42      	ldr	r3, [pc, #264]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800490a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b02      	cmp	r3, #2
 8004914:	d107      	bne.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8004916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004918:	2b03      	cmp	r3, #3
 800491a:	d104      	bne.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 800491c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004920:	637b      	str	r3, [r7, #52]	@ 0x34
 8004922:	f000 be31 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004926:	4b3b      	ldr	r3, [pc, #236]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b20      	cmp	r3, #32
 8004930:	d11b      	bne.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8004932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004934:	2b04      	cmp	r3, #4
 8004936:	d118      	bne.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004938:	4b36      	ldr	r3, [pc, #216]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8004944:	4b33      	ldr	r3, [pc, #204]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	0e1b      	lsrs	r3, r3, #24
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	e006      	b.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8004950:	4b30      	ldr	r3, [pc, #192]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004952:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004956:	041b      	lsls	r3, r3, #16
 8004958:	0e1b      	lsrs	r3, r3, #24
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	4a2f      	ldr	r2, [pc, #188]	@ (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004964:	637b      	str	r3, [r7, #52]	@ 0x34
 8004966:	f000 be0f 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	637b      	str	r3, [r7, #52]	@ 0x34
 800496e:	f000 be0b 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004976:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800497a:	430b      	orrs	r3, r1
 800497c:	d172      	bne.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800497e:	4b25      	ldr	r3, [pc, #148]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004980:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004984:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004988:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800498a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004990:	d104      	bne.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004992:	f7fe f879 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8004996:	6378      	str	r0, [r7, #52]	@ 0x34
 8004998:	f000 bdf6 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800499c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049a2:	d108      	bne.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049a4:	f107 0318 	add.w	r3, r7, #24
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff f965 	bl	8003c78 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049b2:	f000 bde9 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80049b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d104      	bne.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80049bc:	f7fe f966 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 80049c0:	6378      	str	r0, [r7, #52]	@ 0x34
 80049c2:	f000 bde1 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80049c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80049cc:	d128      	bne.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80049ce:	4b11      	ldr	r3, [pc, #68]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0320 	and.w	r3, r3, #32
 80049d6:	2b20      	cmp	r3, #32
 80049d8:	d118      	bne.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80049da:	4b0e      	ldr	r3, [pc, #56]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d005      	beq.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80049e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	0e1b      	lsrs	r3, r3, #24
 80049ec:	f003 030f 	and.w	r3, r3, #15
 80049f0:	e006      	b.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80049f2:	4b08      	ldr	r3, [pc, #32]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80049f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049f8:	041b      	lsls	r3, r3, #16
 80049fa:	0e1b      	lsrs	r3, r3, #24
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	4a06      	ldr	r2, [pc, #24]	@ (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a08:	f000 bdbe 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a10:	f000 bdba 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8004a14:	46020c00 	.word	0x46020c00
 8004a18:	00f42400 	.word	0x00f42400
 8004a1c:	08006d24 	.word	0x08006d24
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004a20:	4baf      	ldr	r3, [pc, #700]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a2c:	d107      	bne.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a34:	d103      	bne.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8004a36:	4bab      	ldr	r3, [pc, #684]	@ (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8004a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a3a:	f000 bda5 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004a3e:	4ba8      	ldr	r3, [pc, #672]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a4a:	d107      	bne.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a52:	d103      	bne.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8004a54:	4ba3      	ldr	r3, [pc, #652]	@ (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8004a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a58:	f000 bd96 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a60:	f000 bd92 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8004a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a68:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	d158      	bne.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004a70:	4b9b      	ldr	r3, [pc, #620]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004a72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d84b      	bhi.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8004a82:	a201      	add	r2, pc, #4	@ (adr r2, 8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8004a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a88:	08004ac1 	.word	0x08004ac1
 8004a8c:	08004a9d 	.word	0x08004a9d
 8004a90:	08004aaf 	.word	0x08004aaf
 8004a94:	08004acb 	.word	0x08004acb
 8004a98:	08004ad5 	.word	0x08004ad5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fe ff8f 	bl	80039c4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004aaa:	f000 bd6d 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004aae:	f107 030c 	add.w	r3, r7, #12
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff fa3a 	bl	8003f2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004abc:	f000 bd64 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004ac0:	f7fe f8e4 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8004ac4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004ac6:	f000 bd5f 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004aca:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004ace:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ad0:	f000 bd5a 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004ad4:	4b82      	ldr	r3, [pc, #520]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0320 	and.w	r3, r3, #32
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	d118      	bne.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ae0:	4b7f      	ldr	r3, [pc, #508]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8004aec:	4b7c      	ldr	r3, [pc, #496]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	0e1b      	lsrs	r3, r3, #24
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	e006      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8004af8:	4b79      	ldr	r3, [pc, #484]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004afa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004afe:	041b      	lsls	r3, r3, #16
 8004b00:	0e1b      	lsrs	r3, r3, #24
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	4a78      	ldr	r2, [pc, #480]	@ (8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8004b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b0c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004b0e:	f000 bd3b 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b16:	f000 bd37 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b1e:	f000 bd33 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004b22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b26:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8004b2a:	430b      	orrs	r3, r1
 8004b2c:	d167      	bne.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004b2e:	4b6c      	ldr	r3, [pc, #432]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004b30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b34:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004b38:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b40:	d036      	beq.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8004b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b48:	d855      	bhi.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b50:	d029      	beq.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8004b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b58:	d84d      	bhi.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b60:	d013      	beq.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8004b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b68:	d845      	bhi.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d015      	beq.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8004b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b76:	d13e      	bne.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fe ff21 	bl	80039c4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b86:	f000 bcff 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b8a:	f107 030c 	add.w	r3, r7, #12
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff f9cc 	bl	8003f2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b98:	f000 bcf6 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004b9c:	f7fe f876 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8004ba0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004ba2:	f000 bcf1 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004ba6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004baa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bac:	f000 bcec 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004bb0:	4b4b      	ldr	r3, [pc, #300]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b20      	cmp	r3, #32
 8004bba:	d118      	bne.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004bbc:	4b48      	ldr	r3, [pc, #288]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8004bc8:	4b45      	ldr	r3, [pc, #276]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	0e1b      	lsrs	r3, r3, #24
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	e006      	b.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8004bd4:	4b42      	ldr	r3, [pc, #264]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004bd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004bda:	041b      	lsls	r3, r3, #16
 8004bdc:	0e1b      	lsrs	r3, r3, #24
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	4a41      	ldr	r2, [pc, #260]	@ (8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8004be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004bea:	f000 bccd 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bf2:	f000 bcc9 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bfa:	f000 bcc5 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004bfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c02:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8004c06:	430b      	orrs	r3, r1
 8004c08:	d14c      	bne.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004c0a:	4b35      	ldr	r3, [pc, #212]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c14:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d104      	bne.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004c1c:	f7fe f850 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8004c20:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c22:	f000 bcb1 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c2c:	d104      	bne.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004c2e:	f7fd ff2b 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8004c32:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c34:	f000 bca8 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004c38:	4b29      	ldr	r3, [pc, #164]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c44:	d107      	bne.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8004c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c4c:	d103      	bne.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8004c4e:	4b25      	ldr	r3, [pc, #148]	@ (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8004c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c52:	f000 bc99 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8004c56:	4b22      	ldr	r3, [pc, #136]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b20      	cmp	r3, #32
 8004c60:	d11c      	bne.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8004c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c68:	d118      	bne.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8004c76:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	0e1b      	lsrs	r3, r3, #24
 8004c7c:	f003 030f 	and.w	r3, r3, #15
 8004c80:	e006      	b.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8004c82:	4b17      	ldr	r3, [pc, #92]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004c84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c88:	041b      	lsls	r3, r3, #16
 8004c8a:	0e1b      	lsrs	r3, r3, #24
 8004c8c:	f003 030f 	and.w	r3, r3, #15
 8004c90:	4a15      	ldr	r2, [pc, #84]	@ (8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8004c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c96:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c98:	f000 bc76 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ca0:	f000 bc72 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004ca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ca8:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8004cac:	430b      	orrs	r3, r1
 8004cae:	d153      	bne.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cb6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004cba:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d104      	bne.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004cc2:	f7fd fffd 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8004cc6:	6378      	str	r0, [r7, #52]	@ 0x34
 8004cc8:	f000 bc5e 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cd2:	d10b      	bne.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004cd4:	f7fd fed8 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8004cd8:	6378      	str	r0, [r7, #52]	@ 0x34
 8004cda:	f000 bc55 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8004cde:	bf00      	nop
 8004ce0:	46020c00 	.word	0x46020c00
 8004ce4:	00f42400 	.word	0x00f42400
 8004ce8:	08006d24 	.word	0x08006d24
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004cec:	4ba1      	ldr	r3, [pc, #644]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cf8:	d107      	bne.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d00:	d103      	bne.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8004d02:	4b9d      	ldr	r3, [pc, #628]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8004d04:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d06:	f000 bc3f 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004d0a:	4b9a      	ldr	r3, [pc, #616]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b20      	cmp	r3, #32
 8004d14:	d11c      	bne.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8004d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d1c:	d118      	bne.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d1e:	4b95      	ldr	r3, [pc, #596]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8004d2a:	4b92      	ldr	r3, [pc, #584]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	0e1b      	lsrs	r3, r3, #24
 8004d30:	f003 030f 	and.w	r3, r3, #15
 8004d34:	e006      	b.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8004d36:	4b8f      	ldr	r3, [pc, #572]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d3c:	041b      	lsls	r3, r3, #16
 8004d3e:	0e1b      	lsrs	r3, r3, #24
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	4a8d      	ldr	r2, [pc, #564]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8004d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d4c:	f000 bc1c 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d54:	f000 bc18 	b.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004d58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d5c:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8004d60:	430b      	orrs	r3, r1
 8004d62:	d151      	bne.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004d64:	4b83      	ldr	r3, [pc, #524]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004d66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d6a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004d6e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d72:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d74:	d024      	beq.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d7a:	d842      	bhi.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7e:	2b80      	cmp	r3, #128	@ 0x80
 8004d80:	d00d      	beq.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8004d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d84:	2b80      	cmp	r3, #128	@ 0x80
 8004d86:	d83c      	bhi.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8004d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d90:	2b40      	cmp	r3, #64	@ 0x40
 8004d92:	d011      	beq.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8004d94:	e035      	b.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8004d96:	f7fd ffbb 	bl	8002d10 <HAL_RCC_GetPCLK3Freq>
 8004d9a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004d9c:	e3f4      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d9e:	4b75      	ldr	r3, [pc, #468]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004daa:	d102      	bne.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8004dac:	4b72      	ldr	r3, [pc, #456]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8004dae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004db0:	e3ea      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004db6:	e3e7      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004db8:	f7fd fe66 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8004dbc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004dbe:	e3e3      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004dc0:	4b6c      	ldr	r3, [pc, #432]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d117      	bne.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004dcc:	4b69      	ldr	r3, [pc, #420]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8004dd8:	4b66      	ldr	r3, [pc, #408]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	0e1b      	lsrs	r3, r3, #24
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	e006      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8004de4:	4b63      	ldr	r3, [pc, #396]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004de6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004dea:	041b      	lsls	r3, r3, #16
 8004dec:	0e1b      	lsrs	r3, r3, #24
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	4a62      	ldr	r2, [pc, #392]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8004df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004dfa:	e3c5      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e00:	e3c2      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e06:	e3bf      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8004e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e0c:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8004e10:	430b      	orrs	r3, r1
 8004e12:	d147      	bne.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004e14:	4b57      	ldr	r3, [pc, #348]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e1a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004e1e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d103      	bne.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004e26:	f7fd ff4b 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8004e2a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e2c:	e3ac      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e34:	d103      	bne.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004e36:	f7fd fe27 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8004e3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e3c:	e3a4      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004e3e:	4b4d      	ldr	r3, [pc, #308]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e4a:	d106      	bne.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e52:	d102      	bne.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8004e54:	4b48      	ldr	r3, [pc, #288]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8004e56:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e58:	e396      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004e5a:	4b46      	ldr	r3, [pc, #280]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d11b      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8004e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e68:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004e6c:	d117      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e6e:	4b41      	ldr	r3, [pc, #260]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8004e7a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	0e1b      	lsrs	r3, r3, #24
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	e006      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8004e86:	4b3b      	ldr	r3, [pc, #236]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004e88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e8c:	041b      	lsls	r3, r3, #16
 8004e8e:	0e1b      	lsrs	r3, r3, #24
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	4a39      	ldr	r2, [pc, #228]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8004e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e9c:	e374      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ea2:	e371      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8004ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ea8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8004eac:	430b      	orrs	r3, r1
 8004eae:	d16a      	bne.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8004eb0:	4b30      	ldr	r3, [pc, #192]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004eb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eba:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d120      	bne.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d117      	bne.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ece:	4b29      	ldr	r3, [pc, #164]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d005      	beq.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 8004eda:	4b26      	ldr	r3, [pc, #152]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	0e1b      	lsrs	r3, r3, #24
 8004ee0:	f003 030f 	and.w	r3, r3, #15
 8004ee4:	e006      	b.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8004ee6:	4b23      	ldr	r3, [pc, #140]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004ee8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004eec:	041b      	lsls	r3, r3, #16
 8004eee:	0e1b      	lsrs	r3, r3, #24
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	4a21      	ldr	r2, [pc, #132]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8004ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004efc:	e344      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f02:	e341      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004f04:	4b1b      	ldr	r3, [pc, #108]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f12:	d112      	bne.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8004f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f1a:	d10e      	bne.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004f1c:	4b15      	ldr	r3, [pc, #84]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004f1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f2a:	d102      	bne.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8004f2c:	23fa      	movs	r3, #250	@ 0xfa
 8004f2e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004f30:	e32a      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8004f32:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004f36:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004f38:	e326      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8004f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f46:	d106      	bne.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8004f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f4e:	d102      	bne.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8004f50:	4b09      	ldr	r3, [pc, #36]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8004f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f54:	e318      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8004f56:	4b07      	ldr	r3, [pc, #28]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d10d      	bne.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8004f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f6a:	d109      	bne.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8004f6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f72:	e309      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8004f74:	46020c00 	.word	0x46020c00
 8004f78:	00f42400 	.word	0x00f42400
 8004f7c:	08006d24 	.word	0x08006d24
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f84:	e300      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8004f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f8a:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8004f8e:	430b      	orrs	r3, r1
 8004f90:	d164      	bne.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004f92:	4ba2      	ldr	r3, [pc, #648]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f9c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d120      	bne.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004fa4:	4b9d      	ldr	r3, [pc, #628]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d117      	bne.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004fb0:	4b9a      	ldr	r3, [pc, #616]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8004fbc:	4b97      	ldr	r3, [pc, #604]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	0e1b      	lsrs	r3, r3, #24
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	e006      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8004fc8:	4b94      	ldr	r3, [pc, #592]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004fca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004fce:	041b      	lsls	r3, r3, #16
 8004fd0:	0e1b      	lsrs	r3, r3, #24
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	4a92      	ldr	r2, [pc, #584]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8004fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fde:	e2d3      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fe4:	e2d0      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004fe6:	4b8d      	ldr	r3, [pc, #564]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004fe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ff0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ff4:	d112      	bne.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ffc:	d10e      	bne.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004ffe:	4b87      	ldr	r3, [pc, #540]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005000:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005008:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800500c:	d102      	bne.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 800500e:	23fa      	movs	r3, #250	@ 0xfa
 8005010:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005012:	e2b9      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8005014:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005018:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800501a:	e2b5      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800501c:	4b7f      	ldr	r3, [pc, #508]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005028:	d106      	bne.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 800502a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005030:	d102      	bne.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8005032:	4b7c      	ldr	r3, [pc, #496]	@ (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8005034:	637b      	str	r3, [r7, #52]	@ 0x34
 8005036:	e2a7      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005038:	4b78      	ldr	r3, [pc, #480]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800503a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b02      	cmp	r3, #2
 8005044:	d107      	bne.n	8005056 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8005046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005048:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800504c:	d103      	bne.n	8005056 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 800504e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005052:	637b      	str	r3, [r7, #52]	@ 0x34
 8005054:	e298      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	637b      	str	r3, [r7, #52]	@ 0x34
 800505a:	e295      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800505c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005060:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005064:	430b      	orrs	r3, r1
 8005066:	d147      	bne.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005068:	4b6c      	ldr	r3, [pc, #432]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800506a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800506e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005072:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005076:	2b00      	cmp	r3, #0
 8005078:	d103      	bne.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800507a:	f7fd fe21 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 800507e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005080:	e282      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005082:	4b66      	ldr	r3, [pc, #408]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800508c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005090:	d112      	bne.n	80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8005092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005094:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005098:	d10e      	bne.n	80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800509a:	4b60      	ldr	r3, [pc, #384]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800509c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050a8:	d102      	bne.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 80050aa:	23fa      	movs	r3, #250	@ 0xfa
 80050ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80050ae:	e26b      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80050b0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80050b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80050b6:	e267      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80050b8:	4b58      	ldr	r3, [pc, #352]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050c4:	d106      	bne.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 80050c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80050cc:	d102      	bne.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 80050ce:	4b55      	ldr	r3, [pc, #340]	@ (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80050d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80050d2:	e259      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80050d4:	4b51      	ldr	r3, [pc, #324]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80050d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d107      	bne.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 80050e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80050e8:	d103      	bne.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 80050ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80050f0:	e24a      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80050f6:	e247      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80050f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050fc:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8005100:	430b      	orrs	r3, r1
 8005102:	d12d      	bne.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005104:	4b45      	ldr	r3, [pc, #276]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800510a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800510e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005110:	4b42      	ldr	r3, [pc, #264]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005118:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800511c:	d105      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800511e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005120:	2b00      	cmp	r3, #0
 8005122:	d102      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8005124:	4b3f      	ldr	r3, [pc, #252]	@ (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8005126:	637b      	str	r3, [r7, #52]	@ 0x34
 8005128:	e22e      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800512a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005130:	d107      	bne.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005136:	4618      	mov	r0, r3
 8005138:	f7fe fc44 	bl	80039c4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800513c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005140:	e222      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005144:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005148:	d107      	bne.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800514a:	f107 0318 	add.w	r3, r7, #24
 800514e:	4618      	mov	r0, r3
 8005150:	f7fe fd92 	bl	8003c78 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	637b      	str	r3, [r7, #52]	@ 0x34
 8005158:	e216      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	637b      	str	r3, [r7, #52]	@ 0x34
 800515e:	e213      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005164:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8005168:	430b      	orrs	r3, r1
 800516a:	d15d      	bne.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800516c:	4b2b      	ldr	r3, [pc, #172]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800516e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005172:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005176:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800517e:	d028      	beq.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8005180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005182:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005186:	d845      	bhi.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8005188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800518e:	d013      	beq.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8005190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005192:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005196:	d83d      	bhi.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8005198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519a:	2b00      	cmp	r3, #0
 800519c:	d004      	beq.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800519e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051a4:	d004      	beq.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80051a6:	e035      	b.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80051a8:	f7fd fd9e 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 80051ac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80051ae:	e1eb      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80051b0:	f7fd fc6a 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 80051b4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80051b6:	e1e7      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051b8:	4b18      	ldr	r3, [pc, #96]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051c4:	d102      	bne.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80051c6:	4b17      	ldr	r3, [pc, #92]	@ (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80051c8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80051ca:	e1dd      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80051d0:	e1da      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80051d2:	4b12      	ldr	r3, [pc, #72]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b20      	cmp	r3, #32
 80051dc:	d117      	bne.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80051de:	4b0f      	ldr	r3, [pc, #60]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d005      	beq.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 80051ea:	4b0c      	ldr	r3, [pc, #48]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	0e1b      	lsrs	r3, r3, #24
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	e006      	b.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 80051f6:	4b09      	ldr	r3, [pc, #36]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80051f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80051fc:	041b      	lsls	r3, r3, #16
 80051fe:	0e1b      	lsrs	r3, r3, #24
 8005200:	f003 030f 	and.w	r3, r3, #15
 8005204:	4a06      	ldr	r2, [pc, #24]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8005206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800520c:	e1bc      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005212:	e1b9      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005218:	e1b6      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800521a:	bf00      	nop
 800521c:	46020c00 	.word	0x46020c00
 8005220:	08006d24 	.word	0x08006d24
 8005224:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800522c:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8005230:	430b      	orrs	r3, r1
 8005232:	d156      	bne.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005234:	4ba5      	ldr	r3, [pc, #660]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800523a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800523e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005242:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005246:	d028      	beq.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8005248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800524e:	d845      	bhi.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8005250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005252:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005256:	d013      	beq.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8005258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800525e:	d83d      	bhi.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8005260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005262:	2b00      	cmp	r3, #0
 8005264:	d004      	beq.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8005266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800526c:	d004      	beq.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 800526e:	e035      	b.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005270:	f7fd fd26 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8005274:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005276:	e187      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005278:	f7fd fc06 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 800527c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800527e:	e183      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005280:	4b92      	ldr	r3, [pc, #584]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005288:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800528c:	d102      	bne.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 800528e:	4b90      	ldr	r3, [pc, #576]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8005290:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005292:	e179      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005298:	e176      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800529a:	4b8c      	ldr	r3, [pc, #560]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0320 	and.w	r3, r3, #32
 80052a2:	2b20      	cmp	r3, #32
 80052a4:	d117      	bne.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80052a6:	4b89      	ldr	r3, [pc, #548]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 80052b2:	4b86      	ldr	r3, [pc, #536]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	0e1b      	lsrs	r3, r3, #24
 80052b8:	f003 030f 	and.w	r3, r3, #15
 80052bc:	e006      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 80052be:	4b83      	ldr	r3, [pc, #524]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80052c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052c4:	041b      	lsls	r3, r3, #16
 80052c6:	0e1b      	lsrs	r3, r3, #24
 80052c8:	f003 030f 	and.w	r3, r3, #15
 80052cc:	4a81      	ldr	r2, [pc, #516]	@ (80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80052ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80052d4:	e158      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052da:	e155      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052e0:	e152      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80052e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052e6:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80052ea:	430b      	orrs	r3, r1
 80052ec:	d177      	bne.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80052ee:	4b77      	ldr	r3, [pc, #476]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80052f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052f4:	f003 0318 	and.w	r3, r3, #24
 80052f8:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80052fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fc:	2b18      	cmp	r3, #24
 80052fe:	d86b      	bhi.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8005300:	a201      	add	r2, pc, #4	@ (adr r2, 8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8005302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005306:	bf00      	nop
 8005308:	0800536d 	.word	0x0800536d
 800530c:	080053d9 	.word	0x080053d9
 8005310:	080053d9 	.word	0x080053d9
 8005314:	080053d9 	.word	0x080053d9
 8005318:	080053d9 	.word	0x080053d9
 800531c:	080053d9 	.word	0x080053d9
 8005320:	080053d9 	.word	0x080053d9
 8005324:	080053d9 	.word	0x080053d9
 8005328:	08005375 	.word	0x08005375
 800532c:	080053d9 	.word	0x080053d9
 8005330:	080053d9 	.word	0x080053d9
 8005334:	080053d9 	.word	0x080053d9
 8005338:	080053d9 	.word	0x080053d9
 800533c:	080053d9 	.word	0x080053d9
 8005340:	080053d9 	.word	0x080053d9
 8005344:	080053d9 	.word	0x080053d9
 8005348:	0800537d 	.word	0x0800537d
 800534c:	080053d9 	.word	0x080053d9
 8005350:	080053d9 	.word	0x080053d9
 8005354:	080053d9 	.word	0x080053d9
 8005358:	080053d9 	.word	0x080053d9
 800535c:	080053d9 	.word	0x080053d9
 8005360:	080053d9 	.word	0x080053d9
 8005364:	080053d9 	.word	0x080053d9
 8005368:	08005397 	.word	0x08005397
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800536c:	f7fd fcd0 	bl	8002d10 <HAL_RCC_GetPCLK3Freq>
 8005370:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005372:	e109      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005374:	f7fd fb88 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8005378:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800537a:	e105      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800537c:	4b53      	ldr	r3, [pc, #332]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005384:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005388:	d102      	bne.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 800538a:	4b51      	ldr	r3, [pc, #324]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800538c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800538e:	e0fb      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005394:	e0f8      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005396:	4b4d      	ldr	r3, [pc, #308]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b20      	cmp	r3, #32
 80053a0:	d117      	bne.n	80053d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80053a2:	4b4a      	ldr	r3, [pc, #296]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d005      	beq.n	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 80053ae:	4b47      	ldr	r3, [pc, #284]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	0e1b      	lsrs	r3, r3, #24
 80053b4:	f003 030f 	and.w	r3, r3, #15
 80053b8:	e006      	b.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 80053ba:	4b44      	ldr	r3, [pc, #272]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80053bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053c0:	041b      	lsls	r3, r3, #16
 80053c2:	0e1b      	lsrs	r3, r3, #24
 80053c4:	f003 030f 	and.w	r3, r3, #15
 80053c8:	4a42      	ldr	r2, [pc, #264]	@ (80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80053ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80053d0:	e0da      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053d6:	e0d7      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053dc:	e0d4      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80053de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053e2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80053e6:	430b      	orrs	r3, r1
 80053e8:	d155      	bne.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80053ea:	4b38      	ldr	r3, [pc, #224]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80053ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053f0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80053f4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80053f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053fc:	d013      	beq.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 80053fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005400:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005404:	d844      	bhi.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8005406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005408:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800540c:	d013      	beq.n	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 800540e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005410:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005414:	d83c      	bhi.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8005416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005418:	2b00      	cmp	r3, #0
 800541a:	d014      	beq.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800541c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005422:	d014      	beq.n	800544e <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8005424:	e034      	b.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005426:	f107 0318 	add.w	r3, r7, #24
 800542a:	4618      	mov	r0, r3
 800542c:	f7fe fc24 	bl	8003c78 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005434:	e0a8      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005436:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800543a:	4618      	mov	r0, r3
 800543c:	f7fe fac2 	bl	80039c4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005442:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005444:	e0a0      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005446:	f7fd fb1f 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 800544a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800544c:	e09c      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800544e:	4b1f      	ldr	r3, [pc, #124]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b20      	cmp	r3, #32
 8005458:	d117      	bne.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800545a:	4b1c      	ldr	r3, [pc, #112]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8005466:	4b19      	ldr	r3, [pc, #100]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	0e1b      	lsrs	r3, r3, #24
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	e006      	b.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8005472:	4b16      	ldr	r3, [pc, #88]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005474:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005478:	041b      	lsls	r3, r3, #16
 800547a:	0e1b      	lsrs	r3, r3, #24
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	4a14      	ldr	r2, [pc, #80]	@ (80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8005482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005486:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005488:	e07e      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800548e:	e07b      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005494:	e078      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005496:	e9d7 2300 	ldrd	r2, r3, [r7]
 800549a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800549e:	430b      	orrs	r3, r1
 80054a0:	d138      	bne.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80054a2:	4b0a      	ldr	r3, [pc, #40]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80054a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054ac:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80054ae:	4b07      	ldr	r3, [pc, #28]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80054b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d10d      	bne.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 80054bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10a      	bne.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 80054c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80054c8:	e05e      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80054ca:	bf00      	nop
 80054cc:	46020c00 	.word	0x46020c00
 80054d0:	00f42400 	.word	0x00f42400
 80054d4:	08006d24 	.word	0x08006d24
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80054d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80054da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054e6:	d112      	bne.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 80054e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054ee:	d10e      	bne.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80054f0:	4b28      	ldr	r3, [pc, #160]	@ (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80054f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054fe:	d102      	bne.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8005500:	23fa      	movs	r3, #250	@ 0xfa
 8005502:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005504:	e040      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8005506:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800550a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800550c:	e03c      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	637b      	str	r3, [r7, #52]	@ 0x34
 8005512:	e039      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005518:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800551c:	430b      	orrs	r3, r1
 800551e:	d131      	bne.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005520:	4b1c      	ldr	r3, [pc, #112]	@ (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005522:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005526:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800552a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800552c:	4b19      	ldr	r3, [pc, #100]	@ (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005538:	d105      	bne.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 800553a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553c:	2b00      	cmp	r3, #0
 800553e:	d102      	bne.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8005540:	4b15      	ldr	r3, [pc, #84]	@ (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8005542:	637b      	str	r3, [r7, #52]	@ 0x34
 8005544:	e020      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005546:	4b13      	ldr	r3, [pc, #76]	@ (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800554e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005552:	d106      	bne.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8005554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800555a:	d102      	bne.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 800555c:	4b0f      	ldr	r3, [pc, #60]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 800555e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005560:	e012      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005562:	4b0c      	ldr	r3, [pc, #48]	@ (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800556a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800556e:	d106      	bne.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8005570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005572:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005576:	d102      	bne.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8005578:	4b09      	ldr	r3, [pc, #36]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 800557a:	637b      	str	r3, [r7, #52]	@ 0x34
 800557c:	e004      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	637b      	str	r3, [r7, #52]	@ 0x34
 8005582:	e001      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8005588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800558a:	4618      	mov	r0, r3
 800558c:	3738      	adds	r7, #56	@ 0x38
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	46020c00 	.word	0x46020c00
 8005598:	02dc6c00 	.word	0x02dc6c00
 800559c:	016e3600 	.word	0x016e3600
 80055a0:	00f42400 	.word	0x00f42400

080055a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80055ac:	4b47      	ldr	r3, [pc, #284]	@ (80056cc <RCCEx_PLL2_Config+0x128>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a46      	ldr	r2, [pc, #280]	@ (80056cc <RCCEx_PLL2_Config+0x128>)
 80055b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055b6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055b8:	f7fb fd84 	bl	80010c4 <HAL_GetTick>
 80055bc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055be:	e008      	b.n	80055d2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80055c0:	f7fb fd80 	bl	80010c4 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e077      	b.n	80056c2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055d2:	4b3e      	ldr	r3, [pc, #248]	@ (80056cc <RCCEx_PLL2_Config+0x128>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f0      	bne.n	80055c0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80055de:	4b3b      	ldr	r3, [pc, #236]	@ (80056cc <RCCEx_PLL2_Config+0x128>)
 80055e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80055e6:	f023 0303 	bic.w	r3, r3, #3
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6811      	ldr	r1, [r2, #0]
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	6852      	ldr	r2, [r2, #4]
 80055f2:	3a01      	subs	r2, #1
 80055f4:	0212      	lsls	r2, r2, #8
 80055f6:	430a      	orrs	r2, r1
 80055f8:	4934      	ldr	r1, [pc, #208]	@ (80056cc <RCCEx_PLL2_Config+0x128>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80055fe:	4b33      	ldr	r3, [pc, #204]	@ (80056cc <RCCEx_PLL2_Config+0x128>)
 8005600:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005602:	4b33      	ldr	r3, [pc, #204]	@ (80056d0 <RCCEx_PLL2_Config+0x12c>)
 8005604:	4013      	ands	r3, r2
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6892      	ldr	r2, [r2, #8]
 800560a:	3a01      	subs	r2, #1
 800560c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	68d2      	ldr	r2, [r2, #12]
 8005614:	3a01      	subs	r2, #1
 8005616:	0252      	lsls	r2, r2, #9
 8005618:	b292      	uxth	r2, r2
 800561a:	4311      	orrs	r1, r2
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6912      	ldr	r2, [r2, #16]
 8005620:	3a01      	subs	r2, #1
 8005622:	0412      	lsls	r2, r2, #16
 8005624:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005628:	4311      	orrs	r1, r2
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6952      	ldr	r2, [r2, #20]
 800562e:	3a01      	subs	r2, #1
 8005630:	0612      	lsls	r2, r2, #24
 8005632:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005636:	430a      	orrs	r2, r1
 8005638:	4924      	ldr	r1, [pc, #144]	@ (80056cc <RCCEx_PLL2_Config+0x128>)
 800563a:	4313      	orrs	r3, r2
 800563c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800563e:	4b23      	ldr	r3, [pc, #140]	@ (80056cc <RCCEx_PLL2_Config+0x128>)
 8005640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005642:	f023 020c 	bic.w	r2, r3, #12
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	4920      	ldr	r1, [pc, #128]	@ (80056cc <RCCEx_PLL2_Config+0x128>)
 800564c:	4313      	orrs	r3, r2
 800564e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005650:	4b1e      	ldr	r3, [pc, #120]	@ (80056cc <RCCEx_PLL2_Config+0x128>)
 8005652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	491c      	ldr	r1, [pc, #112]	@ (80056cc <RCCEx_PLL2_Config+0x128>)
 800565a:	4313      	orrs	r3, r2
 800565c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800565e:	4b1b      	ldr	r3, [pc, #108]	@ (80056cc <RCCEx_PLL2_Config+0x128>)
 8005660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005662:	4a1a      	ldr	r2, [pc, #104]	@ (80056cc <RCCEx_PLL2_Config+0x128>)
 8005664:	f023 0310 	bic.w	r3, r3, #16
 8005668:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800566a:	4b18      	ldr	r3, [pc, #96]	@ (80056cc <RCCEx_PLL2_Config+0x128>)
 800566c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005672:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	69d2      	ldr	r2, [r2, #28]
 800567a:	00d2      	lsls	r2, r2, #3
 800567c:	4913      	ldr	r1, [pc, #76]	@ (80056cc <RCCEx_PLL2_Config+0x128>)
 800567e:	4313      	orrs	r3, r2
 8005680:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005682:	4b12      	ldr	r3, [pc, #72]	@ (80056cc <RCCEx_PLL2_Config+0x128>)
 8005684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005686:	4a11      	ldr	r2, [pc, #68]	@ (80056cc <RCCEx_PLL2_Config+0x128>)
 8005688:	f043 0310 	orr.w	r3, r3, #16
 800568c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800568e:	4b0f      	ldr	r3, [pc, #60]	@ (80056cc <RCCEx_PLL2_Config+0x128>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a0e      	ldr	r2, [pc, #56]	@ (80056cc <RCCEx_PLL2_Config+0x128>)
 8005694:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005698:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800569a:	f7fb fd13 	bl	80010c4 <HAL_GetTick>
 800569e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056a0:	e008      	b.n	80056b4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80056a2:	f7fb fd0f 	bl	80010c4 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e006      	b.n	80056c2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056b4:	4b05      	ldr	r3, [pc, #20]	@ (80056cc <RCCEx_PLL2_Config+0x128>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0f0      	beq.n	80056a2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0

}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	46020c00 	.word	0x46020c00
 80056d0:	80800000 	.word	0x80800000

080056d4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80056dc:	4b47      	ldr	r3, [pc, #284]	@ (80057fc <RCCEx_PLL3_Config+0x128>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a46      	ldr	r2, [pc, #280]	@ (80057fc <RCCEx_PLL3_Config+0x128>)
 80056e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80056e8:	f7fb fcec 	bl	80010c4 <HAL_GetTick>
 80056ec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056ee:	e008      	b.n	8005702 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056f0:	f7fb fce8 	bl	80010c4 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e077      	b.n	80057f2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005702:	4b3e      	ldr	r3, [pc, #248]	@ (80057fc <RCCEx_PLL3_Config+0x128>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800570e:	4b3b      	ldr	r3, [pc, #236]	@ (80057fc <RCCEx_PLL3_Config+0x128>)
 8005710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005712:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005716:	f023 0303 	bic.w	r3, r3, #3
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6811      	ldr	r1, [r2, #0]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6852      	ldr	r2, [r2, #4]
 8005722:	3a01      	subs	r2, #1
 8005724:	0212      	lsls	r2, r2, #8
 8005726:	430a      	orrs	r2, r1
 8005728:	4934      	ldr	r1, [pc, #208]	@ (80057fc <RCCEx_PLL3_Config+0x128>)
 800572a:	4313      	orrs	r3, r2
 800572c:	630b      	str	r3, [r1, #48]	@ 0x30
 800572e:	4b33      	ldr	r3, [pc, #204]	@ (80057fc <RCCEx_PLL3_Config+0x128>)
 8005730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005732:	4b33      	ldr	r3, [pc, #204]	@ (8005800 <RCCEx_PLL3_Config+0x12c>)
 8005734:	4013      	ands	r3, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6892      	ldr	r2, [r2, #8]
 800573a:	3a01      	subs	r2, #1
 800573c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	68d2      	ldr	r2, [r2, #12]
 8005744:	3a01      	subs	r2, #1
 8005746:	0252      	lsls	r2, r2, #9
 8005748:	b292      	uxth	r2, r2
 800574a:	4311      	orrs	r1, r2
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6912      	ldr	r2, [r2, #16]
 8005750:	3a01      	subs	r2, #1
 8005752:	0412      	lsls	r2, r2, #16
 8005754:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005758:	4311      	orrs	r1, r2
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6952      	ldr	r2, [r2, #20]
 800575e:	3a01      	subs	r2, #1
 8005760:	0612      	lsls	r2, r2, #24
 8005762:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005766:	430a      	orrs	r2, r1
 8005768:	4924      	ldr	r1, [pc, #144]	@ (80057fc <RCCEx_PLL3_Config+0x128>)
 800576a:	4313      	orrs	r3, r2
 800576c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800576e:	4b23      	ldr	r3, [pc, #140]	@ (80057fc <RCCEx_PLL3_Config+0x128>)
 8005770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005772:	f023 020c 	bic.w	r2, r3, #12
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	4920      	ldr	r1, [pc, #128]	@ (80057fc <RCCEx_PLL3_Config+0x128>)
 800577c:	4313      	orrs	r3, r2
 800577e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005780:	4b1e      	ldr	r3, [pc, #120]	@ (80057fc <RCCEx_PLL3_Config+0x128>)
 8005782:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	491c      	ldr	r1, [pc, #112]	@ (80057fc <RCCEx_PLL3_Config+0x128>)
 800578a:	4313      	orrs	r3, r2
 800578c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800578e:	4b1b      	ldr	r3, [pc, #108]	@ (80057fc <RCCEx_PLL3_Config+0x128>)
 8005790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005792:	4a1a      	ldr	r2, [pc, #104]	@ (80057fc <RCCEx_PLL3_Config+0x128>)
 8005794:	f023 0310 	bic.w	r3, r3, #16
 8005798:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800579a:	4b18      	ldr	r3, [pc, #96]	@ (80057fc <RCCEx_PLL3_Config+0x128>)
 800579c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800579e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057a2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	69d2      	ldr	r2, [r2, #28]
 80057aa:	00d2      	lsls	r2, r2, #3
 80057ac:	4913      	ldr	r1, [pc, #76]	@ (80057fc <RCCEx_PLL3_Config+0x128>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80057b2:	4b12      	ldr	r3, [pc, #72]	@ (80057fc <RCCEx_PLL3_Config+0x128>)
 80057b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b6:	4a11      	ldr	r2, [pc, #68]	@ (80057fc <RCCEx_PLL3_Config+0x128>)
 80057b8:	f043 0310 	orr.w	r3, r3, #16
 80057bc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80057be:	4b0f      	ldr	r3, [pc, #60]	@ (80057fc <RCCEx_PLL3_Config+0x128>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a0e      	ldr	r2, [pc, #56]	@ (80057fc <RCCEx_PLL3_Config+0x128>)
 80057c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057c8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057ca:	f7fb fc7b 	bl	80010c4 <HAL_GetTick>
 80057ce:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057d0:	e008      	b.n	80057e4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80057d2:	f7fb fc77 	bl	80010c4 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d901      	bls.n	80057e4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e006      	b.n	80057f2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057e4:	4b05      	ldr	r3, [pc, #20]	@ (80057fc <RCCEx_PLL3_Config+0x128>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0f0      	beq.n	80057d2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	46020c00 	.word	0x46020c00
 8005800:	80800000 	.word	0x80800000

08005804 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e0fb      	b.n	8005a0e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a7f      	ldr	r2, [pc, #508]	@ (8005a18 <HAL_SPI_Init+0x214>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <HAL_SPI_Init+0x26>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a7d      	ldr	r2, [pc, #500]	@ (8005a1c <HAL_SPI_Init+0x218>)
 8005826:	4293      	cmp	r3, r2
 8005828:	e000      	b.n	800582c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800582a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a78      	ldr	r2, [pc, #480]	@ (8005a18 <HAL_SPI_Init+0x214>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d004      	beq.n	8005846 <HAL_SPI_Init+0x42>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a76      	ldr	r2, [pc, #472]	@ (8005a1c <HAL_SPI_Init+0x218>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d105      	bne.n	8005852 <HAL_SPI_Init+0x4e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	2b0f      	cmp	r3, #15
 800584c:	d901      	bls.n	8005852 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e0dd      	b.n	8005a0e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fc14 	bl	8006080 <SPI_GetPacketSize>
 8005858:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a6e      	ldr	r2, [pc, #440]	@ (8005a18 <HAL_SPI_Init+0x214>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d004      	beq.n	800586e <HAL_SPI_Init+0x6a>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a6c      	ldr	r2, [pc, #432]	@ (8005a1c <HAL_SPI_Init+0x218>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d102      	bne.n	8005874 <HAL_SPI_Init+0x70>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b08      	cmp	r3, #8
 8005872:	d816      	bhi.n	80058a2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005878:	4a69      	ldr	r2, [pc, #420]	@ (8005a20 <HAL_SPI_Init+0x21c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00e      	beq.n	800589c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a68      	ldr	r2, [pc, #416]	@ (8005a24 <HAL_SPI_Init+0x220>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d009      	beq.n	800589c <HAL_SPI_Init+0x98>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a66      	ldr	r2, [pc, #408]	@ (8005a28 <HAL_SPI_Init+0x224>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d004      	beq.n	800589c <HAL_SPI_Init+0x98>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a65      	ldr	r2, [pc, #404]	@ (8005a2c <HAL_SPI_Init+0x228>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d104      	bne.n	80058a6 <HAL_SPI_Init+0xa2>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b10      	cmp	r3, #16
 80058a0:	d901      	bls.n	80058a6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e0b3      	b.n	8005a0e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7fb f9e4 	bl	8000c88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0201 	bic.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80058e2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058ec:	d119      	bne.n	8005922 <HAL_SPI_Init+0x11e>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058f6:	d103      	bne.n	8005900 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d008      	beq.n	8005912 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10c      	bne.n	8005922 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800590c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005910:	d107      	bne.n	8005922 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005920:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00f      	beq.n	800594e <HAL_SPI_Init+0x14a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	2b06      	cmp	r3, #6
 8005934:	d90b      	bls.n	800594e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	e007      	b.n	800595e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800595c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69da      	ldr	r2, [r3, #28]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005966:	431a      	orrs	r2, r3
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005970:	ea42 0103 	orr.w	r1, r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	431a      	orrs	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	431a      	orrs	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ca:	ea42 0103 	orr.w	r1, r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	46002000 	.word	0x46002000
 8005a1c:	56002000 	.word	0x56002000
 8005a20:	40013000 	.word	0x40013000
 8005a24:	50013000 	.word	0x50013000
 8005a28:	40003800 	.word	0x40003800
 8005a2c:	50003800 	.word	0x50003800

08005a30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08c      	sub	sp, #48	@ 0x30
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3320      	adds	r3, #32
 8005a44:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3330      	adds	r3, #48	@ 0x30
 8005a4c:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a4e:	f7fb fb39 	bl	80010c4 <HAL_GetTick>
 8005a52:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8005a54:	887b      	ldrh	r3, [r7, #2]
 8005a56:	847b      	strh	r3, [r7, #34]	@ 0x22
  initial_RxXferCount = Size;
 8005a58:	887b      	ldrh	r3, [r7, #2]
 8005a5a:	843b      	strh	r3, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d001      	beq.n	8005a6c <HAL_SPI_TransmitReceive+0x3c>
  {
    return HAL_BUSY;
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e237      	b.n	8005edc <HAL_SPI_TransmitReceive+0x4ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d005      	beq.n	8005a7e <HAL_SPI_TransmitReceive+0x4e>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <HAL_SPI_TransmitReceive+0x4e>
 8005a78:	887b      	ldrh	r3, [r7, #2]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_SPI_TransmitReceive+0x52>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e22c      	b.n	8005edc <HAL_SPI_TransmitReceive+0x4ac>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_SPI_TransmitReceive+0x60>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e225      	b.n	8005edc <HAL_SPI_TransmitReceive+0x4ac>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2205      	movs	r2, #5
 8005a9c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	887a      	ldrh	r2, [r7, #2]
 8005ab2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	887a      	ldrh	r2, [r7, #2]
 8005aba:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	887a      	ldrh	r2, [r7, #2]
 8005ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	887a      	ldrh	r2, [r7, #2]
 8005ad0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8005aee:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a6c      	ldr	r2, [pc, #432]	@ (8005ca8 <HAL_SPI_TransmitReceive+0x278>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00e      	beq.n	8005b18 <HAL_SPI_TransmitReceive+0xe8>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a6b      	ldr	r2, [pc, #428]	@ (8005cac <HAL_SPI_TransmitReceive+0x27c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d009      	beq.n	8005b18 <HAL_SPI_TransmitReceive+0xe8>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a69      	ldr	r2, [pc, #420]	@ (8005cb0 <HAL_SPI_TransmitReceive+0x280>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d004      	beq.n	8005b18 <HAL_SPI_TransmitReceive+0xe8>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a68      	ldr	r2, [pc, #416]	@ (8005cb4 <HAL_SPI_TransmitReceive+0x284>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d102      	bne.n	8005b1e <HAL_SPI_TransmitReceive+0xee>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8005b18:	2310      	movs	r3, #16
 8005b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b1c:	e001      	b.n	8005b22 <HAL_SPI_TransmitReceive+0xf2>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8005b1e:	2308      	movs	r3, #8
 8005b20:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	0c1b      	lsrs	r3, r3, #16
 8005b2a:	041b      	lsls	r3, r3, #16
 8005b2c:	8879      	ldrh	r1, [r7, #2]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	6812      	ldr	r2, [r2, #0]
 8005b32:	430b      	orrs	r3, r1
 8005b34:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f042 0201 	orr.w	r2, r2, #1
 8005b44:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10c      	bne.n	8005b6e <HAL_SPI_TransmitReceive+0x13e>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b5c:	d107      	bne.n	8005b6e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	2b0f      	cmp	r3, #15
 8005b74:	f240 808e 	bls.w	8005c94 <HAL_SPI_TransmitReceive+0x264>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a4a      	ldr	r2, [pc, #296]	@ (8005ca8 <HAL_SPI_TransmitReceive+0x278>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d00e      	beq.n	8005ba0 <HAL_SPI_TransmitReceive+0x170>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a49      	ldr	r2, [pc, #292]	@ (8005cac <HAL_SPI_TransmitReceive+0x27c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d009      	beq.n	8005ba0 <HAL_SPI_TransmitReceive+0x170>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a47      	ldr	r2, [pc, #284]	@ (8005cb0 <HAL_SPI_TransmitReceive+0x280>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d004      	beq.n	8005ba0 <HAL_SPI_TransmitReceive+0x170>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a46      	ldr	r2, [pc, #280]	@ (8005cb4 <HAL_SPI_TransmitReceive+0x284>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d179      	bne.n	8005c94 <HAL_SPI_TransmitReceive+0x264>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba2:	089b      	lsrs	r3, r3, #2
 8005ba4:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005ba6:	e06e      	b.n	8005c86 <HAL_SPI_TransmitReceive+0x256>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d120      	bne.n	8005bf8 <HAL_SPI_TransmitReceive+0x1c8>
 8005bb6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01d      	beq.n	8005bf8 <HAL_SPI_TransmitReceive+0x1c8>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005bbc:	8c3a      	ldrh	r2, [r7, #32]
 8005bbe:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d217      	bcs.n	8005bf8 <HAL_SPI_TransmitReceive+0x1c8>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6812      	ldr	r2, [r2, #0]
 8005bd2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bd8:	1d1a      	adds	r2, r3, #4
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005bf6:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695a      	ldr	r2, [r3, #20]
 8005bfe:	f248 0308 	movw	r3, #32776	@ 0x8008
 8005c02:	4013      	ands	r3, r2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01a      	beq.n	8005c3e <HAL_SPI_TransmitReceive+0x20e>
 8005c08:	8c3b      	ldrh	r3, [r7, #32]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d017      	beq.n	8005c3e <HAL_SPI_TransmitReceive+0x20e>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c16:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c18:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c1e:	1d1a      	adds	r2, r3, #4
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount --;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005c3c:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c3e:	f7fb fa41 	bl	80010c4 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d803      	bhi.n	8005c56 <HAL_SPI_TransmitReceive+0x226>
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c54:	d102      	bne.n	8005c5c <HAL_SPI_TransmitReceive+0x22c>
 8005c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d114      	bne.n	8005c86 <HAL_SPI_TransmitReceive+0x256>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 f941 	bl	8005ee4 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e12a      	b.n	8005edc <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005c86:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d18d      	bne.n	8005ba8 <HAL_SPI_TransmitReceive+0x178>
 8005c8c:	8c3b      	ldrh	r3, [r7, #32]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d18a      	bne.n	8005ba8 <HAL_SPI_TransmitReceive+0x178>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005c92:	e0fd      	b.n	8005e90 <HAL_SPI_TransmitReceive+0x460>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	2b07      	cmp	r3, #7
 8005c9a:	f240 80f3 	bls.w	8005e84 <HAL_SPI_TransmitReceive+0x454>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca0:	085b      	lsrs	r3, r3, #1
 8005ca2:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005ca4:	e075      	b.n	8005d92 <HAL_SPI_TransmitReceive+0x362>
 8005ca6:	bf00      	nop
 8005ca8:	40013000 	.word	0x40013000
 8005cac:	50013000 	.word	0x50013000
 8005cb0:	40003800 	.word	0x40003800
 8005cb4:	50003800 	.word	0x50003800
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d11f      	bne.n	8005d06 <HAL_SPI_TransmitReceive+0x2d6>
 8005cc6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d01c      	beq.n	8005d06 <HAL_SPI_TransmitReceive+0x2d6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005ccc:	8c3a      	ldrh	r2, [r7, #32]
 8005cce:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d216      	bcs.n	8005d06 <HAL_SPI_TransmitReceive+0x2d6>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cdc:	881a      	ldrh	r2, [r3, #0]
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ce6:	1c9a      	adds	r2, r3, #2
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d04:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d11a      	bne.n	8005d4a <HAL_SPI_TransmitReceive+0x31a>
 8005d14:	8c3b      	ldrh	r3, [r7, #32]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d017      	beq.n	8005d4a <HAL_SPI_TransmitReceive+0x31a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	8812      	ldrh	r2, [r2, #0]
 8005d22:	b292      	uxth	r2, r2
 8005d24:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d2a:	1c9a      	adds	r2, r3, #2
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005d48:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d4a:	f7fb f9bb 	bl	80010c4 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d803      	bhi.n	8005d62 <HAL_SPI_TransmitReceive+0x332>
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d60:	d102      	bne.n	8005d68 <HAL_SPI_TransmitReceive+0x338>
 8005d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d114      	bne.n	8005d92 <HAL_SPI_TransmitReceive+0x362>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 f8bb 	bl	8005ee4 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e0a4      	b.n	8005edc <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005d92:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d18f      	bne.n	8005cb8 <HAL_SPI_TransmitReceive+0x288>
 8005d98:	8c3b      	ldrh	r3, [r7, #32]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d18c      	bne.n	8005cb8 <HAL_SPI_TransmitReceive+0x288>
 8005d9e:	e077      	b.n	8005e90 <HAL_SPI_TransmitReceive+0x460>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d121      	bne.n	8005df2 <HAL_SPI_TransmitReceive+0x3c2>
 8005dae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d01e      	beq.n	8005df2 <HAL_SPI_TransmitReceive+0x3c2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005db4:	8c3a      	ldrh	r2, [r7, #32]
 8005db6:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8005db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dba:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d218      	bcs.n	8005df2 <HAL_SPI_TransmitReceive+0x3c2>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3320      	adds	r3, #32
 8005dca:	7812      	ldrb	r2, [r2, #0]
 8005dcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005df0:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d11d      	bne.n	8005e3c <HAL_SPI_TransmitReceive+0x40c>
 8005e00:	8c3b      	ldrh	r3, [r7, #32]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d01a      	beq.n	8005e3c <HAL_SPI_TransmitReceive+0x40c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e12:	7812      	ldrb	r2, [r2, #0]
 8005e14:	b2d2      	uxtb	r2, r2
 8005e16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005e3a:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e3c:	f7fb f942 	bl	80010c4 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d803      	bhi.n	8005e54 <HAL_SPI_TransmitReceive+0x424>
 8005e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e52:	d102      	bne.n	8005e5a <HAL_SPI_TransmitReceive+0x42a>
 8005e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d114      	bne.n	8005e84 <HAL_SPI_TransmitReceive+0x454>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 f842 	bl	8005ee4 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e02b      	b.n	8005edc <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005e84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d18a      	bne.n	8005da0 <HAL_SPI_TransmitReceive+0x370>
 8005e8a:	8c3b      	ldrh	r3, [r7, #32]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d187      	bne.n	8005da0 <HAL_SPI_TransmitReceive+0x370>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e96:	2200      	movs	r2, #0
 8005e98:	2108      	movs	r1, #8
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 f8c2 	bl	8006024 <SPI_WaitOnFlagUntilTimeout>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d007      	beq.n	8005eb6 <HAL_SPI_TransmitReceive+0x486>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005eac:	f043 0220 	orr.w	r2, r3, #32
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 f814 	bl	8005ee4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <HAL_SPI_TransmitReceive+0x4aa>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <HAL_SPI_TransmitReceive+0x4ac>
  }
  else
  {
    return HAL_OK;
 8005eda:	2300      	movs	r3, #0
  }
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3728      	adds	r7, #40	@ 0x28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699a      	ldr	r2, [r3, #24]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0208 	orr.w	r2, r2, #8
 8005f02:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699a      	ldr	r2, [r3, #24]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0210 	orr.w	r2, r2, #16
 8005f12:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f022 0201 	bic.w	r2, r2, #1
 8005f22:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6812      	ldr	r2, [r2, #0]
 8005f2e:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8005f32:	f023 0303 	bic.w	r3, r3, #3
 8005f36:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005f46:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	d014      	beq.n	8005f7e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f003 0320 	and.w	r3, r3, #32
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00f      	beq.n	8005f7e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f64:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	699a      	ldr	r2, [r3, #24]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0220 	orr.w	r2, r2, #32
 8005f7c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d014      	beq.n	8005fb4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00f      	beq.n	8005fb4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f9a:	f043 0204 	orr.w	r2, r3, #4
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699a      	ldr	r2, [r3, #24]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fb2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00f      	beq.n	8005fde <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fc4:	f043 0201 	orr.w	r2, r3, #1
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	699a      	ldr	r2, [r3, #24]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fdc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00f      	beq.n	8006008 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fee:	f043 0208 	orr.w	r2, r3, #8
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	699a      	ldr	r2, [r3, #24]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006006:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8006018:	bf00      	nop
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	4613      	mov	r3, r2
 8006032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006034:	e010      	b.n	8006058 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006036:	f7fb f845 	bl	80010c4 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d803      	bhi.n	800604e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800604c:	d102      	bne.n	8006054 <SPI_WaitOnFlagUntilTimeout+0x30>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e00f      	b.n	8006078 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695a      	ldr	r2, [r3, #20]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4013      	ands	r3, r2
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	429a      	cmp	r2, r3
 8006066:	bf0c      	ite	eq
 8006068:	2301      	moveq	r3, #1
 800606a:	2300      	movne	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	461a      	mov	r2, r3
 8006070:	79fb      	ldrb	r3, [r7, #7]
 8006072:	429a      	cmp	r2, r3
 8006074:	d0df      	beq.n	8006036 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800608c:	095b      	lsrs	r3, r3, #5
 800608e:	3301      	adds	r3, #1
 8006090:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	3301      	adds	r3, #1
 8006098:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	3307      	adds	r3, #7
 800609e:	08db      	lsrs	r3, r3, #3
 80060a0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	fb02 f303 	mul.w	r3, r2, r3
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d12e      	bne.n	800612a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80060d6:	2302      	movs	r3, #2
 80060d8:	e028      	b.n	800612c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2202      	movs	r2, #2
 80060e6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0201 	bic.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8006106:	ea42 0103 	orr.w	r1, r2, r3
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	e000      	b.n	800612c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
  }
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e042      	b.n	80061d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006150:	2b00      	cmp	r3, #0
 8006152:	d106      	bne.n	8006162 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7fa fdfd 	bl	8000d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2224      	movs	r2, #36	@ 0x24
 8006166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 0201 	bic.w	r2, r2, #1
 8006178:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fa68 	bl	8006658 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f8c3 	bl	8006314 <UART_SetConfig>
 800618e:	4603      	mov	r3, r0
 8006190:	2b01      	cmp	r3, #1
 8006192:	d101      	bne.n	8006198 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e01b      	b.n	80061d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fae7 	bl	800679c <UART_CheckIdleState>
 80061ce:	4603      	mov	r3, r0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08a      	sub	sp, #40	@ 0x28
 80061dc:	af02      	add	r7, sp, #8
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	603b      	str	r3, [r7, #0]
 80061e4:	4613      	mov	r3, r2
 80061e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ee:	2b20      	cmp	r3, #32
 80061f0:	f040 808b 	bne.w	800630a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <HAL_UART_Transmit+0x28>
 80061fa:	88fb      	ldrh	r3, [r7, #6]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e083      	b.n	800630c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800620e:	2b80      	cmp	r3, #128	@ 0x80
 8006210:	d107      	bne.n	8006222 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006220:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2221      	movs	r2, #33	@ 0x21
 800622e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006232:	f7fa ff47 	bl	80010c4 <HAL_GetTick>
 8006236:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	88fa      	ldrh	r2, [r7, #6]
 800623c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	88fa      	ldrh	r2, [r7, #6]
 8006244:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006250:	d108      	bne.n	8006264 <HAL_UART_Transmit+0x8c>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d104      	bne.n	8006264 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800625a:	2300      	movs	r3, #0
 800625c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	61bb      	str	r3, [r7, #24]
 8006262:	e003      	b.n	800626c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006268:	2300      	movs	r3, #0
 800626a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800626c:	e030      	b.n	80062d0 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2200      	movs	r2, #0
 8006276:	2180      	movs	r1, #128	@ 0x80
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 fb39 	bl	80068f0 <UART_WaitOnFlagUntilTimeout>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d005      	beq.n	8006290 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2220      	movs	r2, #32
 8006288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e03d      	b.n	800630c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10b      	bne.n	80062ae <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	3302      	adds	r3, #2
 80062aa:	61bb      	str	r3, [r7, #24]
 80062ac:	e007      	b.n	80062be <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	781a      	ldrb	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	3301      	adds	r3, #1
 80062bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1c8      	bne.n	800626e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2200      	movs	r2, #0
 80062e4:	2140      	movs	r1, #64	@ 0x40
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 fb02 	bl	80068f0 <UART_WaitOnFlagUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d005      	beq.n	80062fe <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e006      	b.n	800630c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2220      	movs	r2, #32
 8006302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	e000      	b.n	800630c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800630a:	2302      	movs	r3, #2
  }
}
 800630c:	4618      	mov	r0, r3
 800630e:	3720      	adds	r7, #32
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006318:	b094      	sub	sp, #80	@ 0x50
 800631a:	af00      	add	r7, sp, #0
 800631c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	4b7e      	ldr	r3, [pc, #504]	@ (8006524 <UART_SetConfig+0x210>)
 800632a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800632c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	431a      	orrs	r2, r3
 8006336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	431a      	orrs	r2, r3
 800633c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	4313      	orrs	r3, r2
 8006342:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4977      	ldr	r1, [pc, #476]	@ (8006528 <UART_SetConfig+0x214>)
 800634c:	4019      	ands	r1, r3
 800634e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006354:	430b      	orrs	r3, r1
 8006356:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006364:	68d9      	ldr	r1, [r3, #12]
 8006366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	ea40 0301 	orr.w	r3, r0, r1
 800636e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	4b6a      	ldr	r3, [pc, #424]	@ (8006524 <UART_SetConfig+0x210>)
 800637c:	429a      	cmp	r2, r3
 800637e:	d009      	beq.n	8006394 <UART_SetConfig+0x80>
 8006380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	4b69      	ldr	r3, [pc, #420]	@ (800652c <UART_SetConfig+0x218>)
 8006386:	429a      	cmp	r2, r3
 8006388:	d004      	beq.n	8006394 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800638a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800638c:	6a1a      	ldr	r2, [r3, #32]
 800638e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006390:	4313      	orrs	r3, r2
 8006392:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800639e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80063a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063a8:	430b      	orrs	r3, r1
 80063aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b2:	f023 000f 	bic.w	r0, r3, #15
 80063b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80063ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	ea40 0301 	orr.w	r3, r0, r1
 80063c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	4b59      	ldr	r3, [pc, #356]	@ (8006530 <UART_SetConfig+0x21c>)
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d102      	bne.n	80063d4 <UART_SetConfig+0xc0>
 80063ce:	2301      	movs	r3, #1
 80063d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063d2:	e029      	b.n	8006428 <UART_SetConfig+0x114>
 80063d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	4b56      	ldr	r3, [pc, #344]	@ (8006534 <UART_SetConfig+0x220>)
 80063da:	429a      	cmp	r2, r3
 80063dc:	d102      	bne.n	80063e4 <UART_SetConfig+0xd0>
 80063de:	2302      	movs	r3, #2
 80063e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063e2:	e021      	b.n	8006428 <UART_SetConfig+0x114>
 80063e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	4b53      	ldr	r3, [pc, #332]	@ (8006538 <UART_SetConfig+0x224>)
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d102      	bne.n	80063f4 <UART_SetConfig+0xe0>
 80063ee:	2304      	movs	r3, #4
 80063f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063f2:	e019      	b.n	8006428 <UART_SetConfig+0x114>
 80063f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	4b50      	ldr	r3, [pc, #320]	@ (800653c <UART_SetConfig+0x228>)
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d102      	bne.n	8006404 <UART_SetConfig+0xf0>
 80063fe:	2308      	movs	r3, #8
 8006400:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006402:	e011      	b.n	8006428 <UART_SetConfig+0x114>
 8006404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	4b4d      	ldr	r3, [pc, #308]	@ (8006540 <UART_SetConfig+0x22c>)
 800640a:	429a      	cmp	r2, r3
 800640c:	d102      	bne.n	8006414 <UART_SetConfig+0x100>
 800640e:	2310      	movs	r3, #16
 8006410:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006412:	e009      	b.n	8006428 <UART_SetConfig+0x114>
 8006414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	4b42      	ldr	r3, [pc, #264]	@ (8006524 <UART_SetConfig+0x210>)
 800641a:	429a      	cmp	r2, r3
 800641c:	d102      	bne.n	8006424 <UART_SetConfig+0x110>
 800641e:	2320      	movs	r3, #32
 8006420:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006422:	e001      	b.n	8006428 <UART_SetConfig+0x114>
 8006424:	2300      	movs	r3, #0
 8006426:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	4b3d      	ldr	r3, [pc, #244]	@ (8006524 <UART_SetConfig+0x210>)
 800642e:	429a      	cmp	r2, r3
 8006430:	d005      	beq.n	800643e <UART_SetConfig+0x12a>
 8006432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4b3d      	ldr	r3, [pc, #244]	@ (800652c <UART_SetConfig+0x218>)
 8006438:	429a      	cmp	r2, r3
 800643a:	f040 8085 	bne.w	8006548 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800643e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006440:	2200      	movs	r2, #0
 8006442:	623b      	str	r3, [r7, #32]
 8006444:	627a      	str	r2, [r7, #36]	@ 0x24
 8006446:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800644a:	f7fd fec9 	bl	80041e0 <HAL_RCCEx_GetPeriphCLKFreq>
 800644e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 80e8 	beq.w	8006628 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800645a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645c:	4a39      	ldr	r2, [pc, #228]	@ (8006544 <UART_SetConfig+0x230>)
 800645e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006462:	461a      	mov	r2, r3
 8006464:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006466:	fbb3 f3f2 	udiv	r3, r3, r2
 800646a:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800646c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	4613      	mov	r3, r2
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	4413      	add	r3, r2
 8006476:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006478:	429a      	cmp	r2, r3
 800647a:	d305      	bcc.n	8006488 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800647c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006482:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006484:	429a      	cmp	r2, r3
 8006486:	d903      	bls.n	8006490 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800648e:	e048      	b.n	8006522 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006492:	2200      	movs	r2, #0
 8006494:	61bb      	str	r3, [r7, #24]
 8006496:	61fa      	str	r2, [r7, #28]
 8006498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649c:	4a29      	ldr	r2, [pc, #164]	@ (8006544 <UART_SetConfig+0x230>)
 800649e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	2200      	movs	r2, #0
 80064a6:	613b      	str	r3, [r7, #16]
 80064a8:	617a      	str	r2, [r7, #20]
 80064aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80064ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80064b2:	f7f9 fee1 	bl	8000278 <__aeabi_uldivmod>
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	4610      	mov	r0, r2
 80064bc:	4619      	mov	r1, r3
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	f04f 0300 	mov.w	r3, #0
 80064c6:	020b      	lsls	r3, r1, #8
 80064c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064cc:	0202      	lsls	r2, r0, #8
 80064ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064d0:	6849      	ldr	r1, [r1, #4]
 80064d2:	0849      	lsrs	r1, r1, #1
 80064d4:	2000      	movs	r0, #0
 80064d6:	460c      	mov	r4, r1
 80064d8:	4605      	mov	r5, r0
 80064da:	eb12 0804 	adds.w	r8, r2, r4
 80064de:	eb43 0905 	adc.w	r9, r3, r5
 80064e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	60bb      	str	r3, [r7, #8]
 80064ea:	60fa      	str	r2, [r7, #12]
 80064ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064f0:	4640      	mov	r0, r8
 80064f2:	4649      	mov	r1, r9
 80064f4:	f7f9 fec0 	bl	8000278 <__aeabi_uldivmod>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4613      	mov	r3, r2
 80064fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006502:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006506:	d308      	bcc.n	800651a <UART_SetConfig+0x206>
 8006508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800650a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800650e:	d204      	bcs.n	800651a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8006510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006516:	60da      	str	r2, [r3, #12]
 8006518:	e003      	b.n	8006522 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8006520:	e082      	b.n	8006628 <UART_SetConfig+0x314>
 8006522:	e081      	b.n	8006628 <UART_SetConfig+0x314>
 8006524:	46002400 	.word	0x46002400
 8006528:	cfff69f3 	.word	0xcfff69f3
 800652c:	56002400 	.word	0x56002400
 8006530:	40013800 	.word	0x40013800
 8006534:	40004400 	.word	0x40004400
 8006538:	40004800 	.word	0x40004800
 800653c:	40004c00 	.word	0x40004c00
 8006540:	40005000 	.word	0x40005000
 8006544:	08006de4 	.word	0x08006de4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006550:	d13c      	bne.n	80065cc <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006554:	2200      	movs	r2, #0
 8006556:	603b      	str	r3, [r7, #0]
 8006558:	607a      	str	r2, [r7, #4]
 800655a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800655e:	f7fd fe3f 	bl	80041e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006562:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006566:	2b00      	cmp	r3, #0
 8006568:	d05e      	beq.n	8006628 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800656a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656e:	4a39      	ldr	r2, [pc, #228]	@ (8006654 <UART_SetConfig+0x340>)
 8006570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006574:	461a      	mov	r2, r3
 8006576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006578:	fbb3 f3f2 	udiv	r3, r3, r2
 800657c:	005a      	lsls	r2, r3, #1
 800657e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	085b      	lsrs	r3, r3, #1
 8006584:	441a      	add	r2, r3
 8006586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	fbb2 f3f3 	udiv	r3, r2, r3
 800658e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006592:	2b0f      	cmp	r3, #15
 8006594:	d916      	bls.n	80065c4 <UART_SetConfig+0x2b0>
 8006596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800659c:	d212      	bcs.n	80065c4 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800659e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	f023 030f 	bic.w	r3, r3, #15
 80065a6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065aa:	085b      	lsrs	r3, r3, #1
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	f003 0307 	and.w	r3, r3, #7
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80065b6:	4313      	orrs	r3, r2
 80065b8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80065ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80065c0:	60da      	str	r2, [r3, #12]
 80065c2:	e031      	b.n	8006628 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80065ca:	e02d      	b.n	8006628 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80065cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065ce:	2200      	movs	r2, #0
 80065d0:	469a      	mov	sl, r3
 80065d2:	4693      	mov	fp, r2
 80065d4:	4650      	mov	r0, sl
 80065d6:	4659      	mov	r1, fp
 80065d8:	f7fd fe02 	bl	80041e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80065dc:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80065de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d021      	beq.n	8006628 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e8:	4a1a      	ldr	r2, [pc, #104]	@ (8006654 <UART_SetConfig+0x340>)
 80065ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065ee:	461a      	mov	r2, r3
 80065f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80065f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	085b      	lsrs	r3, r3, #1
 80065fc:	441a      	add	r2, r3
 80065fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	fbb2 f3f3 	udiv	r3, r2, r3
 8006606:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800660a:	2b0f      	cmp	r3, #15
 800660c:	d909      	bls.n	8006622 <UART_SetConfig+0x30e>
 800660e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006614:	d205      	bcs.n	8006622 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006618:	b29a      	uxth	r2, r3
 800661a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	60da      	str	r2, [r3, #12]
 8006620:	e002      	b.n	8006628 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662a:	2201      	movs	r2, #1
 800662c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006632:	2201      	movs	r2, #1
 8006634:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800663a:	2200      	movs	r2, #0
 800663c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800663e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006640:	2200      	movs	r2, #0
 8006642:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006644:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006648:	4618      	mov	r0, r3
 800664a:	3750      	adds	r7, #80	@ 0x50
 800664c:	46bd      	mov	sp, r7
 800664e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006652:	bf00      	nop
 8006654:	08006de4 	.word	0x08006de4

08006658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006664:	f003 0308 	and.w	r3, r3, #8
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00a      	beq.n	8006682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00a      	beq.n	80066a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a8:	f003 0302 	and.w	r3, r3, #2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00a      	beq.n	80066c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ca:	f003 0304 	and.w	r3, r3, #4
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ec:	f003 0310 	and.w	r3, r3, #16
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00a      	beq.n	800670a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670e:	f003 0320 	and.w	r3, r3, #32
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006734:	2b00      	cmp	r3, #0
 8006736:	d01a      	beq.n	800676e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006756:	d10a      	bne.n	800676e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	605a      	str	r2, [r3, #4]
  }
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b098      	sub	sp, #96	@ 0x60
 80067a0:	af02      	add	r7, sp, #8
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067ac:	f7fa fc8a 	bl	80010c4 <HAL_GetTick>
 80067b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0308 	and.w	r3, r3, #8
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d12f      	bne.n	8006820 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067c8:	2200      	movs	r2, #0
 80067ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f88e 	bl	80068f0 <UART_WaitOnFlagUntilTimeout>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d022      	beq.n	8006820 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e2:	e853 3f00 	ldrex	r3, [r3]
 80067e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	461a      	mov	r2, r3
 80067f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80067fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006800:	e841 2300 	strex	r3, r2, [r1]
 8006804:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e6      	bne.n	80067da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2220      	movs	r2, #32
 8006810:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e063      	b.n	80068e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0304 	and.w	r3, r3, #4
 800682a:	2b04      	cmp	r3, #4
 800682c:	d149      	bne.n	80068c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800682e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006836:	2200      	movs	r2, #0
 8006838:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f857 	bl	80068f0 <UART_WaitOnFlagUntilTimeout>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d03c      	beq.n	80068c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	623b      	str	r3, [r7, #32]
   return(result);
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800685c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	461a      	mov	r2, r3
 8006864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006866:	633b      	str	r3, [r7, #48]	@ 0x30
 8006868:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800686c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800686e:	e841 2300 	strex	r3, r2, [r1]
 8006872:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e6      	bne.n	8006848 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3308      	adds	r3, #8
 8006880:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	60fb      	str	r3, [r7, #12]
   return(result);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f023 0301 	bic.w	r3, r3, #1
 8006890:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3308      	adds	r3, #8
 8006898:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800689a:	61fa      	str	r2, [r7, #28]
 800689c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	69b9      	ldr	r1, [r7, #24]
 80068a0:	69fa      	ldr	r2, [r7, #28]
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	617b      	str	r3, [r7, #20]
   return(result);
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e5      	bne.n	800687a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e012      	b.n	80068e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2220      	movs	r2, #32
 80068c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3758      	adds	r7, #88	@ 0x58
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	603b      	str	r3, [r7, #0]
 80068fc:	4613      	mov	r3, r2
 80068fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006900:	e04f      	b.n	80069a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006908:	d04b      	beq.n	80069a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800690a:	f7fa fbdb 	bl	80010c4 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	69ba      	ldr	r2, [r7, #24]
 8006916:	429a      	cmp	r2, r3
 8006918:	d302      	bcc.n	8006920 <UART_WaitOnFlagUntilTimeout+0x30>
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e04e      	b.n	80069c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0304 	and.w	r3, r3, #4
 800692e:	2b00      	cmp	r3, #0
 8006930:	d037      	beq.n	80069a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b80      	cmp	r3, #128	@ 0x80
 8006936:	d034      	beq.n	80069a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b40      	cmp	r3, #64	@ 0x40
 800693c:	d031      	beq.n	80069a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	f003 0308 	and.w	r3, r3, #8
 8006948:	2b08      	cmp	r3, #8
 800694a:	d110      	bne.n	800696e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2208      	movs	r2, #8
 8006952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 f838 	bl	80069ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2208      	movs	r2, #8
 800695e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e029      	b.n	80069c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006978:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800697c:	d111      	bne.n	80069a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006986:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 f81e 	bl	80069ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2220      	movs	r2, #32
 8006992:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e00f      	b.n	80069c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	69da      	ldr	r2, [r3, #28]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	4013      	ands	r3, r2
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	bf0c      	ite	eq
 80069b2:	2301      	moveq	r3, #1
 80069b4:	2300      	movne	r3, #0
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	461a      	mov	r2, r3
 80069ba:	79fb      	ldrb	r3, [r7, #7]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d0a0      	beq.n	8006902 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b095      	sub	sp, #84	@ 0x54
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80069f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e6      	bne.n	80069d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3308      	adds	r3, #8
 8006a0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	e853 3f00 	ldrex	r3, [r3]
 8006a12:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a1a:	f023 0301 	bic.w	r3, r3, #1
 8006a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3308      	adds	r3, #8
 8006a26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a30:	e841 2300 	strex	r3, r2, [r1]
 8006a34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1e3      	bne.n	8006a04 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d118      	bne.n	8006a76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f023 0310 	bic.w	r3, r3, #16
 8006a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a62:	61bb      	str	r3, [r7, #24]
 8006a64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a66:	6979      	ldr	r1, [r7, #20]
 8006a68:	69ba      	ldr	r2, [r7, #24]
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1e6      	bne.n	8006a44 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006a8a:	bf00      	nop
 8006a8c:	3754      	adds	r7, #84	@ 0x54
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b085      	sub	sp, #20
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d101      	bne.n	8006aac <HAL_UARTEx_DisableFifoMode+0x16>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e027      	b.n	8006afc <HAL_UARTEx_DisableFifoMode+0x66>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2224      	movs	r2, #36	@ 0x24
 8006ab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 0201 	bic.w	r2, r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006ada:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2220      	movs	r2, #32
 8006aee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e02d      	b.n	8006b7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2224      	movs	r2, #36	@ 0x24
 8006b2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0201 	bic.w	r2, r2, #1
 8006b46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f84f 	bl	8006c00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d101      	bne.n	8006b9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e02d      	b.n	8006bf8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2224      	movs	r2, #36	@ 0x24
 8006ba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 0201 	bic.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f811 	bl	8006c00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2220      	movs	r2, #32
 8006bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d108      	bne.n	8006c22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c20:	e031      	b.n	8006c86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c22:	2308      	movs	r3, #8
 8006c24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c26:	2308      	movs	r3, #8
 8006c28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	0e5b      	lsrs	r3, r3, #25
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	f003 0307 	and.w	r3, r3, #7
 8006c38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	0f5b      	lsrs	r3, r3, #29
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	f003 0307 	and.w	r3, r3, #7
 8006c48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c4a:	7bbb      	ldrb	r3, [r7, #14]
 8006c4c:	7b3a      	ldrb	r2, [r7, #12]
 8006c4e:	4911      	ldr	r1, [pc, #68]	@ (8006c94 <UARTEx_SetNbDataToProcess+0x94>)
 8006c50:	5c8a      	ldrb	r2, [r1, r2]
 8006c52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c56:	7b3a      	ldrb	r2, [r7, #12]
 8006c58:	490f      	ldr	r1, [pc, #60]	@ (8006c98 <UARTEx_SetNbDataToProcess+0x98>)
 8006c5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	7b7a      	ldrb	r2, [r7, #13]
 8006c6c:	4909      	ldr	r1, [pc, #36]	@ (8006c94 <UARTEx_SetNbDataToProcess+0x94>)
 8006c6e:	5c8a      	ldrb	r2, [r1, r2]
 8006c70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c74:	7b7a      	ldrb	r2, [r7, #13]
 8006c76:	4908      	ldr	r1, [pc, #32]	@ (8006c98 <UARTEx_SetNbDataToProcess+0x98>)
 8006c78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006c86:	bf00      	nop
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	08006dfc 	.word	0x08006dfc
 8006c98:	08006e04 	.word	0x08006e04

08006c9c <memset>:
 8006c9c:	4402      	add	r2, r0
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d100      	bne.n	8006ca6 <memset+0xa>
 8006ca4:	4770      	bx	lr
 8006ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8006caa:	e7f9      	b.n	8006ca0 <memset+0x4>

08006cac <__libc_init_array>:
 8006cac:	b570      	push	{r4, r5, r6, lr}
 8006cae:	4d0d      	ldr	r5, [pc, #52]	@ (8006ce4 <__libc_init_array+0x38>)
 8006cb0:	2600      	movs	r6, #0
 8006cb2:	4c0d      	ldr	r4, [pc, #52]	@ (8006ce8 <__libc_init_array+0x3c>)
 8006cb4:	1b64      	subs	r4, r4, r5
 8006cb6:	10a4      	asrs	r4, r4, #2
 8006cb8:	42a6      	cmp	r6, r4
 8006cba:	d109      	bne.n	8006cd0 <__libc_init_array+0x24>
 8006cbc:	4d0b      	ldr	r5, [pc, #44]	@ (8006cec <__libc_init_array+0x40>)
 8006cbe:	2600      	movs	r6, #0
 8006cc0:	4c0b      	ldr	r4, [pc, #44]	@ (8006cf0 <__libc_init_array+0x44>)
 8006cc2:	f000 f817 	bl	8006cf4 <_init>
 8006cc6:	1b64      	subs	r4, r4, r5
 8006cc8:	10a4      	asrs	r4, r4, #2
 8006cca:	42a6      	cmp	r6, r4
 8006ccc:	d105      	bne.n	8006cda <__libc_init_array+0x2e>
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
 8006cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd4:	3601      	adds	r6, #1
 8006cd6:	4798      	blx	r3
 8006cd8:	e7ee      	b.n	8006cb8 <__libc_init_array+0xc>
 8006cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cde:	3601      	adds	r6, #1
 8006ce0:	4798      	blx	r3
 8006ce2:	e7f2      	b.n	8006cca <__libc_init_array+0x1e>
 8006ce4:	08006e14 	.word	0x08006e14
 8006ce8:	08006e14 	.word	0x08006e14
 8006cec:	08006e14 	.word	0x08006e14
 8006cf0:	08006e18 	.word	0x08006e18

08006cf4 <_init>:
 8006cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf6:	bf00      	nop
 8006cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cfa:	bc08      	pop	{r3}
 8006cfc:	469e      	mov	lr, r3
 8006cfe:	4770      	bx	lr

08006d00 <_fini>:
 8006d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d02:	bf00      	nop
 8006d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d06:	bc08      	pop	{r3}
 8006d08:	469e      	mov	lr, r3
 8006d0a:	4770      	bx	lr
