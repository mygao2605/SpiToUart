
SpiToUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a0c  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08006c44  08006c44  00007c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006d44  08006d44  00007d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006d4c  08006d4c  00007d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006d50  08006d50  00007d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000009  20000000  08006d54  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000568  2000000c  08006d5d  0000800c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000574  08006d5d  00008574  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00008009  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011491  00000000  00000000  0000803f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000021bc  00000000  00000000  000194d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d80  00000000  00000000  0001b690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032efc  00000000  00000000  0001c410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000115b1  00000000  00000000  0004f30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013dd98  00000000  00000000  000608bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0019e655  2**0
                  CONTENTS, READONLY
 17 .debug_rnglists 00000a55  00000000  00000000  0019e698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000037ac  00000000  00000000  0019f0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  001a289c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	08006c2c 	.word	0x08006c2c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	08006c2c 	.word	0x08006c2c

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000288:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <reverseByte>:
#include <stdint.h>
#include <string.h>
#include <stdlib.h>

uint8_t reverseByte(uint8_t byte)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
    byte = (byte & 0xF0) >> 4 | (byte & 0x0F) << 4;
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	091b      	lsrs	r3, r3, #4
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	b25a      	sxtb	r2, r3
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	011b      	lsls	r3, r3, #4
 80005a6:	b25b      	sxtb	r3, r3
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	71fb      	strb	r3, [r7, #7]
    byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	109b      	asrs	r3, r3, #2
 80005b2:	b25b      	sxtb	r3, r3
 80005b4:	f003 0333 	and.w	r3, r3, #51	@ 0x33
 80005b8:	b25a      	sxtb	r2, r3
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	f023 0333 	bic.w	r3, r3, #51	@ 0x33
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	4313      	orrs	r3, r2
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	71fb      	strb	r3, [r7, #7]
    byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	105b      	asrs	r3, r3, #1
 80005d0:	b25b      	sxtb	r3, r3
 80005d2:	f003 0355 	and.w	r3, r3, #85	@ 0x55
 80005d6:	b25a      	sxtb	r2, r3
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	b25b      	sxtb	r3, r3
 80005de:	f023 0355 	bic.w	r3, r3, #85	@ 0x55
 80005e2:	b25b      	sxtb	r3, r3
 80005e4:	4313      	orrs	r3, r2
 80005e6:	b25b      	sxtb	r3, r3
 80005e8:	71fb      	strb	r3, [r7, #7]
    return byte;
 80005ea:	79fb      	ldrb	r3, [r7, #7]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <crc16_arc>:
uint16_t crc16_arc(uint8_t *data, size_t length)
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b087      	sub	sp, #28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0x0000;
 8000602:	2300      	movs	r3, #0
 8000604:	82fb      	strh	r3, [r7, #22]
    uint16_t polynomial = 0x8005;
 8000606:	f248 0305 	movw	r3, #32773	@ 0x8005
 800060a:	81bb      	strh	r3, [r7, #12]

    for (size_t i = 0; i < length; i++)
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	e02a      	b.n	8000668 <crc16_arc+0x70>
    {
        crc ^= (uint16_t)reverseByte(data[i]) << 8;
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	693b      	ldr	r3, [r7, #16]
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffb8 	bl	8000590 <reverseByte>
 8000620:	4603      	mov	r3, r0
 8000622:	021b      	lsls	r3, r3, #8
 8000624:	b21a      	sxth	r2, r3
 8000626:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800062a:	4053      	eors	r3, r2
 800062c:	b21b      	sxth	r3, r3
 800062e:	82fb      	strh	r3, [r7, #22]

        for (uint8_t j = 0; j < 8; j++)
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]
 8000634:	e012      	b.n	800065c <crc16_arc+0x64>
        {
            if (crc & 0x8000)
 8000636:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800063a:	2b00      	cmp	r3, #0
 800063c:	da08      	bge.n	8000650 <crc16_arc+0x58>
            {
                crc = (crc << 1) ^ polynomial;
 800063e:	8afb      	ldrh	r3, [r7, #22]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	b21a      	sxth	r2, r3
 8000644:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000648:	4053      	eors	r3, r2
 800064a:	b21b      	sxth	r3, r3
 800064c:	82fb      	strh	r3, [r7, #22]
 800064e:	e002      	b.n	8000656 <crc16_arc+0x5e>
            }
            else
            {
                crc = crc << 1;
 8000650:	8afb      	ldrh	r3, [r7, #22]
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	82fb      	strh	r3, [r7, #22]
        for (uint8_t j = 0; j < 8; j++)
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	3301      	adds	r3, #1
 800065a:	73fb      	strb	r3, [r7, #15]
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	2b07      	cmp	r3, #7
 8000660:	d9e9      	bls.n	8000636 <crc16_arc+0x3e>
    for (size_t i = 0; i < length; i++)
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	3301      	adds	r3, #1
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693a      	ldr	r2, [r7, #16]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	429a      	cmp	r2, r3
 800066e:	d3d0      	bcc.n	8000612 <crc16_arc+0x1a>
            }
        }
    }

    return reverseByte(crc >> 8) | (reverseByte(crc & 0x00FF) << 8);
 8000670:	8afb      	ldrh	r3, [r7, #22]
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	b29b      	uxth	r3, r3
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff89 	bl	8000590 <reverseByte>
 800067e:	4603      	mov	r3, r0
 8000680:	b21c      	sxth	r4, r3
 8000682:	8afb      	ldrh	r3, [r7, #22]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ff82 	bl	8000590 <reverseByte>
 800068c:	4603      	mov	r3, r0
 800068e:	021b      	lsls	r3, r3, #8
 8000690:	b21b      	sxth	r3, r3
 8000692:	4323      	orrs	r3, r4
 8000694:	b21b      	sxth	r3, r3
 8000696:	b29b      	uxth	r3, r3
}
 8000698:	4618      	mov	r0, r3
 800069a:	371c      	adds	r7, #28
 800069c:	46bd      	mov	sp, r7
 800069e:	bd90      	pop	{r4, r7, pc}

080006a0 <RS485Process>:

//uint8_t sFrameRx;


void RS485Process(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0

	// ucChar =  USART_0_read_by#include "Data.h"te();

	while ((uint8_t)((USART3->ISR & 0x20)>>5) == 1)
 80006a6:	e055      	b.n	8000754 <RS485Process+0xb4>
	{
		uint8_t ucChar;
		ucChar = (uint8_t)(USART3->RDR);
 80006a8:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <RS485Process+0xd0>)
 80006aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ac:	71fb      	strb	r3, [r7, #7]

		// Reading-----------------------------------------------
		if (sFrameRx.modbus_state == READING)
 80006ae:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <RS485Process+0xd4>)
 80006b0:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d119      	bne.n	80006ec <RS485Process+0x4c>
		{
			sFrameRx.u8BuffRead[sFrameRx.data_pointer++] = ucChar;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <RS485Process+0xd4>)
 80006ba:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	4a2c      	ldr	r2, [pc, #176]	@ (8000774 <RS485Process+0xd4>)
 80006c4:	f882 1101 	strb.w	r1, [r2, #257]	@ 0x101
 80006c8:	4619      	mov	r1, r3
 80006ca:	4a2a      	ldr	r2, [pc, #168]	@ (8000774 <RS485Process+0xd4>)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	5453      	strb	r3, [r2, r1]
			if (sFrameRx.data_pointer == sFrameRx.byte_count)
 80006d0:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <RS485Process+0xd4>)
 80006d2:	f893 2101 	ldrb.w	r2, [r3, #257]	@ 0x101
 80006d6:	4b27      	ldr	r3, [pc, #156]	@ (8000774 <RS485Process+0xd4>)
 80006d8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80006dc:	429a      	cmp	r2, r3
 80006de:	d105      	bne.n	80006ec <RS485Process+0x4c>
			{
				sFrameRx.modbus_state = READING_END;
 80006e0:	4b24      	ldr	r3, [pc, #144]	@ (8000774 <RS485Process+0xd4>)
 80006e2:	2202      	movs	r2, #2
 80006e4:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
				ModbusProcess();
 80006e8:	f000 f846 	bl	8000778 <ModbusProcess>
			}
		}

		// Check byte_count--------------------------------------
		if ((sFrameRx.u8BuffRead[3] == 0) && (sFrameRx.u8BuffRead[4] > 0))
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <RS485Process+0xd4>)
 80006ee:	78db      	ldrb	r3, [r3, #3]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d10a      	bne.n	800070a <RS485Process+0x6a>
 80006f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000774 <RS485Process+0xd4>)
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d006      	beq.n	800070a <RS485Process+0x6a>
		{
			sFrameRx.byte_count = 10 + sFrameRx.u8BuffRead[4];
 80006fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <RS485Process+0xd4>)
 80006fe:	791b      	ldrb	r3, [r3, #4]
 8000700:	330a      	adds	r3, #10
 8000702:	b2da      	uxtb	r2, r3
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <RS485Process+0xd4>)
 8000706:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
		}

		// Start--------------------------------------------------
		if (sFrameRx.modbus_state == START)
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <RS485Process+0xd4>)
 800070c:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8000710:	2b00      	cmp	r3, #0
 8000712:	d11f      	bne.n	8000754 <RS485Process+0xb4>
		{
			if (ucChar == 0x55)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b55      	cmp	r3, #85	@ 0x55
 8000718:	d114      	bne.n	8000744 <RS485Process+0xa4>
			{
				sFrameRx.data_pointer = 0;
 800071a:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <RS485Process+0xd4>)
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
				sFrameRx.u8BuffRead[sFrameRx.data_pointer++] = ucChar;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <RS485Process+0xd4>)
 8000724:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8000728:	1c5a      	adds	r2, r3, #1
 800072a:	b2d1      	uxtb	r1, r2
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <RS485Process+0xd4>)
 800072e:	f882 1101 	strb.w	r1, [r2, #257]	@ 0x101
 8000732:	4619      	mov	r1, r3
 8000734:	4a0f      	ldr	r2, [pc, #60]	@ (8000774 <RS485Process+0xd4>)
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	5453      	strb	r3, [r2, r1]
				sFrameRx.modbus_state = READING;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <RS485Process+0xd4>)
 800073c:	2201      	movs	r2, #1
 800073e:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8000742:	e007      	b.n	8000754 <RS485Process+0xb4>

				}
				else
				{
					sFrameRx.modbus_state = START;
 8000744:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <RS485Process+0xd4>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
					sFrameRx.data_pointer = 0;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <RS485Process+0xd4>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
	while ((uint8_t)((USART3->ISR & 0x20)>>5) == 1)
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <RS485Process+0xd0>)
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	095b      	lsrs	r3, r3, #5
 800075a:	b2db      	uxtb	r3, r3
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b01      	cmp	r3, #1
 8000764:	d0a0      	beq.n	80006a8 <RS485Process+0x8>
				}
			}

		}

}
 8000766:	bf00      	nop
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40004800 	.word	0x40004800
 8000774:	20000028 	.word	0x20000028

08000778 <ModbusProcess>:

void ModbusProcess(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af02      	add	r7, sp, #8

	sFrameRx.modbus_state = START;
 800077e:	4b33      	ldr	r3, [pc, #204]	@ (800084c <ModbusProcess+0xd4>)
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2102      	movs	r1, #2
 800078a:	4831      	ldr	r0, [pc, #196]	@ (8000850 <ModbusProcess+0xd8>)
 800078c:	f000 ffa6 	bl	80016dc <HAL_GPIO_WritePin>
	for (uint8_t i = 0 ; i< 21 ; i++){
 8000790:	2300      	movs	r3, #0
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	e04d      	b.n	8000832 <ModbusProcess+0xba>

//		HAL_UART_Transmit(&huart3, spi_data, sizeof(spi_data), HAL_MAX_DELAY);
		HAL_SPI_TransmitReceive(&hspi1, sFrameRx.u8BuffRead,spi_data,sizeof(spi_data), HAL_MAX_DELAY);
 8000796:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007a0:	4a2c      	ldr	r2, [pc, #176]	@ (8000854 <ModbusProcess+0xdc>)
 80007a2:	492a      	ldr	r1, [pc, #168]	@ (800084c <ModbusProcess+0xd4>)
 80007a4:	482c      	ldr	r0, [pc, #176]	@ (8000858 <ModbusProcess+0xe0>)
 80007a6:	f005 f8df 	bl	8005968 <HAL_SPI_TransmitReceive>
		HAL_Delay(1);
 80007aa:	2001      	movs	r0, #1
 80007ac:	f000 fc32 	bl	8001014 <HAL_Delay>
		HAL_SPI_TransmitReceive(&hspi1,uart_data,spi_data,sizeof(uart_data), HAL_MAX_DELAY);
 80007b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007ba:	4a26      	ldr	r2, [pc, #152]	@ (8000854 <ModbusProcess+0xdc>)
 80007bc:	4927      	ldr	r1, [pc, #156]	@ (800085c <ModbusProcess+0xe4>)
 80007be:	4826      	ldr	r0, [pc, #152]	@ (8000858 <ModbusProcess+0xe0>)
 80007c0:	f005 f8d2 	bl	8005968 <HAL_SPI_TransmitReceive>
		HAL_UART_Transmit(&huart3, spi_data, sizeof(spi_data), HAL_MAX_DELAY);
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007cc:	4921      	ldr	r1, [pc, #132]	@ (8000854 <ModbusProcess+0xdc>)
 80007ce:	4824      	ldr	r0, [pc, #144]	@ (8000860 <ModbusProcess+0xe8>)
 80007d0:	f005 fc9e 	bl	8006110 <HAL_UART_Transmit>


		sFrameRx.u8BuffRead[2]++;
 80007d4:	4b1d      	ldr	r3, [pc, #116]	@ (800084c <ModbusProcess+0xd4>)
 80007d6:	789b      	ldrb	r3, [r3, #2]
 80007d8:	3301      	adds	r3, #1
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	4b1b      	ldr	r3, [pc, #108]	@ (800084c <ModbusProcess+0xd4>)
 80007de:	709a      	strb	r2, [r3, #2]
		for(int j =0; j < 6; j++)
 80007e0:	2300      	movs	r3, #0
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	e00b      	b.n	80007fe <ModbusProcess+0x86>
		{
			Header[j] = sFrameRx.u8BuffRead[j];
 80007e6:	4a19      	ldr	r2, [pc, #100]	@ (800084c <ModbusProcess+0xd4>)
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	7819      	ldrb	r1, [r3, #0]
 80007ee:	4a1d      	ldr	r2, [pc, #116]	@ (8000864 <ModbusProcess+0xec>)
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	460a      	mov	r2, r1
 80007f6:	701a      	strb	r2, [r3, #0]
		for(int j =0; j < 6; j++)
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	3301      	adds	r3, #1
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	2b05      	cmp	r3, #5
 8000802:	ddf0      	ble.n	80007e6 <ModbusProcess+0x6e>
		}
		checkCRC16_header=crc16_arc(Header, 6);
 8000804:	2106      	movs	r1, #6
 8000806:	4817      	ldr	r0, [pc, #92]	@ (8000864 <ModbusProcess+0xec>)
 8000808:	f7ff fef6 	bl	80005f8 <crc16_arc>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <ModbusProcess+0xf0>)
 8000812:	801a      	strh	r2, [r3, #0]
		sFrameRx.u8BuffRead[6]=(uint8_t)(checkCRC16_header >> 8);
 8000814:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <ModbusProcess+0xf0>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	0a1b      	lsrs	r3, r3, #8
 800081a:	b29b      	uxth	r3, r3
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <ModbusProcess+0xd4>)
 8000820:	719a      	strb	r2, [r3, #6]
		sFrameRx.u8BuffRead[7]=(uint8_t)(checkCRC16_header);
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <ModbusProcess+0xf0>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b08      	ldr	r3, [pc, #32]	@ (800084c <ModbusProcess+0xd4>)
 800082a:	71da      	strb	r2, [r3, #7]
	for (uint8_t i = 0 ; i< 21 ; i++){
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	3301      	adds	r3, #1
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b14      	cmp	r3, #20
 8000836:	d9ae      	bls.n	8000796 <ModbusProcess+0x1e>
//		HAL_Delay(1000);
	}
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2102      	movs	r1, #2
 800083c:	4804      	ldr	r0, [pc, #16]	@ (8000850 <ModbusProcess+0xd8>)
 800083e:	f000 ff4d 	bl	80016dc <HAL_GPIO_WritePin>
//	;
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000028 	.word	0x20000028
 8000850:	42020800 	.word	0x42020800
 8000854:	20000364 	.word	0x20000364
 8000858:	20000240 	.word	0x20000240
 800085c:	2000046c 	.word	0x2000046c
 8000860:	200002d0 	.word	0x200002d0
 8000864:	20000464 	.word	0x20000464
 8000868:	2000056c 	.word	0x2000056c

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000870:	f000 fb0a 	bl	8000e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000874:	f000 f809 	bl	800088a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000878:	f000 f922 	bl	8000ac0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800087c:	f000 f866 	bl	800094c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000880:	f000 f8d2 	bl	8000a28 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  RS485Process();
 8000884:	f7ff ff0c 	bl	80006a0 <RS485Process>
 8000888:	e7fc      	b.n	8000884 <main+0x18>

0800088a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b09e      	sub	sp, #120	@ 0x78
 800088e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000890:	f107 0318 	add.w	r3, r7, #24
 8000894:	2260      	movs	r2, #96	@ 0x60
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f006 f99b 	bl	8006bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089e:	463b      	mov	r3, r7
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
 80008ac:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ae:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80008b2:	f000 ff2b 	bl	800170c <HAL_PWREx_ControlVoltageScaling>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80008bc:	f000 f960 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI|RCC_OSCILLATORTYPE_MSIK;
 80008c0:	2350      	movs	r3, #80	@ 0x50
 80008c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008c4:	2301      	movs	r3, #1
 80008c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008c8:	2310      	movs	r3, #16
 80008ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSIKClockRange = RCC_MSIKRANGE_4;
 80008d0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80008d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIKState = RCC_MSIK_ON;
 80008d6:	2310      	movs	r3, #16
 80008d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008de:	2301      	movs	r3, #1
 80008e0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80008e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80008e8:	2303      	movs	r3, #3
 80008ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008ec:	230a      	movs	r3, #10
 80008ee:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80008fc:	230c      	movs	r3, #12
 80008fe:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	f107 0318 	add.w	r3, r7, #24
 8000908:	4618      	mov	r0, r3
 800090a:	f000 ff8b 	bl	8001824 <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000914:	f000 f934 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000918:	231f      	movs	r3, #31
 800091a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	2303      	movs	r3, #3
 800091e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	2104      	movs	r1, #4
 8000934:	4618      	mov	r0, r3
 8000936:	f001 fe51 	bl	80025dc <HAL_RCC_ClockConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000940:	f000 f91e 	bl	8000b80 <Error_Handler>
  }
}
 8000944:	bf00      	nop
 8000946:	3778      	adds	r7, #120	@ 0x78
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800095c:	4b30      	ldr	r3, [pc, #192]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 800095e:	4a31      	ldr	r2, [pc, #196]	@ (8000a24 <MX_SPI1_Init+0xd8>)
 8000960:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000962:	4b2f      	ldr	r3, [pc, #188]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 8000964:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000968:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800096a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000970:	4b2b      	ldr	r3, [pc, #172]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 8000972:	2207      	movs	r2, #7
 8000974:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000976:	4b2a      	ldr	r3, [pc, #168]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800097c:	4b28      	ldr	r3, [pc, #160]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000982:	4b27      	ldr	r3, [pc, #156]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 8000984:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000988:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800098a:	4b25      	ldr	r3, [pc, #148]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 800098c:	2200      	movs	r2, #0
 800098e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000990:	4b23      	ldr	r3, [pc, #140]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000996:	4b22      	ldr	r3, [pc, #136]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 8000998:	2200      	movs	r2, #0
 800099a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800099c:	4b20      	ldr	r3, [pc, #128]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80009a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 80009a4:	2207      	movs	r2, #7
 80009a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 80009aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ae:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009bc:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009c2:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009c8:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009ce:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009e6:	480e      	ldr	r0, [pc, #56]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 80009e8:	f004 fea8 	bl	800573c <HAL_SPI_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 80009f2:	f000 f8c5 	bl	8000b80 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80009fa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80009fe:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_SPI1_Init+0xd4>)
 8000a0a:	f005 faf0 	bl	8005fee <HAL_SPIEx_SetConfigAutonomousMode>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8000a14:	f000 f8b4 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000240 	.word	0x20000240
 8000a24:	40013000 	.word	0x40013000

08000a28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a2c:	4b22      	ldr	r3, [pc, #136]	@ (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a2e:	4a23      	ldr	r2, [pc, #140]	@ (8000abc <MX_USART3_UART_Init+0x94>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a32:	4b21      	ldr	r3, [pc, #132]	@ (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b17      	ldr	r3, [pc, #92]	@ (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a64:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a70:	4811      	ldr	r0, [pc, #68]	@ (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a72:	f005 fafd 	bl	8006070 <HAL_UART_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a7c:	f000 f880 	bl	8000b80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	480d      	ldr	r0, [pc, #52]	@ (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a84:	f005 ffdc 	bl	8006a40 <HAL_UARTEx_SetTxFifoThreshold>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a8e:	f000 f877 	bl	8000b80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a92:	2100      	movs	r1, #0
 8000a94:	4808      	ldr	r0, [pc, #32]	@ (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a96:	f006 f811 	bl	8006abc <HAL_UARTEx_SetRxFifoThreshold>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa0:	f000 f86e 	bl	8000b80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	@ (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000aa6:	f005 ff92 	bl	80069ce <HAL_UARTEx_DisableFifoMode>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ab0:	f000 f866 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200002d0 	.word	0x200002d0
 8000abc:	40004800 	.word	0x40004800

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b28      	ldr	r3, [pc, #160]	@ (8000b78 <MX_GPIO_Init+0xb8>)
 8000ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000adc:	4a26      	ldr	r2, [pc, #152]	@ (8000b78 <MX_GPIO_Init+0xb8>)
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ae6:	4b24      	ldr	r3, [pc, #144]	@ (8000b78 <MX_GPIO_Init+0xb8>)
 8000ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af4:	4b20      	ldr	r3, [pc, #128]	@ (8000b78 <MX_GPIO_Init+0xb8>)
 8000af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000afa:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <MX_GPIO_Init+0xb8>)
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b04:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <MX_GPIO_Init+0xb8>)
 8000b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b0a:	f003 0310 	and.w	r3, r3, #16
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b12:	4b19      	ldr	r3, [pc, #100]	@ (8000b78 <MX_GPIO_Init+0xb8>)
 8000b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b18:	4a17      	ldr	r2, [pc, #92]	@ (8000b78 <MX_GPIO_Init+0xb8>)
 8000b1a:	f043 0308 	orr.w	r3, r3, #8
 8000b1e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b22:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <MX_GPIO_Init+0xb8>)
 8000b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b28:	f003 0308 	and.w	r3, r3, #8
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	2102      	movs	r1, #2
 8000b34:	4811      	ldr	r0, [pc, #68]	@ (8000b7c <MX_GPIO_Init+0xbc>)
 8000b36:	f000 fdd1 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000b3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480b      	ldr	r0, [pc, #44]	@ (8000b7c <MX_GPIO_Init+0xbc>)
 8000b50:	f000 fbec 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000b54:	2302      	movs	r3, #2
 8000b56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4804      	ldr	r0, [pc, #16]	@ (8000b7c <MX_GPIO_Init+0xbc>)
 8000b6c:	f000 fbde 	bl	800132c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b70:	bf00      	nop
 8000b72:	3720      	adds	r7, #32
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	46020c00 	.word	0x46020c00
 8000b7c:	42020800 	.word	0x42020800

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <Error_Handler+0x8>

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	4b0a      	ldr	r3, [pc, #40]	@ (8000bbc <HAL_MspInit+0x30>)
 8000b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b98:	4a08      	ldr	r2, [pc, #32]	@ (8000bbc <HAL_MspInit+0x30>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000ba2:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_MspInit+0x30>)
 8000ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	46020c00 	.word	0x46020c00

08000bc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b0bc      	sub	sp, #240	@ 0xf0
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	22c8      	movs	r2, #200	@ 0xc8
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f005 fff7 	bl	8006bd4 <memset>
  if(hspi->Instance==SPI1)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a27      	ldr	r2, [pc, #156]	@ (8000c88 <HAL_SPI_MspInit+0xc8>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d147      	bne.n	8000c80 <HAL_SPI_MspInit+0xc0>
  /* USER CODE BEGIN SPI1_MspInit 0 */
  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000bf0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_MSIK;
 8000bfc:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8000c00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 f8b7 	bl	8002d7c <HAL_RCCEx_PeriphCLKConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8000c14:	f7ff ffb4 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c18:	4b1c      	ldr	r3, [pc, #112]	@ (8000c8c <HAL_SPI_MspInit+0xcc>)
 8000c1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8000c8c <HAL_SPI_MspInit+0xcc>)
 8000c20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c24:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000c28:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <HAL_SPI_MspInit+0xcc>)
 8000c2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c36:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <HAL_SPI_MspInit+0xcc>)
 8000c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c3c:	4a13      	ldr	r2, [pc, #76]	@ (8000c8c <HAL_SPI_MspInit+0xcc>)
 8000c3e:	f043 0310 	orr.w	r3, r3, #16
 8000c42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <HAL_SPI_MspInit+0xcc>)
 8000c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
    PE14     ------> SPI1_MISO
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    PE12     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12;
 8000c54:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000c58:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c6e:	2305      	movs	r3, #5
 8000c70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c74:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <HAL_SPI_MspInit+0xd0>)
 8000c7c:	f000 fb56 	bl	800132c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	37f0      	adds	r7, #240	@ 0xf0
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40013000 	.word	0x40013000
 8000c8c:	46020c00 	.word	0x46020c00
 8000c90:	42021000 	.word	0x42021000

08000c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0bc      	sub	sp, #240	@ 0xf0
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	22c8      	movs	r2, #200	@ 0xc8
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f005 ff8d 	bl	8006bd4 <memset>
  if(huart->Instance==USART3)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a26      	ldr	r2, [pc, #152]	@ (8000d58 <HAL_UART_MspInit+0xc4>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d145      	bne.n	8000d50 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cc4:	f04f 0204 	mov.w	r2, #4
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f002 f84f 	bl	8002d7c <HAL_RCCEx_PeriphCLKConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000ce4:	f7ff ff4c 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d5c <HAL_UART_MspInit+0xc8>)
 8000cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000cee:	4a1b      	ldr	r2, [pc, #108]	@ (8000d5c <HAL_UART_MspInit+0xc8>)
 8000cf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cf4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000cf8:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <HAL_UART_MspInit+0xc8>)
 8000cfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000cfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <HAL_UART_MspInit+0xc8>)
 8000d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d0c:	4a13      	ldr	r2, [pc, #76]	@ (8000d5c <HAL_UART_MspInit+0xc8>)
 8000d0e:	f043 0308 	orr.w	r3, r3, #8
 8000d12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <HAL_UART_MspInit+0xc8>)
 8000d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d1c:	f003 0308 	and.w	r3, r3, #8
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d24:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d3e:	2307      	movs	r3, #7
 8000d40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d44:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <HAL_UART_MspInit+0xcc>)
 8000d4c:	f000 faee 	bl	800132c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d50:	bf00      	nop
 8000d52:	37f0      	adds	r7, #240	@ 0xf0
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40004800 	.word	0x40004800
 8000d5c:	46020c00 	.word	0x46020c00
 8000d60:	42020c00 	.word	0x42020c00

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <NMI_Handler+0x4>

08000d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dba:	f000 f90b 	bl	8000fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <SystemInit+0x68>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dce:	4a17      	ldr	r2, [pc, #92]	@ (8000e2c <SystemInit+0x68>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000dd8:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <SystemInit+0x6c>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000dde:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <SystemInit+0x6c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <SystemInit+0x6c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <SystemInit+0x6c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000df0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <SystemInit+0x6c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0e      	ldr	r2, [pc, #56]	@ (8000e30 <SystemInit+0x6c>)
 8000df6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000dfa:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000dfe:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000e00:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <SystemInit+0x6c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000e06:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <SystemInit+0x6c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a09      	ldr	r2, [pc, #36]	@ (8000e30 <SystemInit+0x6c>)
 8000e0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000e12:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <SystemInit+0x6c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e18:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <SystemInit+0x68>)
 8000e1a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e1e:	609a      	str	r2, [r3, #8]
  #endif
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00
 8000e30:	46020c00 	.word	0x46020c00

08000e34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000e34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e6c <LoopForever+0x2>
/* Call the clock system initialization function.*/  bl  SystemInit
 8000e38:	f7ff ffc4 	bl	8000dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e3e:	e003      	b.n	8000e48 <LoopCopyDataInit>

08000e40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e40:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e46:	3104      	adds	r1, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e48:	480a      	ldr	r0, [pc, #40]	@ (8000e74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e50:	d3f6      	bcc.n	8000e40 <CopyDataInit>
	ldr	r2, =_sbss
 8000e52:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e54:	e002      	b.n	8000e5c <LoopFillZerobss>

08000e56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e58:	f842 3b04 	str.w	r3, [r2], #4

08000e5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <LoopForever+0x16>)
	cmp	r2, r3
 8000e5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e60:	d3f9      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e62:	f005 febf 	bl	8006be4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e66:	f7ff fd01 	bl	800086c <main>

08000e6a <LoopForever>:

LoopForever:
    b LoopForever
 8000e6a:	e7fe      	b.n	8000e6a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000e6c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000e70:	08006d54 	.word	0x08006d54
	ldr	r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e78:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000e7c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000e80:	20000574 	.word	0x20000574

08000e84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC1_IRQHandler>
	...

08000e88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <HAL_Init+0x50>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a11      	ldr	r2, [pc, #68]	@ (8000ed8 <HAL_Init+0x50>)
 8000e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 f96e 	bl	800117a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000e9e:	f001 fd8f 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8000edc <HAL_Init+0x54>)
 8000ea6:	6a1b      	ldr	r3, [r3, #32]
 8000ea8:	f003 030f 	and.w	r3, r3, #15
 8000eac:	490c      	ldr	r1, [pc, #48]	@ (8000ee0 <HAL_Init+0x58>)
 8000eae:	5ccb      	ldrb	r3, [r1, r3]
 8000eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee4 <HAL_Init+0x5c>)
 8000eb6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000eb8:	2004      	movs	r0, #4
 8000eba:	f000 f9a5 	bl	8001208 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ebe:	200f      	movs	r0, #15
 8000ec0:	f000 f812 	bl	8000ee8 <HAL_InitTick>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e002      	b.n	8000ed4 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ece:	f7ff fe5d 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40022000 	.word	0x40022000
 8000edc:	46020c00 	.word	0x46020c00
 8000ee0:	08006c44 	.word	0x08006c44
 8000ee4:	20000000 	.word	0x20000000

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000ef4:	4b33      	ldr	r3, [pc, #204]	@ (8000fc4 <HAL_InitTick+0xdc>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d101      	bne.n	8000f00 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e05c      	b.n	8000fba <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000f00:	4b31      	ldr	r3, [pc, #196]	@ (8000fc8 <HAL_InitTick+0xe0>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	d10c      	bne.n	8000f26 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000fcc <HAL_InitTick+0xe4>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc4 <HAL_InitTick+0xdc>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	e037      	b.n	8000f96 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000f26:	f000 f9c7 	bl	80012b8 <HAL_SYSTICK_GetCLKSourceConfig>
 8000f2a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d023      	beq.n	8000f7a <HAL_InitTick+0x92>
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d82d      	bhi.n	8000f94 <HAL_InitTick+0xac>
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_InitTick+0x5e>
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d00d      	beq.n	8000f60 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000f44:	e026      	b.n	8000f94 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000f46:	4b21      	ldr	r3, [pc, #132]	@ (8000fcc <HAL_InitTick+0xe4>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc4 <HAL_InitTick+0xdc>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000f54:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5c:	60fb      	str	r3, [r7, #12]
        break;
 8000f5e:	e01a      	b.n	8000f96 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000f60:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <HAL_InitTick+0xdc>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f6e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	60fb      	str	r3, [r7, #12]
        break;
 8000f78:	e00d      	b.n	8000f96 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000f7a:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_InitTick+0xdc>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f84:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f88:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f90:	60fb      	str	r3, [r7, #12]
        break;
 8000f92:	e000      	b.n	8000f96 <HAL_InitTick+0xae>
        break;
 8000f94:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f000 f914 	bl	80011c4 <HAL_SYSTICK_Config>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e009      	b.n	8000fba <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fae:	f000 f8ef 	bl	8001190 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000fb2:	4a07      	ldr	r2, [pc, #28]	@ (8000fd0 <HAL_InitTick+0xe8>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	e000e010 	.word	0xe000e010
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	20000004 	.word	0x20000004

08000fd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <HAL_IncTick+0x20>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <HAL_IncTick+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <HAL_IncTick+0x24>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000570 	.word	0x20000570

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000570 	.word	0x20000570

08001014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800101c:	f7ff ffee 	bl	8000ffc <HAL_GetTick>
 8001020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800102c:	d005      	beq.n	800103a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102e:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <HAL_Delay+0x44>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800103a:	bf00      	nop
 800103c:	f7ff ffde 	bl	8000ffc <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	429a      	cmp	r2, r3
 800104a:	d8f7      	bhi.n	800103c <HAL_Delay+0x28>
  {
  }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008

0800105c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001084:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800108c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108e:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	60d3      	str	r3, [r2, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	db0a      	blt.n	80010ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	490c      	ldr	r1, [pc, #48]	@ (800110c <__NVIC_SetPriority+0x4c>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	440b      	add	r3, r1
 80010e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e8:	e00a      	b.n	8001100 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4908      	ldr	r1, [pc, #32]	@ (8001110 <__NVIC_SetPriority+0x50>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	3b04      	subs	r3, #4
 80010f8:	0112      	lsls	r2, r2, #4
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	440b      	add	r3, r1
 80010fe:	761a      	strb	r2, [r3, #24]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000e100 	.word	0xe000e100
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	@ 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f1c3 0307 	rsb	r3, r3, #7
 800112e:	2b04      	cmp	r3, #4
 8001130:	bf28      	it	cs
 8001132:	2304      	movcs	r3, #4
 8001134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3304      	adds	r3, #4
 800113a:	2b06      	cmp	r3, #6
 800113c:	d902      	bls.n	8001144 <NVIC_EncodePriority+0x30>
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3b03      	subs	r3, #3
 8001142:	e000      	b.n	8001146 <NVIC_EncodePriority+0x32>
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43da      	mvns	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	401a      	ands	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800115c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43d9      	mvns	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	4313      	orrs	r3, r2
         );
}
 800116e:	4618      	mov	r0, r3
 8001170:	3724      	adds	r7, #36	@ 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ff6a 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800119e:	f7ff ff81 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 80011a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	68b9      	ldr	r1, [r7, #8]
 80011a8:	6978      	ldr	r0, [r7, #20]
 80011aa:	f7ff ffb3 	bl	8001114 <NVIC_EncodePriority>
 80011ae:	4602      	mov	r2, r0
 80011b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b4:	4611      	mov	r1, r2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff82 	bl	80010c0 <__NVIC_SetPriority>
}
 80011bc:	bf00      	nop
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011d4:	d301      	bcc.n	80011da <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00d      	b.n	80011f6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <HAL_SYSTICK_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80011e2:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <HAL_SYSTICK_Config+0x40>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_SYSTICK_Config+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a05      	ldr	r2, [pc, #20]	@ (8001204 <HAL_SYSTICK_Config+0x40>)
 80011ee:	f043 0303 	orr.w	r3, r3, #3
 80011f2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b04      	cmp	r3, #4
 8001214:	d844      	bhi.n	80012a0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001216:	a201      	add	r2, pc, #4	@ (adr r2, 800121c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121c:	0800123f 	.word	0x0800123f
 8001220:	0800125d 	.word	0x0800125d
 8001224:	0800127f 	.word	0x0800127f
 8001228:	080012a1 	.word	0x080012a1
 800122c:	08001231 	.word	0x08001231
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001230:	4b1f      	ldr	r3, [pc, #124]	@ (80012b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a1e      	ldr	r2, [pc, #120]	@ (80012b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6013      	str	r3, [r2, #0]
      break;
 800123c:	e031      	b.n	80012a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800123e:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a1b      	ldr	r2, [pc, #108]	@ (80012b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001244:	f023 0304 	bic.w	r3, r3, #4
 8001248:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800124a:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800124c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001250:	4a18      	ldr	r2, [pc, #96]	@ (80012b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001252:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001256:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800125a:	e022      	b.n	80012a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800125c:	4b14      	ldr	r3, [pc, #80]	@ (80012b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a13      	ldr	r2, [pc, #76]	@ (80012b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001262:	f023 0304 	bic.w	r3, r3, #4
 8001266:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800126a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001272:	4a10      	ldr	r2, [pc, #64]	@ (80012b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001274:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001278:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800127c:	e011      	b.n	80012a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800127e:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a0b      	ldr	r2, [pc, #44]	@ (80012b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001284:	f023 0304 	bic.w	r3, r3, #4
 8001288:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800128a:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001290:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001294:	4a07      	ldr	r2, [pc, #28]	@ (80012b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001296:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800129a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800129e:	e000      	b.n	80012a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80012a0:	bf00      	nop
  }
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000e010 	.word	0xe000e010
 80012b4:	46020c00 	.word	0x46020c00

080012b8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80012be:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d002      	beq.n	80012d0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80012ca:	2304      	movs	r3, #4
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	e021      	b.n	8001314 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80012d0:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80012da:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80012e2:	d011      	beq.n	8001308 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80012ea:	d810      	bhi.n	800130e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d004      	beq.n	80012fc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012f8:	d003      	beq.n	8001302 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80012fa:	e008      	b.n	800130e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
        break;
 8001300:	e008      	b.n	8001314 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001302:	2301      	movs	r3, #1
 8001304:	607b      	str	r3, [r7, #4]
        break;
 8001306:	e005      	b.n	8001314 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001308:	2302      	movs	r3, #2
 800130a:	607b      	str	r3, [r7, #4]
        break;
 800130c:	e002      	b.n	8001314 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
        break;
 8001312:	bf00      	nop
    }
  }
  return systick_source;
 8001314:	687b      	ldr	r3, [r7, #4]
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e010 	.word	0xe000e010
 8001328:	46020c00 	.word	0x46020c00

0800132c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	@ 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800133e:	e1ba      	b.n	80016b6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2101      	movs	r1, #1
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	4013      	ands	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 81aa 	beq.w	80016b0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a55      	ldr	r2, [pc, #340]	@ (80014b4 <HAL_GPIO_Init+0x188>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d15d      	bne.n	8001420 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800136a:	2201      	movs	r2, #1
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	4013      	ands	r3, r2
 8001378:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 0201 	and.w	r2, r3, #1
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69fa      	ldr	r2, [r7, #28]
 800138a:	4313      	orrs	r3, r2
 800138c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001394:	4a48      	ldr	r2, [pc, #288]	@ (80014b8 <HAL_GPIO_Init+0x18c>)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800139c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800139e:	4a46      	ldr	r2, [pc, #280]	@ (80014b8 <HAL_GPIO_Init+0x18c>)
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4413      	add	r3, r2
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	08da      	lsrs	r2, r3, #3
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	3208      	adds	r2, #8
 80013b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	220f      	movs	r2, #15
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69fa      	ldr	r2, [r7, #28]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	220b      	movs	r2, #11
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	08da      	lsrs	r2, r3, #3
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	3208      	adds	r2, #8
 80013ea:	69f9      	ldr	r1, [r7, #28]
 80013ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69fa      	ldr	r2, [r7, #28]
 8001404:	4013      	ands	r3, r2
 8001406:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	2202      	movs	r2, #2
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	69fa      	ldr	r2, [r7, #28]
 8001414:	4313      	orrs	r3, r2
 8001416:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e067      	b.n	80014f0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x104>
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b12      	cmp	r3, #18
 800142e:	d145      	bne.n	80014bc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	08da      	lsrs	r2, r3, #3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3208      	adds	r2, #8
 8001438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800143c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	220f      	movs	r2, #15
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	69fa      	ldr	r2, [r7, #28]
 8001450:	4013      	ands	r3, r2
 8001452:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	f003 020f 	and.w	r2, r3, #15
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69fa      	ldr	r2, [r7, #28]
 800146a:	4313      	orrs	r3, r2
 800146c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	08da      	lsrs	r2, r3, #3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3208      	adds	r2, #8
 8001476:	69f9      	ldr	r1, [r7, #28]
 8001478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	4013      	ands	r3, r2
 8001492:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0203 	and.w	r2, r3, #3
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	69fa      	ldr	r2, [r7, #28]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	e01e      	b.n	80014f0 <HAL_GPIO_Init+0x1c4>
 80014b2:	bf00      	nop
 80014b4:	46020000 	.word	0x46020000
 80014b8:	08006c9c 	.word	0x08006c9c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	2203      	movs	r2, #3
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69fa      	ldr	r2, [r7, #28]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0203 	and.w	r2, r3, #3
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	69fa      	ldr	r2, [r7, #28]
 80014ee:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d00b      	beq.n	8001510 <HAL_GPIO_Init+0x1e4>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d007      	beq.n	8001510 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001504:	2b11      	cmp	r3, #17
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b12      	cmp	r3, #18
 800150e:	d130      	bne.n	8001572 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69fa      	ldr	r2, [r7, #28]
 8001524:	4013      	ands	r3, r2
 8001526:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69fa      	ldr	r2, [r7, #28]
 8001536:	4313      	orrs	r3, r2
 8001538:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	69fa      	ldr	r2, [r7, #28]
 800153e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001546:	2201      	movs	r2, #1
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	69fa      	ldr	r2, [r7, #28]
 8001552:	4013      	ands	r3, r2
 8001554:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	091b      	lsrs	r3, r3, #4
 800155c:	f003 0201 	and.w	r2, r3, #1
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	4313      	orrs	r3, r2
 800156a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b03      	cmp	r3, #3
 8001578:	d017      	beq.n	80015aa <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	2203      	movs	r2, #3
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69fa      	ldr	r2, [r7, #28]
 800158e:	4013      	ands	r3, r2
 8001590:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d07c      	beq.n	80016b0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80015b6:	4a47      	ldr	r2, [pc, #284]	@ (80016d4 <HAL_GPIO_Init+0x3a8>)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	3318      	adds	r3, #24
 80015be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	220f      	movs	r2, #15
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69fa      	ldr	r2, [r7, #28]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	0a9a      	lsrs	r2, r3, #10
 80015de:	4b3e      	ldr	r3, [pc, #248]	@ (80016d8 <HAL_GPIO_Init+0x3ac>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	f002 0203 	and.w	r2, r2, #3
 80015e8:	00d2      	lsls	r2, r2, #3
 80015ea:	4093      	lsls	r3, r2
 80015ec:	69fa      	ldr	r2, [r7, #28]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80015f2:	4938      	ldr	r1, [pc, #224]	@ (80016d4 <HAL_GPIO_Init+0x3a8>)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3318      	adds	r3, #24
 80015fa:	69fa      	ldr	r2, [r7, #28]
 80015fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001600:	4b34      	ldr	r3, [pc, #208]	@ (80016d4 <HAL_GPIO_Init+0x3a8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	43db      	mvns	r3, r3
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	4013      	ands	r3, r2
 800160e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4313      	orrs	r3, r2
 8001622:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001624:	4a2b      	ldr	r2, [pc, #172]	@ (80016d4 <HAL_GPIO_Init+0x3a8>)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800162a:	4b2a      	ldr	r3, [pc, #168]	@ (80016d4 <HAL_GPIO_Init+0x3a8>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43db      	mvns	r3, r3
 8001634:	69fa      	ldr	r2, [r7, #28]
 8001636:	4013      	ands	r3, r2
 8001638:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800164e:	4a21      	ldr	r2, [pc, #132]	@ (80016d4 <HAL_GPIO_Init+0x3a8>)
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001654:	4b1f      	ldr	r3, [pc, #124]	@ (80016d4 <HAL_GPIO_Init+0x3a8>)
 8001656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800165a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	43db      	mvns	r3, r3
 8001660:	69fa      	ldr	r2, [r7, #28]
 8001662:	4013      	ands	r3, r2
 8001664:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800167a:	4a16      	ldr	r2, [pc, #88]	@ (80016d4 <HAL_GPIO_Init+0x3a8>)
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001682:	4b14      	ldr	r3, [pc, #80]	@ (80016d4 <HAL_GPIO_Init+0x3a8>)
 8001684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001688:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	43db      	mvns	r3, r3
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	4013      	ands	r3, r2
 8001692:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80016a8:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <HAL_GPIO_Init+0x3a8>)
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	3301      	adds	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	fa22 f303 	lsr.w	r3, r2, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f47f ae3d 	bne.w	8001340 <HAL_GPIO_Init+0x14>
  }
}
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
 80016ca:	3724      	adds	r7, #36	@ 0x24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	46022000 	.word	0x46022000
 80016d8:	002f7f7f 	.word	0x002f7f7f

080016dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]
 80016e8:	4613      	mov	r3, r2
 80016ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016ec:	787b      	ldrb	r3, [r7, #1]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80016f8:	e002      	b.n	8001700 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001714:	4b39      	ldr	r3, [pc, #228]	@ (80017fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001718:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800171c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	429a      	cmp	r2, r3
 8001724:	d10b      	bne.n	800173e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800172c:	d905      	bls.n	800173a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800172e:	4b33      	ldr	r3, [pc, #204]	@ (80017fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	4a32      	ldr	r2, [pc, #200]	@ (80017fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001734:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001738:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e057      	b.n	80017ee <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001744:	d90a      	bls.n	800175c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001746:	4b2d      	ldr	r3, [pc, #180]	@ (80017fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4313      	orrs	r3, r2
 8001752:	4a2a      	ldr	r2, [pc, #168]	@ (80017fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001754:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001758:	60d3      	str	r3, [r2, #12]
 800175a:	e007      	b.n	800176c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800175c:	4b27      	ldr	r3, [pc, #156]	@ (80017fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001764:	4925      	ldr	r1, [pc, #148]	@ (80017fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4313      	orrs	r3, r2
 800176a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800176c:	4b24      	ldr	r3, [pc, #144]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a24      	ldr	r2, [pc, #144]	@ (8001804 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	2232      	movs	r2, #50	@ 0x32
 800177a:	fb02 f303 	mul.w	r3, r2, r3
 800177e:	4a21      	ldr	r2, [pc, #132]	@ (8001804 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001780:	fba2 2303 	umull	r2, r3, r2, r3
 8001784:	099b      	lsrs	r3, r3, #6
 8001786:	3301      	adds	r3, #1
 8001788:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800178a:	e002      	b.n	8001792 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	3b01      	subs	r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001792:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <HAL_PWREx_ControlVoltageScaling+0x98>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f3      	bne.n	800178c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d01b      	beq.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a15      	ldr	r2, [pc, #84]	@ (8001804 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	099b      	lsrs	r3, r3, #6
 80017b6:	2232      	movs	r2, #50	@ 0x32
 80017b8:	fb02 f303 	mul.w	r3, r2, r3
 80017bc:	4a11      	ldr	r2, [pc, #68]	@ (8001804 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80017be:	fba2 2303 	umull	r2, r3, r2, r3
 80017c2:	099b      	lsrs	r3, r3, #6
 80017c4:	3301      	adds	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80017c8:	e002      	b.n	80017d0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80017d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f3      	bne.n	80017ca <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e000      	b.n	80017ee <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	46020800 	.word	0x46020800
 8001800:	20000000 	.word	0x20000000
 8001804:	10624dd3 	.word	0x10624dd3

08001808 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800180c:	4b04      	ldr	r3, [pc, #16]	@ (8001820 <HAL_PWREx_GetVoltageRange+0x18>)
 800180e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001810:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	46020800 	.word	0x46020800

08001824 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08e      	sub	sp, #56	@ 0x38
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800182c:	2300      	movs	r3, #0
 800182e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	f000 bec8 	b.w	80025ce <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800183e:	4b99      	ldr	r3, [pc, #612]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001848:	4b96      	ldr	r3, [pc, #600]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 800184a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0310 	and.w	r3, r3, #16
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 816c 	beq.w	8001b38 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001862:	2b00      	cmp	r3, #0
 8001864:	d007      	beq.n	8001876 <HAL_RCC_OscConfig+0x52>
 8001866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001868:	2b0c      	cmp	r3, #12
 800186a:	f040 80de 	bne.w	8001a2a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800186e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001870:	2b01      	cmp	r3, #1
 8001872:	f040 80da 	bne.w	8001a2a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	f000 bea5 	b.w	80025ce <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001888:	4b86      	ldr	r3, [pc, #536]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d004      	beq.n	800189e <HAL_RCC_OscConfig+0x7a>
 8001894:	4b83      	ldr	r3, [pc, #524]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800189c:	e005      	b.n	80018aa <HAL_RCC_OscConfig+0x86>
 800189e:	4b81      	ldr	r3, [pc, #516]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 80018a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018a4:	041b      	lsls	r3, r3, #16
 80018a6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d255      	bcs.n	800195a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80018ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d10a      	bne.n	80018ca <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b8:	4618      	mov	r0, r3
 80018ba:	f001 f9d9 	bl	8002c70 <RCC_SetFlashLatencyFromMSIRange>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d002      	beq.n	80018ca <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	f000 be82 	b.w	80025ce <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80018ca:	4b76      	ldr	r3, [pc, #472]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	4a75      	ldr	r2, [pc, #468]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 80018d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018d4:	6093      	str	r3, [r2, #8]
 80018d6:	4b73      	ldr	r3, [pc, #460]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e2:	4970      	ldr	r1, [pc, #448]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80018f0:	d309      	bcc.n	8001906 <HAL_RCC_OscConfig+0xe2>
 80018f2:	4b6c      	ldr	r3, [pc, #432]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f023 021f 	bic.w	r2, r3, #31
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4969      	ldr	r1, [pc, #420]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001900:	4313      	orrs	r3, r2
 8001902:	60cb      	str	r3, [r1, #12]
 8001904:	e07e      	b.n	8001a04 <HAL_RCC_OscConfig+0x1e0>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190a:	2b00      	cmp	r3, #0
 800190c:	da0a      	bge.n	8001924 <HAL_RCC_OscConfig+0x100>
 800190e:	4b65      	ldr	r3, [pc, #404]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	015b      	lsls	r3, r3, #5
 800191c:	4961      	ldr	r1, [pc, #388]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 800191e:	4313      	orrs	r3, r2
 8001920:	60cb      	str	r3, [r1, #12]
 8001922:	e06f      	b.n	8001a04 <HAL_RCC_OscConfig+0x1e0>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800192c:	d30a      	bcc.n	8001944 <HAL_RCC_OscConfig+0x120>
 800192e:	4b5d      	ldr	r3, [pc, #372]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	029b      	lsls	r3, r3, #10
 800193c:	4959      	ldr	r1, [pc, #356]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 800193e:	4313      	orrs	r3, r2
 8001940:	60cb      	str	r3, [r1, #12]
 8001942:	e05f      	b.n	8001a04 <HAL_RCC_OscConfig+0x1e0>
 8001944:	4b57      	ldr	r3, [pc, #348]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	03db      	lsls	r3, r3, #15
 8001952:	4954      	ldr	r1, [pc, #336]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001954:	4313      	orrs	r3, r2
 8001956:	60cb      	str	r3, [r1, #12]
 8001958:	e054      	b.n	8001a04 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800195a:	4b52      	ldr	r3, [pc, #328]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	4a51      	ldr	r2, [pc, #324]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001960:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001964:	6093      	str	r3, [r2, #8]
 8001966:	4b4f      	ldr	r3, [pc, #316]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	494c      	ldr	r1, [pc, #304]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001974:	4313      	orrs	r3, r2
 8001976:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001980:	d309      	bcc.n	8001996 <HAL_RCC_OscConfig+0x172>
 8001982:	4b48      	ldr	r3, [pc, #288]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	f023 021f 	bic.w	r2, r3, #31
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	4945      	ldr	r1, [pc, #276]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001990:	4313      	orrs	r3, r2
 8001992:	60cb      	str	r3, [r1, #12]
 8001994:	e028      	b.n	80019e8 <HAL_RCC_OscConfig+0x1c4>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199a:	2b00      	cmp	r3, #0
 800199c:	da0a      	bge.n	80019b4 <HAL_RCC_OscConfig+0x190>
 800199e:	4b41      	ldr	r3, [pc, #260]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	015b      	lsls	r3, r3, #5
 80019ac:	493d      	ldr	r1, [pc, #244]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	60cb      	str	r3, [r1, #12]
 80019b2:	e019      	b.n	80019e8 <HAL_RCC_OscConfig+0x1c4>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019bc:	d30a      	bcc.n	80019d4 <HAL_RCC_OscConfig+0x1b0>
 80019be:	4b39      	ldr	r3, [pc, #228]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	029b      	lsls	r3, r3, #10
 80019cc:	4935      	ldr	r1, [pc, #212]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60cb      	str	r3, [r1, #12]
 80019d2:	e009      	b.n	80019e8 <HAL_RCC_OscConfig+0x1c4>
 80019d4:	4b33      	ldr	r3, [pc, #204]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	03db      	lsls	r3, r3, #15
 80019e2:	4930      	ldr	r1, [pc, #192]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80019e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10a      	bne.n	8001a04 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f2:	4618      	mov	r0, r3
 80019f4:	f001 f93c 	bl	8002c70 <RCC_SetFlashLatencyFromMSIRange>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	f000 bde5 	b.w	80025ce <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001a04:	f001 f8de 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a08:	4b27      	ldr	r3, [pc, #156]	@ (8001aa8 <HAL_RCC_OscConfig+0x284>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fa6b 	bl	8000ee8 <HAL_InitTick>
 8001a12:	4603      	mov	r3, r0
 8001a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8001a18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 808a 	beq.w	8001b36 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8001a22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a26:	f000 bdd2 	b.w	80025ce <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d066      	beq.n	8001b00 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001a32:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001a3e:	f7ff fadd 	bl	8000ffc <HAL_GetTick>
 8001a42:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001a44:	e009      	b.n	8001a5a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a46:	f7ff fad9 	bl	8000ffc <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d902      	bls.n	8001a5a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	f000 bdba 	b.w	80025ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001a5a:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0ef      	beq.n	8001a46 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001a66:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001a6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a70:	6093      	str	r3, [r2, #8]
 8001a72:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7e:	4909      	ldr	r1, [pc, #36]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a88:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001a8c:	d30e      	bcc.n	8001aac <HAL_RCC_OscConfig+0x288>
 8001a8e:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f023 021f 	bic.w	r2, r3, #31
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	4902      	ldr	r1, [pc, #8]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60cb      	str	r3, [r1, #12]
 8001aa0:	e04a      	b.n	8001b38 <HAL_RCC_OscConfig+0x314>
 8001aa2:	bf00      	nop
 8001aa4:	46020c00 	.word	0x46020c00
 8001aa8:	20000004 	.word	0x20000004
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da0a      	bge.n	8001aca <HAL_RCC_OscConfig+0x2a6>
 8001ab4:	4b98      	ldr	r3, [pc, #608]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	015b      	lsls	r3, r3, #5
 8001ac2:	4995      	ldr	r1, [pc, #596]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60cb      	str	r3, [r1, #12]
 8001ac8:	e036      	b.n	8001b38 <HAL_RCC_OscConfig+0x314>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ad2:	d30a      	bcc.n	8001aea <HAL_RCC_OscConfig+0x2c6>
 8001ad4:	4b90      	ldr	r3, [pc, #576]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	029b      	lsls	r3, r3, #10
 8001ae2:	498d      	ldr	r1, [pc, #564]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60cb      	str	r3, [r1, #12]
 8001ae8:	e026      	b.n	8001b38 <HAL_RCC_OscConfig+0x314>
 8001aea:	4b8b      	ldr	r3, [pc, #556]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	03db      	lsls	r3, r3, #15
 8001af8:	4987      	ldr	r1, [pc, #540]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60cb      	str	r3, [r1, #12]
 8001afe:	e01b      	b.n	8001b38 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001b00:	4b85      	ldr	r3, [pc, #532]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a84      	ldr	r2, [pc, #528]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b06:	f023 0301 	bic.w	r3, r3, #1
 8001b0a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001b0c:	f7ff fa76 	bl	8000ffc <HAL_GetTick>
 8001b10:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001b12:	e009      	b.n	8001b28 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b14:	f7ff fa72 	bl	8000ffc <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d902      	bls.n	8001b28 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	f000 bd53 	b.w	80025ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001b28:	4b7b      	ldr	r3, [pc, #492]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1ef      	bne.n	8001b14 <HAL_RCC_OscConfig+0x2f0>
 8001b34:	e000      	b.n	8001b38 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001b36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 808b 	beq.w	8001c5c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_OscConfig+0x334>
 8001b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b4e:	2b0c      	cmp	r3, #12
 8001b50:	d109      	bne.n	8001b66 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d17d      	bne.n	8001c5c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	f000 bd34 	b.w	80025ce <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b6e:	d106      	bne.n	8001b7e <HAL_RCC_OscConfig+0x35a>
 8001b70:	4b69      	ldr	r3, [pc, #420]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a68      	ldr	r2, [pc, #416]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	e041      	b.n	8001c02 <HAL_RCC_OscConfig+0x3de>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b86:	d112      	bne.n	8001bae <HAL_RCC_OscConfig+0x38a>
 8001b88:	4b63      	ldr	r3, [pc, #396]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a62      	ldr	r2, [pc, #392]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b60      	ldr	r3, [pc, #384]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a5f      	ldr	r2, [pc, #380]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	4b5d      	ldr	r3, [pc, #372]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a5c      	ldr	r2, [pc, #368]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001ba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	e029      	b.n	8001c02 <HAL_RCC_OscConfig+0x3de>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001bb6:	d112      	bne.n	8001bde <HAL_RCC_OscConfig+0x3ba>
 8001bb8:	4b57      	ldr	r3, [pc, #348]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a56      	ldr	r2, [pc, #344]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b54      	ldr	r3, [pc, #336]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a53      	ldr	r2, [pc, #332]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b51      	ldr	r3, [pc, #324]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a50      	ldr	r2, [pc, #320]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	e011      	b.n	8001c02 <HAL_RCC_OscConfig+0x3de>
 8001bde:	4b4e      	ldr	r3, [pc, #312]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a4d      	ldr	r2, [pc, #308]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b4b      	ldr	r3, [pc, #300]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a4a      	ldr	r2, [pc, #296]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	4b48      	ldr	r3, [pc, #288]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a47      	ldr	r2, [pc, #284]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001c00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d014      	beq.n	8001c34 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001c0a:	f7ff f9f7 	bl	8000ffc <HAL_GetTick>
 8001c0e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c10:	e009      	b.n	8001c26 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c12:	f7ff f9f3 	bl	8000ffc <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b64      	cmp	r3, #100	@ 0x64
 8001c1e:	d902      	bls.n	8001c26 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	f000 bcd4 	b.w	80025ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c26:	4b3c      	ldr	r3, [pc, #240]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0ef      	beq.n	8001c12 <HAL_RCC_OscConfig+0x3ee>
 8001c32:	e013      	b.n	8001c5c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001c34:	f7ff f9e2 	bl	8000ffc <HAL_GetTick>
 8001c38:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c3a:	e009      	b.n	8001c50 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7ff f9de 	bl	8000ffc <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	@ 0x64
 8001c48:	d902      	bls.n	8001c50 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	f000 bcbf 	b.w	80025ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c50:	4b31      	ldr	r3, [pc, #196]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1ef      	bne.n	8001c3c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d05f      	beq.n	8001d28 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d005      	beq.n	8001c7a <HAL_RCC_OscConfig+0x456>
 8001c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c70:	2b0c      	cmp	r3, #12
 8001c72:	d114      	bne.n	8001c9e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d111      	bne.n	8001c9e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d102      	bne.n	8001c88 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	f000 bca3 	b.w	80025ce <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b23      	ldr	r3, [pc, #140]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	041b      	lsls	r3, r3, #16
 8001c96:	4920      	ldr	r1, [pc, #128]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001c9c:	e044      	b.n	8001d28 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d024      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1b      	ldr	r2, [pc, #108]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001cb2:	f7ff f9a3 	bl	8000ffc <HAL_GetTick>
 8001cb6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb8:	e009      	b.n	8001cce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cba:	f7ff f99f 	bl	8000ffc <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d902      	bls.n	8001cce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	f000 bc80 	b.w	80025ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cce:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0ef      	beq.n	8001cba <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001cda:	4b0f      	ldr	r3, [pc, #60]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	041b      	lsls	r3, r3, #16
 8001ce8:	490b      	ldr	r1, [pc, #44]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	610b      	str	r3, [r1, #16]
 8001cee:	e01b      	b.n	8001d28 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001cf0:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a08      	ldr	r2, [pc, #32]	@ (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001cf6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cfa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001cfc:	f7ff f97e 	bl	8000ffc <HAL_GetTick>
 8001d00:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d02:	e00b      	b.n	8001d1c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d04:	f7ff f97a 	bl	8000ffc <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d904      	bls.n	8001d1c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	f000 bc5b 	b.w	80025ce <HAL_RCC_OscConfig+0xdaa>
 8001d18:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d1c:	4baf      	ldr	r3, [pc, #700]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1ed      	bne.n	8001d04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80c8 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3c:	4ba7      	ldr	r3, [pc, #668]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d111      	bne.n	8001d6e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	4ba4      	ldr	r3, [pc, #656]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d50:	4aa2      	ldr	r2, [pc, #648]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001d5a:	4ba0      	ldr	r3, [pc, #640]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d6e:	4b9c      	ldr	r3, [pc, #624]	@ (8001fe0 <HAL_RCC_OscConfig+0x7bc>)
 8001d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d119      	bne.n	8001dae <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001d7a:	4b99      	ldr	r3, [pc, #612]	@ (8001fe0 <HAL_RCC_OscConfig+0x7bc>)
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7e:	4a98      	ldr	r2, [pc, #608]	@ (8001fe0 <HAL_RCC_OscConfig+0x7bc>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d86:	f7ff f939 	bl	8000ffc <HAL_GetTick>
 8001d8a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d8c:	e009      	b.n	8001da2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8e:	f7ff f935 	bl	8000ffc <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d902      	bls.n	8001da2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	f000 bc16 	b.w	80025ce <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001da2:	4b8f      	ldr	r3, [pc, #572]	@ (8001fe0 <HAL_RCC_OscConfig+0x7bc>)
 8001da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0ef      	beq.n	8001d8e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d05f      	beq.n	8001e76 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001db6:	4b89      	ldr	r3, [pc, #548]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dbc:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699a      	ldr	r2, [r3, #24]
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d037      	beq.n	8001e3c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d006      	beq.n	8001de4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e3f4      	b.n	80025ce <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d01b      	beq.n	8001e26 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001dee:	4b7b      	ldr	r3, [pc, #492]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001df0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001df4:	4a79      	ldr	r2, [pc, #484]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001df6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001dfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8001dfe:	f7ff f8fd 	bl	8000ffc <HAL_GetTick>
 8001e02:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e06:	f7ff f8f9 	bl	8000ffc <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b05      	cmp	r3, #5
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e3da      	b.n	80025ce <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001e18:	4b70      	ldr	r3, [pc, #448]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001e1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1ef      	bne.n	8001e06 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001e26:	4b6d      	ldr	r3, [pc, #436]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001e28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e2c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4969      	ldr	r1, [pc, #420]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001e3c:	4b67      	ldr	r3, [pc, #412]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001e3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e42:	4a66      	ldr	r2, [pc, #408]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001e44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001e48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001e4c:	f7ff f8d6 	bl	8000ffc <HAL_GetTick>
 8001e50:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e54:	f7ff f8d2 	bl	8000ffc <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b05      	cmp	r3, #5
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e3b3      	b.n	80025ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001e66:	4b5d      	ldr	r3, [pc, #372]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0ef      	beq.n	8001e54 <HAL_RCC_OscConfig+0x630>
 8001e74:	e01b      	b.n	8001eae <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001e76:	4b59      	ldr	r3, [pc, #356]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e7c:	4a57      	ldr	r2, [pc, #348]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001e7e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001e82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001e86:	f7ff f8b9 	bl	8000ffc <HAL_GetTick>
 8001e8a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8e:	f7ff f8b5 	bl	8000ffc <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b05      	cmp	r3, #5
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e396      	b.n	80025ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ea0:	4b4e      	ldr	r3, [pc, #312]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001ea2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ea6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ef      	bne.n	8001e8e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eae:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb6:	4b49      	ldr	r3, [pc, #292]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ebc:	4a47      	ldr	r2, [pc, #284]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001ebe:	f023 0304 	bic.w	r3, r3, #4
 8001ec2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8111 	beq.w	80020f6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eda:	4b40      	ldr	r3, [pc, #256]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d111      	bne.n	8001f0c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee8:	4b3c      	ldr	r3, [pc, #240]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eee:	4a3b      	ldr	r2, [pc, #236]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001ef8:	4b38      	ldr	r3, [pc, #224]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001f06:	2301      	movs	r3, #1
 8001f08:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001f0c:	4b34      	ldr	r3, [pc, #208]	@ (8001fe0 <HAL_RCC_OscConfig+0x7bc>)
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d118      	bne.n	8001f4a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001f18:	4b31      	ldr	r3, [pc, #196]	@ (8001fe0 <HAL_RCC_OscConfig+0x7bc>)
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1c:	4a30      	ldr	r2, [pc, #192]	@ (8001fe0 <HAL_RCC_OscConfig+0x7bc>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f24:	f7ff f86a 	bl	8000ffc <HAL_GetTick>
 8001f28:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2c:	f7ff f866 	bl	8000ffc <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e347      	b.n	80025ce <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001f3e:	4b28      	ldr	r3, [pc, #160]	@ (8001fe0 <HAL_RCC_OscConfig+0x7bc>)
 8001f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d01f      	beq.n	8001f96 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d010      	beq.n	8001f84 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f62:	4b1e      	ldr	r3, [pc, #120]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f68:	4a1c      	ldr	r2, [pc, #112]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001f6a:	f043 0304 	orr.w	r3, r3, #4
 8001f6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f72:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001f74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f78:	4a18      	ldr	r2, [pc, #96]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f82:	e018      	b.n	8001fb6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f84:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001f86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f8a:	4a14      	ldr	r2, [pc, #80]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f94:	e00f      	b.n	8001fb6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f9c:	4a0f      	ldr	r2, [pc, #60]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fac:	4a0b      	ldr	r2, [pc, #44]	@ (8001fdc <HAL_RCC_OscConfig+0x7b8>)
 8001fae:	f023 0304 	bic.w	r3, r3, #4
 8001fb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d057      	beq.n	800206e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8001fbe:	f7ff f81d 	bl	8000ffc <HAL_GetTick>
 8001fc2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc4:	e00e      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7ff f819 	bl	8000ffc <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d905      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e2f8      	b.n	80025ce <HAL_RCC_OscConfig+0xdaa>
 8001fdc:	46020c00 	.word	0x46020c00
 8001fe0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe4:	4b9c      	ldr	r3, [pc, #624]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 8001fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0e9      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d01b      	beq.n	8002036 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ffe:	4b96      	ldr	r3, [pc, #600]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 8002000:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002004:	4a94      	ldr	r2, [pc, #592]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 8002006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800200a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800200e:	e00a      	b.n	8002026 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002010:	f7fe fff4 	bl	8000ffc <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e2d3      	b.n	80025ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002026:	4b8c      	ldr	r3, [pc, #560]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 8002028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800202c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0ed      	beq.n	8002010 <HAL_RCC_OscConfig+0x7ec>
 8002034:	e053      	b.n	80020de <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002036:	4b88      	ldr	r3, [pc, #544]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 8002038:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800203c:	4a86      	ldr	r2, [pc, #536]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 800203e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002042:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002046:	e00a      	b.n	800205e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002048:	f7fe ffd8 	bl	8000ffc <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e2b7      	b.n	80025ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800205e:	4b7e      	ldr	r3, [pc, #504]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 8002060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002064:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1ed      	bne.n	8002048 <HAL_RCC_OscConfig+0x824>
 800206c:	e037      	b.n	80020de <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800206e:	f7fe ffc5 	bl	8000ffc <HAL_GetTick>
 8002072:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7fe ffc1 	bl	8000ffc <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e2a0      	b.n	80025ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800208c:	4b72      	ldr	r3, [pc, #456]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 800208e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1ed      	bne.n	8002076 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800209a:	4b6f      	ldr	r3, [pc, #444]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 800209c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01a      	beq.n	80020de <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020a8:	4b6b      	ldr	r3, [pc, #428]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 80020aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020ae:	4a6a      	ldr	r2, [pc, #424]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 80020b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7fe ff9f 	bl	8000ffc <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e27e      	b.n	80025ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020d0:	4b61      	ldr	r3, [pc, #388]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 80020d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1ed      	bne.n	80020ba <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020de:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 80020e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ec:	4a5a      	ldr	r2, [pc, #360]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 80020ee:	f023 0304 	bic.w	r3, r3, #4
 80020f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d036      	beq.n	8002170 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002106:	2b00      	cmp	r3, #0
 8002108:	d019      	beq.n	800213e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800210a:	4b53      	ldr	r3, [pc, #332]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a52      	ldr	r2, [pc, #328]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 8002110:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002114:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002116:	f7fe ff71 	bl	8000ffc <HAL_GetTick>
 800211a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800211e:	f7fe ff6d 	bl	8000ffc <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e24e      	b.n	80025ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002130:	4b49      	ldr	r3, [pc, #292]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x8fa>
 800213c:	e018      	b.n	8002170 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800213e:	4b46      	ldr	r3, [pc, #280]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a45      	ldr	r2, [pc, #276]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 8002144:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002148:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800214a:	f7fe ff57 	bl	8000ffc <HAL_GetTick>
 800214e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002152:	f7fe ff53 	bl	8000ffc <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e234      	b.n	80025ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002164:	4b3c      	ldr	r3, [pc, #240]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f0      	bne.n	8002152 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002178:	2b00      	cmp	r3, #0
 800217a:	d036      	beq.n	80021ea <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002180:	2b00      	cmp	r3, #0
 8002182:	d019      	beq.n	80021b8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002184:	4b34      	ldr	r3, [pc, #208]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a33      	ldr	r2, [pc, #204]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 800218a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800218e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002190:	f7fe ff34 	bl	8000ffc <HAL_GetTick>
 8002194:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002198:	f7fe ff30 	bl	8000ffc <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e211      	b.n	80025ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80021aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x974>
 80021b6:	e018      	b.n	80021ea <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80021b8:	4b27      	ldr	r3, [pc, #156]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a26      	ldr	r2, [pc, #152]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 80021be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021c2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80021c4:	f7fe ff1a 	bl	8000ffc <HAL_GetTick>
 80021c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80021cc:	f7fe ff16 	bl	8000ffc <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e1f7      	b.n	80025ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80021de:	4b1e      	ldr	r3, [pc, #120]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d07f      	beq.n	80022f6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d062      	beq.n	80022c4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80021fe:	4b16      	ldr	r3, [pc, #88]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	4a15      	ldr	r2, [pc, #84]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 8002204:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002208:	6093      	str	r3, [r2, #8]
 800220a:	4b13      	ldr	r3, [pc, #76]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002216:	4910      	ldr	r1, [pc, #64]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 8002218:	4313      	orrs	r3, r2
 800221a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002220:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002224:	d309      	bcc.n	800223a <HAL_RCC_OscConfig+0xa16>
 8002226:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f023 021f 	bic.w	r2, r3, #31
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	4909      	ldr	r1, [pc, #36]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 8002234:	4313      	orrs	r3, r2
 8002236:	60cb      	str	r3, [r1, #12]
 8002238:	e02a      	b.n	8002290 <HAL_RCC_OscConfig+0xa6c>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223e:	2b00      	cmp	r3, #0
 8002240:	da0c      	bge.n	800225c <HAL_RCC_OscConfig+0xa38>
 8002242:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	015b      	lsls	r3, r3, #5
 8002250:	4901      	ldr	r1, [pc, #4]	@ (8002258 <HAL_RCC_OscConfig+0xa34>)
 8002252:	4313      	orrs	r3, r2
 8002254:	60cb      	str	r3, [r1, #12]
 8002256:	e01b      	b.n	8002290 <HAL_RCC_OscConfig+0xa6c>
 8002258:	46020c00 	.word	0x46020c00
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002264:	d30a      	bcc.n	800227c <HAL_RCC_OscConfig+0xa58>
 8002266:	4ba1      	ldr	r3, [pc, #644]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	029b      	lsls	r3, r3, #10
 8002274:	499d      	ldr	r1, [pc, #628]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 8002276:	4313      	orrs	r3, r2
 8002278:	60cb      	str	r3, [r1, #12]
 800227a:	e009      	b.n	8002290 <HAL_RCC_OscConfig+0xa6c>
 800227c:	4b9b      	ldr	r3, [pc, #620]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	03db      	lsls	r3, r3, #15
 800228a:	4998      	ldr	r1, [pc, #608]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 800228c:	4313      	orrs	r3, r2
 800228e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002290:	4b96      	ldr	r3, [pc, #600]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a95      	ldr	r2, [pc, #596]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 8002296:	f043 0310 	orr.w	r3, r3, #16
 800229a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800229c:	f7fe feae 	bl	8000ffc <HAL_GetTick>
 80022a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80022a4:	f7fe feaa 	bl	8000ffc <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e18b      	b.n	80025ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80022b6:	4b8d      	ldr	r3, [pc, #564]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0xa80>
 80022c2:	e018      	b.n	80022f6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80022c4:	4b89      	ldr	r3, [pc, #548]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a88      	ldr	r2, [pc, #544]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 80022ca:	f023 0310 	bic.w	r3, r3, #16
 80022ce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80022d0:	f7fe fe94 	bl	8000ffc <HAL_GetTick>
 80022d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80022d8:	f7fe fe90 	bl	8000ffc <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e171      	b.n	80025ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80022ea:	4b80      	ldr	r3, [pc, #512]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8166 	beq.w	80025cc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002300:	2300      	movs	r3, #0
 8002302:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002306:	4b79      	ldr	r3, [pc, #484]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b0c      	cmp	r3, #12
 8002310:	f000 80f2 	beq.w	80024f8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002318:	2b02      	cmp	r3, #2
 800231a:	f040 80c5 	bne.w	80024a8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800231e:	4b73      	ldr	r3, [pc, #460]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a72      	ldr	r2, [pc, #456]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 8002324:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002328:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800232a:	f7fe fe67 	bl	8000ffc <HAL_GetTick>
 800232e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002332:	f7fe fe63 	bl	8000ffc <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e144      	b.n	80025ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002344:	4b69      	ldr	r3, [pc, #420]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f0      	bne.n	8002332 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002350:	4b66      	ldr	r3, [pc, #408]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 8002352:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b00      	cmp	r3, #0
 800235c:	d111      	bne.n	8002382 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	4b63      	ldr	r3, [pc, #396]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 8002360:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002364:	4a61      	ldr	r2, [pc, #388]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 8002366:	f043 0304 	orr.w	r3, r3, #4
 800236a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800236e:	4b5f      	ldr	r3, [pc, #380]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 8002370:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800237c:	2301      	movs	r3, #1
 800237e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002382:	4b5b      	ldr	r3, [pc, #364]	@ (80024f0 <HAL_RCC_OscConfig+0xccc>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800238a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800238e:	d102      	bne.n	8002396 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002390:	2301      	movs	r3, #1
 8002392:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002396:	4b56      	ldr	r3, [pc, #344]	@ (80024f0 <HAL_RCC_OscConfig+0xccc>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	4a55      	ldr	r2, [pc, #340]	@ (80024f0 <HAL_RCC_OscConfig+0xccc>)
 800239c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023a0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80023a2:	4b52      	ldr	r3, [pc, #328]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 80023a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023aa:	f023 0303 	bic.w	r3, r3, #3
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023b6:	3a01      	subs	r2, #1
 80023b8:	0212      	lsls	r2, r2, #8
 80023ba:	4311      	orrs	r1, r2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80023c0:	430a      	orrs	r2, r1
 80023c2:	494a      	ldr	r1, [pc, #296]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80023c8:	4b48      	ldr	r3, [pc, #288]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 80023ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023cc:	4b49      	ldr	r3, [pc, #292]	@ (80024f4 <HAL_RCC_OscConfig+0xcd0>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023d4:	3a01      	subs	r2, #1
 80023d6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80023de:	3a01      	subs	r2, #1
 80023e0:	0252      	lsls	r2, r2, #9
 80023e2:	b292      	uxth	r2, r2
 80023e4:	4311      	orrs	r1, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023ea:	3a01      	subs	r2, #1
 80023ec:	0412      	lsls	r2, r2, #16
 80023ee:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80023f2:	4311      	orrs	r1, r2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80023f8:	3a01      	subs	r2, #1
 80023fa:	0612      	lsls	r2, r2, #24
 80023fc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002400:	430a      	orrs	r2, r1
 8002402:	493a      	ldr	r1, [pc, #232]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 8002404:	4313      	orrs	r3, r2
 8002406:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002408:	4b38      	ldr	r3, [pc, #224]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 800240a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240c:	4a37      	ldr	r2, [pc, #220]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 800240e:	f023 0310 	bic.w	r3, r3, #16
 8002412:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002418:	4a34      	ldr	r2, [pc, #208]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800241e:	4b33      	ldr	r3, [pc, #204]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 8002420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002422:	4a32      	ldr	r2, [pc, #200]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 8002424:	f043 0310 	orr.w	r3, r3, #16
 8002428:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800242a:	4b30      	ldr	r3, [pc, #192]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 800242c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242e:	f023 020c 	bic.w	r2, r3, #12
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002436:	492d      	ldr	r1, [pc, #180]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 8002438:	4313      	orrs	r3, r2
 800243a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800243c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002440:	2b01      	cmp	r3, #1
 8002442:	d105      	bne.n	8002450 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002444:	4b2a      	ldr	r3, [pc, #168]	@ (80024f0 <HAL_RCC_OscConfig+0xccc>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a29      	ldr	r2, [pc, #164]	@ (80024f0 <HAL_RCC_OscConfig+0xccc>)
 800244a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800244e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002450:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002454:	2b01      	cmp	r3, #1
 8002456:	d107      	bne.n	8002468 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002458:	4b24      	ldr	r3, [pc, #144]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 800245a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800245e:	4a23      	ldr	r2, [pc, #140]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 8002460:	f023 0304 	bic.w	r3, r3, #4
 8002464:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002468:	4b20      	ldr	r3, [pc, #128]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1f      	ldr	r2, [pc, #124]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 800246e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002472:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002474:	f7fe fdc2 	bl	8000ffc <HAL_GetTick>
 8002478:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247c:	f7fe fdbe 	bl	8000ffc <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e09f      	b.n	80025ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800248e:	4b17      	ldr	r3, [pc, #92]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800249a:	4b14      	ldr	r3, [pc, #80]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 800249c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249e:	4a13      	ldr	r2, [pc, #76]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 80024a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024a4:	6293      	str	r3, [r2, #40]	@ 0x28
 80024a6:	e091      	b.n	80025cc <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80024a8:	4b10      	ldr	r3, [pc, #64]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0f      	ldr	r2, [pc, #60]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 80024ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024b2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80024b4:	f7fe fda2 	bl	8000ffc <HAL_GetTick>
 80024b8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024bc:	f7fe fd9e 	bl	8000ffc <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e07f      	b.n	80025ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80024ce:	4b07      	ldr	r3, [pc, #28]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80024da:	4b04      	ldr	r3, [pc, #16]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 80024dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024de:	4a03      	ldr	r2, [pc, #12]	@ (80024ec <HAL_RCC_OscConfig+0xcc8>)
 80024e0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80024e4:	f023 0303 	bic.w	r3, r3, #3
 80024e8:	6293      	str	r3, [r2, #40]	@ 0x28
 80024ea:	e06f      	b.n	80025cc <HAL_RCC_OscConfig+0xda8>
 80024ec:	46020c00 	.word	0x46020c00
 80024f0:	46020800 	.word	0x46020800
 80024f4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80024f8:	4b37      	ldr	r3, [pc, #220]	@ (80025d8 <HAL_RCC_OscConfig+0xdb4>)
 80024fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80024fe:	4b36      	ldr	r3, [pc, #216]	@ (80025d8 <HAL_RCC_OscConfig+0xdb4>)
 8002500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002502:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002508:	2b01      	cmp	r3, #1
 800250a:	d039      	beq.n	8002580 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0203 	and.w	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002516:	429a      	cmp	r2, r3
 8002518:	d132      	bne.n	8002580 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002528:	429a      	cmp	r2, r3
 800252a:	d129      	bne.n	8002580 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002536:	429a      	cmp	r2, r3
 8002538:	d122      	bne.n	8002580 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002544:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002546:	429a      	cmp	r2, r3
 8002548:	d11a      	bne.n	8002580 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	0a5b      	lsrs	r3, r3, #9
 800254e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002556:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d111      	bne.n	8002580 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	0c1b      	lsrs	r3, r3, #16
 8002560:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002568:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d108      	bne.n	8002580 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	0e1b      	lsrs	r3, r3, #24
 8002572:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e024      	b.n	80025ce <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002584:	4b14      	ldr	r3, [pc, #80]	@ (80025d8 <HAL_RCC_OscConfig+0xdb4>)
 8002586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002588:	08db      	lsrs	r3, r3, #3
 800258a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002592:	429a      	cmp	r2, r3
 8002594:	d01a      	beq.n	80025cc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002596:	4b10      	ldr	r3, [pc, #64]	@ (80025d8 <HAL_RCC_OscConfig+0xdb4>)
 8002598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259a:	4a0f      	ldr	r2, [pc, #60]	@ (80025d8 <HAL_RCC_OscConfig+0xdb4>)
 800259c:	f023 0310 	bic.w	r3, r3, #16
 80025a0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a2:	f7fe fd2b 	bl	8000ffc <HAL_GetTick>
 80025a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80025a8:	bf00      	nop
 80025aa:	f7fe fd27 	bl	8000ffc <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d0f9      	beq.n	80025aa <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ba:	4a07      	ldr	r2, [pc, #28]	@ (80025d8 <HAL_RCC_OscConfig+0xdb4>)
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80025c0:	4b05      	ldr	r3, [pc, #20]	@ (80025d8 <HAL_RCC_OscConfig+0xdb4>)
 80025c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c4:	4a04      	ldr	r2, [pc, #16]	@ (80025d8 <HAL_RCC_OscConfig+0xdb4>)
 80025c6:	f043 0310 	orr.w	r3, r3, #16
 80025ca:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3738      	adds	r7, #56	@ 0x38
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	46020c00 	.word	0x46020c00

080025dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e1d9      	b.n	80029a4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f0:	4b9b      	ldr	r3, [pc, #620]	@ (8002860 <HAL_RCC_ClockConfig+0x284>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d910      	bls.n	8002620 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fe:	4b98      	ldr	r3, [pc, #608]	@ (8002860 <HAL_RCC_ClockConfig+0x284>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 020f 	bic.w	r2, r3, #15
 8002606:	4996      	ldr	r1, [pc, #600]	@ (8002860 <HAL_RCC_ClockConfig+0x284>)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260e:	4b94      	ldr	r3, [pc, #592]	@ (8002860 <HAL_RCC_ClockConfig+0x284>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d001      	beq.n	8002620 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e1c1      	b.n	80029a4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b00      	cmp	r3, #0
 800262a:	d010      	beq.n	800264e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	4b8c      	ldr	r3, [pc, #560]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002638:	429a      	cmp	r2, r3
 800263a:	d908      	bls.n	800264e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800263c:	4b89      	ldr	r3, [pc, #548]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	4986      	ldr	r1, [pc, #536]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 800264a:	4313      	orrs	r3, r2
 800264c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d012      	beq.n	8002680 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	4b81      	ldr	r3, [pc, #516]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	091b      	lsrs	r3, r3, #4
 8002664:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002668:	429a      	cmp	r2, r3
 800266a:	d909      	bls.n	8002680 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800266c:	4b7d      	ldr	r3, [pc, #500]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	497a      	ldr	r1, [pc, #488]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 800267c:	4313      	orrs	r3, r2
 800267e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d010      	beq.n	80026ae <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	4b74      	ldr	r3, [pc, #464]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002698:	429a      	cmp	r2, r3
 800269a:	d908      	bls.n	80026ae <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800269c:	4b71      	ldr	r3, [pc, #452]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	496e      	ldr	r1, [pc, #440]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d010      	beq.n	80026dc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	4b69      	ldr	r3, [pc, #420]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d908      	bls.n	80026dc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80026ca:	4b66      	ldr	r3, [pc, #408]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	f023 020f 	bic.w	r2, r3, #15
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	4963      	ldr	r1, [pc, #396]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80d2 	beq.w	800288e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d143      	bne.n	800277e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 80026f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d110      	bne.n	8002726 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002704:	4b57      	ldr	r3, [pc, #348]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 8002706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800270a:	4a56      	ldr	r2, [pc, #344]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 800270c:	f043 0304 	orr.w	r3, r3, #4
 8002710:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002714:	4b53      	ldr	r3, [pc, #332]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 8002716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002722:	2301      	movs	r3, #1
 8002724:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002726:	f7fe fc69 	bl	8000ffc <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800272c:	4b4e      	ldr	r3, [pc, #312]	@ (8002868 <HAL_RCC_ClockConfig+0x28c>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00f      	beq.n	8002758 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002738:	e008      	b.n	800274c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800273a:	f7fe fc5f 	bl	8000ffc <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e12b      	b.n	80029a4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800274c:	4b46      	ldr	r3, [pc, #280]	@ (8002868 <HAL_RCC_ClockConfig+0x28c>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d107      	bne.n	800276e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800275e:	4b41      	ldr	r3, [pc, #260]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 8002760:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002764:	4a3f      	ldr	r2, [pc, #252]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 8002766:	f023 0304 	bic.w	r3, r3, #4
 800276a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800276e:	4b3d      	ldr	r3, [pc, #244]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d121      	bne.n	80027be <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e112      	b.n	80029a4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002786:	4b37      	ldr	r3, [pc, #220]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d115      	bne.n	80027be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e106      	b.n	80029a4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800279e:	4b31      	ldr	r3, [pc, #196]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e0fa      	b.n	80029a4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0f2      	b.n	80029a4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80027be:	4b29      	ldr	r3, [pc, #164]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f023 0203 	bic.w	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4926      	ldr	r1, [pc, #152]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80027d0:	f7fe fc14 	bl	8000ffc <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d112      	bne.n	8002804 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e0:	f7fe fc0c 	bl	8000ffc <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e0d6      	b.n	80029a4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b0c      	cmp	r3, #12
 8002800:	d1ee      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x204>
 8002802:	e044      	b.n	800288e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d112      	bne.n	8002832 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800280c:	e00a      	b.n	8002824 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280e:	f7fe fbf5 	bl	8000ffc <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281c:	4293      	cmp	r3, r2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e0bf      	b.n	80029a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002824:	4b0f      	ldr	r3, [pc, #60]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d1ee      	bne.n	800280e <HAL_RCC_ClockConfig+0x232>
 8002830:	e02d      	b.n	800288e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d123      	bne.n	8002882 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800283a:	e00a      	b.n	8002852 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283c:	f7fe fbde 	bl	8000ffc <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e0a8      	b.n	80029a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002852:	4b04      	ldr	r3, [pc, #16]	@ (8002864 <HAL_RCC_ClockConfig+0x288>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1ee      	bne.n	800283c <HAL_RCC_ClockConfig+0x260>
 800285e:	e016      	b.n	800288e <HAL_RCC_ClockConfig+0x2b2>
 8002860:	40022000 	.word	0x40022000
 8002864:	46020c00 	.word	0x46020c00
 8002868:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286c:	f7fe fbc6 	bl	8000ffc <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e090      	b.n	80029a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002882:	4b4a      	ldr	r3, [pc, #296]	@ (80029ac <HAL_RCC_ClockConfig+0x3d0>)
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b04      	cmp	r3, #4
 800288c:	d1ee      	bne.n	800286c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d010      	beq.n	80028bc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	4b43      	ldr	r3, [pc, #268]	@ (80029ac <HAL_RCC_ClockConfig+0x3d0>)
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d208      	bcs.n	80028bc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80028aa:	4b40      	ldr	r3, [pc, #256]	@ (80029ac <HAL_RCC_ClockConfig+0x3d0>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f023 020f 	bic.w	r2, r3, #15
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	493d      	ldr	r1, [pc, #244]	@ (80029ac <HAL_RCC_ClockConfig+0x3d0>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028bc:	4b3c      	ldr	r3, [pc, #240]	@ (80029b0 <HAL_RCC_ClockConfig+0x3d4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d210      	bcs.n	80028ec <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ca:	4b39      	ldr	r3, [pc, #228]	@ (80029b0 <HAL_RCC_ClockConfig+0x3d4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 020f 	bic.w	r2, r3, #15
 80028d2:	4937      	ldr	r1, [pc, #220]	@ (80029b0 <HAL_RCC_ClockConfig+0x3d4>)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028da:	4b35      	ldr	r3, [pc, #212]	@ (80029b0 <HAL_RCC_ClockConfig+0x3d4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d001      	beq.n	80028ec <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e05b      	b.n	80029a4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d010      	beq.n	800291a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	4b2b      	ldr	r3, [pc, #172]	@ (80029ac <HAL_RCC_ClockConfig+0x3d0>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002904:	429a      	cmp	r2, r3
 8002906:	d208      	bcs.n	800291a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002908:	4b28      	ldr	r3, [pc, #160]	@ (80029ac <HAL_RCC_ClockConfig+0x3d0>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4925      	ldr	r1, [pc, #148]	@ (80029ac <HAL_RCC_ClockConfig+0x3d0>)
 8002916:	4313      	orrs	r3, r2
 8002918:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d012      	beq.n	800294c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	4b20      	ldr	r3, [pc, #128]	@ (80029ac <HAL_RCC_ClockConfig+0x3d0>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	091b      	lsrs	r3, r3, #4
 8002930:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002934:	429a      	cmp	r2, r3
 8002936:	d209      	bcs.n	800294c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002938:	4b1c      	ldr	r3, [pc, #112]	@ (80029ac <HAL_RCC_ClockConfig+0x3d0>)
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	4919      	ldr	r1, [pc, #100]	@ (80029ac <HAL_RCC_ClockConfig+0x3d0>)
 8002948:	4313      	orrs	r3, r2
 800294a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2b00      	cmp	r3, #0
 8002956:	d010      	beq.n	800297a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	4b13      	ldr	r3, [pc, #76]	@ (80029ac <HAL_RCC_ClockConfig+0x3d0>)
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002964:	429a      	cmp	r2, r3
 8002966:	d208      	bcs.n	800297a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002968:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <HAL_RCC_ClockConfig+0x3d0>)
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	490d      	ldr	r1, [pc, #52]	@ (80029ac <HAL_RCC_ClockConfig+0x3d0>)
 8002976:	4313      	orrs	r3, r2
 8002978:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800297a:	f000 f821 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 800297e:	4602      	mov	r2, r0
 8002980:	4b0a      	ldr	r3, [pc, #40]	@ (80029ac <HAL_RCC_ClockConfig+0x3d0>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	490a      	ldr	r1, [pc, #40]	@ (80029b4 <HAL_RCC_ClockConfig+0x3d8>)
 800298a:	5ccb      	ldrb	r3, [r1, r3]
 800298c:	fa22 f303 	lsr.w	r3, r2, r3
 8002990:	4a09      	ldr	r2, [pc, #36]	@ (80029b8 <HAL_RCC_ClockConfig+0x3dc>)
 8002992:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002994:	4b09      	ldr	r3, [pc, #36]	@ (80029bc <HAL_RCC_ClockConfig+0x3e0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7fe faa5 	bl	8000ee8 <HAL_InitTick>
 800299e:	4603      	mov	r3, r0
 80029a0:	73fb      	strb	r3, [r7, #15]

  return status;
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	46020c00 	.word	0x46020c00
 80029b0:	40022000 	.word	0x40022000
 80029b4:	08006c44 	.word	0x08006c44
 80029b8:	20000000 	.word	0x20000000
 80029bc:	20000004 	.word	0x20000004

080029c0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b08b      	sub	sp, #44	@ 0x2c
 80029c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ce:	4b78      	ldr	r3, [pc, #480]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029d8:	4b75      	ldr	r3, [pc, #468]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80029da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq+0x34>
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	d121      	bne.n	8002a32 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d11e      	bne.n	8002a32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80029f4:	4b6e      	ldr	r3, [pc, #440]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d107      	bne.n	8002a10 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002a00:	4b6b      	ldr	r3, [pc, #428]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a06:	0b1b      	lsrs	r3, r3, #12
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a0e:	e005      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002a10:	4b67      	ldr	r3, [pc, #412]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	0f1b      	lsrs	r3, r3, #28
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a1c:	4a65      	ldr	r2, [pc, #404]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d110      	bne.n	8002a4e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a30:	e00d      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a32:	4b5f      	ldr	r3, [pc, #380]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d102      	bne.n	8002a44 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a3e:	4b5e      	ldr	r3, [pc, #376]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002a40:	623b      	str	r3, [r7, #32]
 8002a42:	e004      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a4a:	4b5b      	ldr	r3, [pc, #364]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002a4c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b0c      	cmp	r3, #12
 8002a52:	f040 80a5 	bne.w	8002ba0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002a56:	4b56      	ldr	r3, [pc, #344]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002a60:	4b53      	ldr	r3, [pc, #332]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a64:	0a1b      	lsrs	r3, r3, #8
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002a6e:	4b50      	ldr	r3, [pc, #320]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a72:	091b      	lsrs	r3, r3, #4
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002a7a:	4b4d      	ldr	r3, [pc, #308]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7e:	08db      	lsrs	r3, r3, #3
 8002a80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
 8002a8a:	ee07 3a90 	vmov	s15, r3
 8002a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a92:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d003      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0xe4>
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d022      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x128>
 8002aa2:	e043      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	ee07 3a90 	vmov	s15, r3
 8002aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aae:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002bbc <HAL_RCC_GetSysClockFreq+0x1fc>
 8002ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002abe:	ee07 3a90 	vmov	s15, r3
 8002ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002ac6:	ed97 6a01 	vldr	s12, [r7, #4]
 8002aca:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8002bc0 <HAL_RCC_GetSysClockFreq+0x200>
 8002ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ae6:	e046      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	ee07 3a90 	vmov	s15, r3
 8002aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8002bbc <HAL_RCC_GetSysClockFreq+0x1fc>
 8002af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002afa:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b02:	ee07 3a90 	vmov	s15, r3
 8002b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b0a:	ed97 6a01 	vldr	s12, [r7, #4]
 8002b0e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8002bc0 <HAL_RCC_GetSysClockFreq+0x200>
 8002b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b2a:	e024      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	ee07 3a90 	vmov	s15, r3
 8002b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b44:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4c:	ee07 3a90 	vmov	s15, r3
 8002b50:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b54:	ed97 6a01 	vldr	s12, [r7, #4]
 8002b58:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8002bc0 <HAL_RCC_GetSysClockFreq+0x200>
 8002b5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b60:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b68:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b74:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002b76:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b7a:	0e1b      	lsrs	r3, r3, #24
 8002b7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b80:	3301      	adds	r3, #1
 8002b82:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	ee07 3a90 	vmov	s15, r3
 8002b8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b9a:	ee17 3a90 	vmov	r3, s15
 8002b9e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	372c      	adds	r7, #44	@ 0x2c
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	46020c00 	.word	0x46020c00
 8002bb4:	08006c5c 	.word	0x08006c5c
 8002bb8:	00f42400 	.word	0x00f42400
 8002bbc:	4b742400 	.word	0x4b742400
 8002bc0:	46000000 	.word	0x46000000

08002bc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002bc8:	f7ff fefa 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b07      	ldr	r3, [pc, #28]	@ (8002bec <HAL_RCC_GetHCLKFreq+0x28>)
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	4906      	ldr	r1, [pc, #24]	@ (8002bf0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002bd8:	5ccb      	ldrb	r3, [r1, r3]
 8002bda:	fa22 f303 	lsr.w	r3, r2, r3
 8002bde:	4a05      	ldr	r2, [pc, #20]	@ (8002bf4 <HAL_RCC_GetHCLKFreq+0x30>)
 8002be0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002be2:	4b04      	ldr	r3, [pc, #16]	@ (8002bf4 <HAL_RCC_GetHCLKFreq+0x30>)
 8002be4:	681b      	ldr	r3, [r3, #0]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	46020c00 	.word	0x46020c00
 8002bf0:	08006c44 	.word	0x08006c44
 8002bf4:	20000000 	.word	0x20000000

08002bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002bfc:	f7ff ffe2 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	091b      	lsrs	r3, r3, #4
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	4903      	ldr	r1, [pc, #12]	@ (8002c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c0e:	5ccb      	ldrb	r3, [r1, r3]
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	46020c00 	.word	0x46020c00
 8002c1c:	08006c54 	.word	0x08006c54

08002c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002c24:	f7ff ffce 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	4b05      	ldr	r3, [pc, #20]	@ (8002c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	0a1b      	lsrs	r3, r3, #8
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	4903      	ldr	r1, [pc, #12]	@ (8002c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c36:	5ccb      	ldrb	r3, [r1, r3]
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	46020c00 	.word	0x46020c00
 8002c44:	08006c54 	.word	0x08006c54

08002c48 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002c4c:	f7ff ffba 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4b05      	ldr	r3, [pc, #20]	@ (8002c68 <HAL_RCC_GetPCLK3Freq+0x20>)
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	4903      	ldr	r1, [pc, #12]	@ (8002c6c <HAL_RCC_GetPCLK3Freq+0x24>)
 8002c5e:	5ccb      	ldrb	r3, [r1, r3]
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	46020c00 	.word	0x46020c00
 8002c6c:	08006c54 	.word	0x08006c54

08002c70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c78:	4b3e      	ldr	r3, [pc, #248]	@ (8002d74 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c86:	f7fe fdbf 	bl	8001808 <HAL_PWREx_GetVoltageRange>
 8002c8a:	6178      	str	r0, [r7, #20]
 8002c8c:	e019      	b.n	8002cc2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c8e:	4b39      	ldr	r3, [pc, #228]	@ (8002d74 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c94:	4a37      	ldr	r2, [pc, #220]	@ (8002d74 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002c96:	f043 0304 	orr.w	r3, r3, #4
 8002c9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002c9e:	4b35      	ldr	r3, [pc, #212]	@ (8002d74 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cac:	f7fe fdac 	bl	8001808 <HAL_PWREx_GetVoltageRange>
 8002cb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cb2:	4b30      	ldr	r3, [pc, #192]	@ (8002d74 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb8:	4a2e      	ldr	r2, [pc, #184]	@ (8002d74 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002cba:	f023 0304 	bic.w	r3, r3, #4
 8002cbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002cc8:	d003      	beq.n	8002cd2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002cd0:	d109      	bne.n	8002ce6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cd8:	d202      	bcs.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002cda:	2301      	movs	r3, #1
 8002cdc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002cde:	e033      	b.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002ce4:	e030      	b.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cec:	d208      	bcs.n	8002d00 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf4:	d102      	bne.n	8002cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	e025      	b.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e035      	b.n	8002d6c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d06:	d90f      	bls.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d14:	d902      	bls.n	8002d1c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	e015      	b.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	e012      	b.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	e00f      	b.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d2e:	d109      	bne.n	8002d44 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d36:	d102      	bne.n	8002d3e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002d38:	2301      	movs	r3, #1
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	e004      	b.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002d3e:	2302      	movs	r3, #2
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	e001      	b.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002d44:	2301      	movs	r3, #1
 8002d46:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d48:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 020f 	bic.w	r2, r3, #15
 8002d50:	4909      	ldr	r1, [pc, #36]	@ (8002d78 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002d58:	4b07      	ldr	r3, [pc, #28]	@ (8002d78 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d001      	beq.n	8002d6a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	46020c00 	.word	0x46020c00
 8002d78:	40022000 	.word	0x40022000

08002d7c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d80:	b0ba      	sub	sp, #232	@ 0xe8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9c:	f002 0401 	and.w	r4, r2, #1
 8002da0:	2500      	movs	r5, #0
 8002da2:	ea54 0305 	orrs.w	r3, r4, r5
 8002da6:	d00b      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002da8:	4bcb      	ldr	r3, [pc, #812]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dae:	f023 0103 	bic.w	r1, r3, #3
 8002db2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002db8:	4ac7      	ldr	r2, [pc, #796]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc8:	f002 0802 	and.w	r8, r2, #2
 8002dcc:	f04f 0900 	mov.w	r9, #0
 8002dd0:	ea58 0309 	orrs.w	r3, r8, r9
 8002dd4:	d00b      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002dd6:	4bc0      	ldr	r3, [pc, #768]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ddc:	f023 010c 	bic.w	r1, r3, #12
 8002de0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de6:	4abc      	ldr	r2, [pc, #752]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002de8:	430b      	orrs	r3, r1
 8002dea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df6:	f002 0a04 	and.w	sl, r2, #4
 8002dfa:	f04f 0b00 	mov.w	fp, #0
 8002dfe:	ea5a 030b 	orrs.w	r3, sl, fp
 8002e02:	d00b      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002e04:	4bb4      	ldr	r3, [pc, #720]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e0a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e14:	4ab0      	ldr	r2, [pc, #704]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e16:	430b      	orrs	r3, r1
 8002e18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e24:	f002 0308 	and.w	r3, r2, #8
 8002e28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002e36:	460b      	mov	r3, r1
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	d00b      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002e3c:	4ba6      	ldr	r3, [pc, #664]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4c:	4aa2      	ldr	r2, [pc, #648]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	f002 0310 	and.w	r3, r2, #16
 8002e60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e64:	2300      	movs	r3, #0
 8002e66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e6a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4313      	orrs	r3, r2
 8002e72:	d00b      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002e74:	4b98      	ldr	r3, [pc, #608]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e84:	4a94      	ldr	r2, [pc, #592]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e86:	430b      	orrs	r3, r1
 8002e88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f002 0320 	and.w	r3, r2, #32
 8002e98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002ea2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	d00b      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002eac:	4b8a      	ldr	r3, [pc, #552]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002eb2:	f023 0107 	bic.w	r1, r3, #7
 8002eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002eba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ebc:	4a86      	ldr	r2, [pc, #536]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ec4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ecc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002eda:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	d00b      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002ee4:	4b7c      	ldr	r3, [pc, #496]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eea:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8002eee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ef2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ef4:	4a78      	ldr	r2, [pc, #480]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002efc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002f08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f12:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f16:	460b      	mov	r3, r1
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	d00b      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002f1c:	4b6e      	ldr	r3, [pc, #440]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f2c:	4a6a      	ldr	r2, [pc, #424]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f2e:	430b      	orrs	r3, r1
 8002f30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8002f40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f44:	2300      	movs	r3, #0
 8002f46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002f4a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4313      	orrs	r3, r2
 8002f52:	d00b      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002f54:	4b60      	ldr	r3, [pc, #384]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f64:	4a5c      	ldr	r2, [pc, #368]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f66:	430b      	orrs	r3, r1
 8002f68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002f78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002f82:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002f86:	460b      	mov	r3, r1
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	d00b      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002f8c:	4b52      	ldr	r3, [pc, #328]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f92:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8002f96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f9c:	4a4e      	ldr	r2, [pc, #312]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f9e:	430b      	orrs	r3, r1
 8002fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fac:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8002fb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002fba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	d00b      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002fc4:	4b44      	ldr	r3, [pc, #272]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fca:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8002fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fd4:	4a40      	ldr	r2, [pc, #256]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002fe8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002fec:	2300      	movs	r3, #0
 8002fee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002ff2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	d00b      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002ffc:	4b36      	ldr	r3, [pc, #216]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003002:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003006:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800300a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800300c:	4a32      	ldr	r2, [pc, #200]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800300e:	430b      	orrs	r3, r1
 8003010:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003014:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003020:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003024:	2300      	movs	r3, #0
 8003026:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800302a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800302e:	460b      	mov	r3, r1
 8003030:	4313      	orrs	r3, r2
 8003032:	d00c      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003034:	4b28      	ldr	r3, [pc, #160]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003036:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800303a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800303e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003046:	4a24      	ldr	r2, [pc, #144]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003048:	430b      	orrs	r3, r1
 800304a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800304e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003056:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800305a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800305c:	2300      	movs	r3, #0
 800305e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003060:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003064:	460b      	mov	r3, r1
 8003066:	4313      	orrs	r3, r2
 8003068:	d04f      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800306a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003072:	2b80      	cmp	r3, #128	@ 0x80
 8003074:	d02d      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003076:	2b80      	cmp	r3, #128	@ 0x80
 8003078:	d827      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800307a:	2b60      	cmp	r3, #96	@ 0x60
 800307c:	d02e      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800307e:	2b60      	cmp	r3, #96	@ 0x60
 8003080:	d823      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003082:	2b40      	cmp	r3, #64	@ 0x40
 8003084:	d006      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003086:	2b40      	cmp	r3, #64	@ 0x40
 8003088:	d81f      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800308e:	2b20      	cmp	r3, #32
 8003090:	d011      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003092:	e01a      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003094:	4b10      	ldr	r3, [pc, #64]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003098:	4a0f      	ldr	r2, [pc, #60]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800309a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800309e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80030a0:	e01d      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030a6:	3308      	adds	r3, #8
 80030a8:	4618      	mov	r0, r3
 80030aa:	f002 fa17 	bl	80054dc <RCCEx_PLL2_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80030b4:	e013      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030ba:	332c      	adds	r3, #44	@ 0x2c
 80030bc:	4618      	mov	r0, r3
 80030be:	f002 faa5 	bl	800560c <RCCEx_PLL3_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80030c8:	e009      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80030d0:	e005      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80030d2:	bf00      	nop
 80030d4:	e003      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x362>
 80030d6:	bf00      	nop
 80030d8:	46020c00 	.word	0x46020c00
        break;
 80030dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030de:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10d      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80030e6:	4bb6      	ldr	r3, [pc, #728]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80030e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80030ec:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80030f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f8:	4ab1      	ldr	r2, [pc, #708]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80030fa:	430b      	orrs	r3, r1
 80030fc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003100:	e003      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003102:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003106:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800310a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003116:	673b      	str	r3, [r7, #112]	@ 0x70
 8003118:	2300      	movs	r3, #0
 800311a:	677b      	str	r3, [r7, #116]	@ 0x74
 800311c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003120:	460b      	mov	r3, r1
 8003122:	4313      	orrs	r3, r2
 8003124:	d053      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800312a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800312e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003132:	d033      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003138:	d82c      	bhi.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800313a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800313e:	d02f      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003140:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003144:	d826      	bhi.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003146:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800314a:	d008      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800314c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003150:	d820      	bhi.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8003156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800315a:	d011      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800315c:	e01a      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800315e:	4b98      	ldr	r3, [pc, #608]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003162:	4a97      	ldr	r2, [pc, #604]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003168:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800316a:	e01a      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800316c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003170:	3308      	adds	r3, #8
 8003172:	4618      	mov	r0, r3
 8003174:	f002 f9b2 	bl	80054dc <RCCEx_PLL2_Config>
 8003178:	4603      	mov	r3, r0
 800317a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800317e:	e010      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003180:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003184:	332c      	adds	r3, #44	@ 0x2c
 8003186:	4618      	mov	r0, r3
 8003188:	f002 fa40 	bl	800560c <RCCEx_PLL3_Config>
 800318c:	4603      	mov	r3, r0
 800318e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003192:	e006      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800319a:	e002      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800319c:	bf00      	nop
 800319e:	e000      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80031a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10d      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80031aa:	4b85      	ldr	r3, [pc, #532]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80031ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80031b0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80031b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031bc:	4a80      	ldr	r2, [pc, #512]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80031be:	430b      	orrs	r3, r1
 80031c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80031c4:	e003      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80031ca:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80031ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80031da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031dc:	2300      	movs	r3, #0
 80031de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031e0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80031e4:	460b      	mov	r3, r1
 80031e6:	4313      	orrs	r3, r2
 80031e8:	d046      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80031ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80031f2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80031f6:	d028      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80031f8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80031fc:	d821      	bhi.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80031fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003202:	d022      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003204:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003208:	d81b      	bhi.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800320a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800320e:	d01c      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003210:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003214:	d815      	bhi.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003216:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800321a:	d008      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800321c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003220:	d80f      	bhi.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003222:	2b00      	cmp	r3, #0
 8003224:	d011      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800322a:	d00e      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800322c:	e009      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800322e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003232:	3308      	adds	r3, #8
 8003234:	4618      	mov	r0, r3
 8003236:	f002 f951 	bl	80054dc <RCCEx_PLL2_Config>
 800323a:	4603      	mov	r3, r0
 800323c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003240:	e004      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003248:	e000      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800324a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800324c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10d      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003254:	4b5a      	ldr	r3, [pc, #360]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003256:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800325a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800325e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003262:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003266:	4a56      	ldr	r2, [pc, #344]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003268:	430b      	orrs	r3, r1
 800326a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800326e:	e003      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003270:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003274:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003280:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003284:	663b      	str	r3, [r7, #96]	@ 0x60
 8003286:	2300      	movs	r3, #0
 8003288:	667b      	str	r3, [r7, #100]	@ 0x64
 800328a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800328e:	460b      	mov	r3, r1
 8003290:	4313      	orrs	r3, r2
 8003292:	d03f      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003294:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329c:	2b04      	cmp	r3, #4
 800329e:	d81e      	bhi.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x562>
 80032a0:	a201      	add	r2, pc, #4	@ (adr r2, 80032a8 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032e7 	.word	0x080032e7
 80032ac:	080032bd 	.word	0x080032bd
 80032b0:	080032cb 	.word	0x080032cb
 80032b4:	080032e7 	.word	0x080032e7
 80032b8:	080032e7 	.word	0x080032e7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80032bc:	4b40      	ldr	r3, [pc, #256]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80032be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c0:	4a3f      	ldr	r2, [pc, #252]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80032c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80032c8:	e00e      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032ce:	332c      	adds	r3, #44	@ 0x2c
 80032d0:	4618      	mov	r0, r3
 80032d2:	f002 f99b 	bl	800560c <RCCEx_PLL3_Config>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80032dc:	e004      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80032e4:	e000      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 80032e6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80032e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10d      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80032f0:	4b33      	ldr	r3, [pc, #204]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80032f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80032f6:	f023 0107 	bic.w	r1, r3, #7
 80032fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003302:	4a2f      	ldr	r2, [pc, #188]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003304:	430b      	orrs	r3, r1
 8003306:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800330a:	e003      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003310:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003314:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003320:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003322:	2300      	movs	r3, #0
 8003324:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003326:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800332a:	460b      	mov	r3, r1
 800332c:	4313      	orrs	r3, r2
 800332e:	d04d      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003330:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003334:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003338:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800333c:	d028      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800333e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003342:	d821      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003344:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003348:	d024      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800334a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800334e:	d81b      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003350:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003354:	d00e      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8003356:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800335a:	d815      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01b      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8003360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003364:	d110      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003366:	4b16      	ldr	r3, [pc, #88]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336a:	4a15      	ldr	r2, [pc, #84]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800336c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003370:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003372:	e012      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003374:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003378:	332c      	adds	r3, #44	@ 0x2c
 800337a:	4618      	mov	r0, r3
 800337c:	f002 f946 	bl	800560c <RCCEx_PLL3_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003386:	e008      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800338e:	e004      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003390:	bf00      	nop
 8003392:	e002      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003394:	bf00      	nop
 8003396:	e000      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003398:	bf00      	nop
    }
    if (ret == HAL_OK)
 800339a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d110      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80033a2:	4b07      	ldr	r3, [pc, #28]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80033a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033a8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80033ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033b4:	4a02      	ldr	r2, [pc, #8]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80033b6:	430b      	orrs	r3, r1
 80033b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80033bc:	e006      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x650>
 80033be:	bf00      	nop
 80033c0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80033c8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80033d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80033da:	2300      	movs	r3, #0
 80033dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80033de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80033e2:	460b      	mov	r3, r1
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f000 80b5 	beq.w	8003554 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ea:	2300      	movs	r3, #0
 80033ec:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f0:	4b9d      	ldr	r3, [pc, #628]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80033f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d113      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033fe:	4b9a      	ldr	r3, [pc, #616]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003400:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003404:	4a98      	ldr	r2, [pc, #608]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003406:	f043 0304 	orr.w	r3, r3, #4
 800340a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800340e:	4b96      	ldr	r3, [pc, #600]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003410:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800341c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 8003420:	2301      	movs	r3, #1
 8003422:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003426:	4b91      	ldr	r3, [pc, #580]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342a:	4a90      	ldr	r2, [pc, #576]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003432:	f7fd fde3 	bl	8000ffc <HAL_GetTick>
 8003436:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800343a:	e00b      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343c:	f7fd fdde 	bl	8000ffc <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d903      	bls.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003452:	e005      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003454:	4b85      	ldr	r3, [pc, #532]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0ed      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8003460:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d165      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003468:	4b7f      	ldr	r3, [pc, #508]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800346a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800346e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003472:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800347a:	2b00      	cmp	r3, #0
 800347c:	d023      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800347e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003482:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800348a:	4293      	cmp	r3, r2
 800348c:	d01b      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800348e:	4b76      	ldr	r3, [pc, #472]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003498:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800349c:	4b72      	ldr	r3, [pc, #456]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800349e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034a2:	4a71      	ldr	r2, [pc, #452]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80034a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034ac:	4b6e      	ldr	r3, [pc, #440]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80034ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034b2:	4a6d      	ldr	r2, [pc, #436]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80034b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034bc:	4a6a      	ldr	r2, [pc, #424]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80034be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d019      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d2:	f7fd fd93 	bl	8000ffc <HAL_GetTick>
 80034d6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034da:	e00d      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034dc:	f7fd fd8e 	bl	8000ffc <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034e6:	1ad2      	subs	r2, r2, r3
 80034e8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d903      	bls.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 80034f6:	e006      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034f8:	4b5b      	ldr	r3, [pc, #364]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80034fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0ea      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8003506:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10d      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800350e:	4b56      	ldr	r3, [pc, #344]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003514:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003518:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800351c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003520:	4a51      	ldr	r2, [pc, #324]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003522:	430b      	orrs	r3, r1
 8003524:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003528:	e008      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800352a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800352e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8003532:	e003      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003534:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003538:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800353c:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8003540:	2b01      	cmp	r3, #1
 8003542:	d107      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003544:	4b48      	ldr	r3, [pc, #288]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003546:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800354a:	4a47      	ldr	r2, [pc, #284]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800354c:	f023 0304 	bic.w	r3, r3, #4
 8003550:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003554:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003560:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003562:	2300      	movs	r3, #0
 8003564:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003566:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800356a:	460b      	mov	r3, r1
 800356c:	4313      	orrs	r3, r2
 800356e:	d042      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003570:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003574:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003578:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800357c:	d022      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800357e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003582:	d81b      	bhi.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x840>
 8003584:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003588:	d011      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x832>
 800358a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800358e:	d815      	bhi.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x840>
 8003590:	2b00      	cmp	r3, #0
 8003592:	d019      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8003594:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003598:	d110      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800359a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800359e:	3308      	adds	r3, #8
 80035a0:	4618      	mov	r0, r3
 80035a2:	f001 ff9b 	bl	80054dc <RCCEx_PLL2_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80035ac:	e00d      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80035b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b2:	4a2d      	ldr	r2, [pc, #180]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80035b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035b8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80035ba:	e006      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80035c2:	e002      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80035c4:	bf00      	nop
 80035c6:	e000      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80035c8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80035ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10d      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80035d2:	4b25      	ldr	r3, [pc, #148]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80035d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035d8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80035dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80035e4:	4a20      	ldr	r2, [pc, #128]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80035e6:	430b      	orrs	r3, r1
 80035e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035ec:	e003      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80035f2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80035f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fe:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003602:	643b      	str	r3, [r7, #64]	@ 0x40
 8003604:	2300      	movs	r3, #0
 8003606:	647b      	str	r3, [r7, #68]	@ 0x44
 8003608:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800360c:	460b      	mov	r3, r1
 800360e:	4313      	orrs	r3, r2
 8003610:	d032      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003616:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800361a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800361e:	d00b      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003624:	d804      	bhi.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8003626:	2b00      	cmp	r3, #0
 8003628:	d008      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800362a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800362e:	d007      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003636:	e004      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003638:	bf00      	nop
 800363a:	e002      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800363c:	bf00      	nop
 800363e:	e000      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003640:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003642:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d112      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800364a:	4b07      	ldr	r3, [pc, #28]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800364c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003650:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003654:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003658:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800365c:	4a02      	ldr	r2, [pc, #8]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800365e:	430b      	orrs	r3, r1
 8003660:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003664:	e008      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8003666:	bf00      	nop
 8003668:	46020c00 	.word	0x46020c00
 800366c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003670:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003674:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003678:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003684:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003686:	2300      	movs	r3, #0
 8003688:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800368a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800368e:	460b      	mov	r3, r1
 8003690:	4313      	orrs	r3, r2
 8003692:	d00c      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003694:	4b98      	ldr	r3, [pc, #608]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003696:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800369a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800369e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036a6:	4a94      	ldr	r2, [pc, #592]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80036a8:	430b      	orrs	r3, r1
 80036aa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80036ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80036ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80036bc:	2300      	movs	r3, #0
 80036be:	637b      	str	r3, [r7, #52]	@ 0x34
 80036c0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80036c4:	460b      	mov	r3, r1
 80036c6:	4313      	orrs	r3, r2
 80036c8:	d019      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80036ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80036d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036d6:	d105      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80036d8:	4b87      	ldr	r3, [pc, #540]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80036da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036dc:	4a86      	ldr	r2, [pc, #536]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80036de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036e2:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80036e4:	4b84      	ldr	r3, [pc, #528]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80036e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80036ea:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80036ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80036f6:	4a80      	ldr	r2, [pc, #512]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80036f8:	430b      	orrs	r3, r1
 80036fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80036fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800370a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800370c:	2300      	movs	r3, #0
 800370e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003710:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003714:	460b      	mov	r3, r1
 8003716:	4313      	orrs	r3, r2
 8003718:	d00c      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800371a:	4b77      	ldr	r3, [pc, #476]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800371c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003720:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003724:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003728:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800372c:	4972      	ldr	r1, [pc, #456]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003734:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003740:	623b      	str	r3, [r7, #32]
 8003742:	2300      	movs	r3, #0
 8003744:	627b      	str	r3, [r7, #36]	@ 0x24
 8003746:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800374a:	460b      	mov	r3, r1
 800374c:	4313      	orrs	r3, r2
 800374e:	d00c      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003750:	4b69      	ldr	r3, [pc, #420]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003756:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800375a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800375e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003762:	4965      	ldr	r1, [pc, #404]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800376a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003776:	61bb      	str	r3, [r7, #24]
 8003778:	2300      	movs	r3, #0
 800377a:	61fb      	str	r3, [r7, #28]
 800377c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003780:	460b      	mov	r3, r1
 8003782:	4313      	orrs	r3, r2
 8003784:	d00c      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003786:	4b5c      	ldr	r3, [pc, #368]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003788:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800378c:	f023 0218 	bic.w	r2, r3, #24
 8003790:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003794:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003798:	4957      	ldr	r1, [pc, #348]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80037a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80037b6:	460b      	mov	r3, r1
 80037b8:	4313      	orrs	r3, r2
 80037ba:	d032      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80037bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037c8:	d105      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ca:	4b4b      	ldr	r3, [pc, #300]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80037cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ce:	4a4a      	ldr	r2, [pc, #296]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80037d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d4:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80037d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037e2:	d108      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037e8:	3308      	adds	r3, #8
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 fe76 	bl	80054dc <RCCEx_PLL2_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 80037f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10d      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80037fe:	4b3e      	ldr	r3, [pc, #248]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003800:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003804:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003808:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800380c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003810:	4939      	ldr	r1, [pc, #228]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003818:	e003      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800381e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8003822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003838:	460b      	mov	r3, r1
 800383a:	4313      	orrs	r3, r2
 800383c:	d03a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800383e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003846:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800384a:	d00e      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800384c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003850:	d815      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003852:	2b00      	cmp	r3, #0
 8003854:	d017      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003856:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800385a:	d110      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800385c:	4b26      	ldr	r3, [pc, #152]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800385e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003860:	4a25      	ldr	r2, [pc, #148]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003866:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003868:	e00e      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800386a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800386e:	3308      	adds	r3, #8
 8003870:	4618      	mov	r0, r3
 8003872:	f001 fe33 	bl	80054dc <RCCEx_PLL2_Config>
 8003876:	4603      	mov	r3, r0
 8003878:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800387c:	e004      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003884:	e000      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8003886:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003888:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10d      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003890:	4b19      	ldr	r3, [pc, #100]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003896:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800389a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800389e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038a2:	4915      	ldr	r1, [pc, #84]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80038aa:	e003      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80038b0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80038b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038bc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80038c0:	603b      	str	r3, [r7, #0]
 80038c2:	2300      	movs	r3, #0
 80038c4:	607b      	str	r3, [r7, #4]
 80038c6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80038ca:	460b      	mov	r3, r1
 80038cc:	4313      	orrs	r3, r2
 80038ce:	d00c      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80038d0:	4b09      	ldr	r3, [pc, #36]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80038d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038d6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80038da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038e2:	4905      	ldr	r1, [pc, #20]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80038ea:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	37e8      	adds	r7, #232	@ 0xe8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038f8:	46020c00 	.word	0x46020c00

080038fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b089      	sub	sp, #36	@ 0x24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003904:	4ba6      	ldr	r3, [pc, #664]	@ (8003ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800390c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800390e:	4ba4      	ldr	r3, [pc, #656]	@ (8003ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003918:	4ba1      	ldr	r3, [pc, #644]	@ (8003ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800391a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391c:	0a1b      	lsrs	r3, r3, #8
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	3301      	adds	r3, #1
 8003924:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003926:	4b9e      	ldr	r3, [pc, #632]	@ (8003ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392a:	091b      	lsrs	r3, r3, #4
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003932:	4b9b      	ldr	r3, [pc, #620]	@ (8003ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003936:	08db      	lsrs	r3, r3, #3
 8003938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	fb02 f303 	mul.w	r3, r2, r3
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d062      	beq.n	8003a1a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2b03      	cmp	r3, #3
 8003958:	f200 8081 	bhi.w	8003a5e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d024      	beq.n	80039ac <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b02      	cmp	r3, #2
 8003966:	d17a      	bne.n	8003a5e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	ee07 3a90 	vmov	s15, r3
 800396e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003972:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8003ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8003976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800397a:	4b89      	ldr	r3, [pc, #548]	@ (8003ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800397c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800397e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800398a:	ed97 6a02 	vldr	s12, [r7, #8]
 800398e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8003ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003992:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003996:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800399a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800399e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039aa:	e08f      	b.n	8003acc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80039ac:	4b7c      	ldr	r3, [pc, #496]	@ (8003ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80039b8:	4b79      	ldr	r3, [pc, #484]	@ (8003ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	0f1b      	lsrs	r3, r3, #28
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	e006      	b.n	80039d2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80039c4:	4b76      	ldr	r3, [pc, #472]	@ (8003ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80039c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039ca:	041b      	lsls	r3, r3, #16
 80039cc:	0f1b      	lsrs	r3, r3, #28
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	4a76      	ldr	r2, [pc, #472]	@ (8003bac <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80039d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d8:	ee07 3a90 	vmov	s15, r3
 80039dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	ee07 3a90 	vmov	s15, r3
 80039f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80039fc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8003ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003a00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a18:	e058      	b.n	8003acc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	ee07 3a90 	vmov	s15, r3
 8003a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a24:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8003a28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a2c:	4b5c      	ldr	r3, [pc, #368]	@ (8003ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a34:	ee07 3a90 	vmov	s15, r3
 8003a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a3c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a40:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8003ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003a44:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a48:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a50:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a5c:	e036      	b.n	8003acc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003a5e:	4b50      	ldr	r3, [pc, #320]	@ (8003ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8003a6a:	4b4d      	ldr	r3, [pc, #308]	@ (8003ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	0f1b      	lsrs	r3, r3, #28
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	e006      	b.n	8003a84 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8003a76:	4b4a      	ldr	r3, [pc, #296]	@ (8003ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a7c:	041b      	lsls	r3, r3, #16
 8003a7e:	0f1b      	lsrs	r3, r3, #28
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	4a49      	ldr	r2, [pc, #292]	@ (8003bac <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8003a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	ee07 3a90 	vmov	s15, r3
 8003a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aae:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003aca:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003acc:	4b34      	ldr	r3, [pc, #208]	@ (8003ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d017      	beq.n	8003b08 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003ad8:	4b31      	ldr	r3, [pc, #196]	@ (8003ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003adc:	0a5b      	lsrs	r3, r3, #9
 8003ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ae2:	ee07 3a90 	vmov	s15, r3
 8003ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003aea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003aee:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003afe:	ee17 2a90 	vmov	r2, s15
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	e002      	b.n	8003b0e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003b0e:	4b24      	ldr	r3, [pc, #144]	@ (8003ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d017      	beq.n	8003b4a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003b1a:	4b21      	ldr	r3, [pc, #132]	@ (8003ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b1e:	0c1b      	lsrs	r3, r3, #16
 8003b20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b24:	ee07 3a90 	vmov	s15, r3
 8003b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003b2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b30:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003b34:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b40:	ee17 2a90 	vmov	r2, s15
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	605a      	str	r2, [r3, #4]
 8003b48:	e002      	b.n	8003b50 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003b50:	4b13      	ldr	r3, [pc, #76]	@ (8003ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d017      	beq.n	8003b8c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003b5c:	4b10      	ldr	r3, [pc, #64]	@ (8003ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b60:	0e1b      	lsrs	r3, r3, #24
 8003b62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003b6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b72:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b82:	ee17 2a90 	vmov	r2, s15
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003b8a:	e002      	b.n	8003b92 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	609a      	str	r2, [r3, #8]
}
 8003b92:	bf00      	nop
 8003b94:	3724      	adds	r7, #36	@ 0x24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	46020c00 	.word	0x46020c00
 8003ba4:	4b742400 	.word	0x4b742400
 8003ba8:	46000000 	.word	0x46000000
 8003bac:	08006c5c 	.word	0x08006c5c

08003bb0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b089      	sub	sp, #36	@ 0x24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003bb8:	4ba6      	ldr	r3, [pc, #664]	@ (8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003bc2:	4ba4      	ldr	r3, [pc, #656]	@ (8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003bcc:	4ba1      	ldr	r3, [pc, #644]	@ (8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd0:	0a1b      	lsrs	r3, r3, #8
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003bda:	4b9e      	ldr	r3, [pc, #632]	@ (8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bde:	091b      	lsrs	r3, r3, #4
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003be6:	4b9b      	ldr	r3, [pc, #620]	@ (8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	08db      	lsrs	r3, r3, #3
 8003bec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	fb02 f303 	mul.w	r3, r2, r3
 8003bf6:	ee07 3a90 	vmov	s15, r3
 8003bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d062      	beq.n	8003cce <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	f200 8081 	bhi.w	8003d12 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d024      	beq.n	8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d17a      	bne.n	8003d12 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c26:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8003e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8003c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c2e:	4b89      	ldr	r3, [pc, #548]	@ (8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c42:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8003e5c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c5e:	e08f      	b.n	8003d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003c60:	4b7c      	ldr	r3, [pc, #496]	@ (8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8003c6c:	4b79      	ldr	r3, [pc, #484]	@ (8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	0f1b      	lsrs	r3, r3, #28
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	e006      	b.n	8003c86 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8003c78:	4b76      	ldr	r3, [pc, #472]	@ (8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003c7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003c7e:	041b      	lsls	r3, r3, #16
 8003c80:	0f1b      	lsrs	r3, r3, #28
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	4a76      	ldr	r2, [pc, #472]	@ (8003e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8003c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c8c:	ee07 3a90 	vmov	s15, r3
 8003c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	ee07 3a90 	vmov	s15, r3
 8003ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cac:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cb0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8003e5c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003cb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ccc:	e058      	b.n	8003d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	ee07 3a90 	vmov	s15, r3
 8003cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8003cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ce0:	4b5c      	ldr	r3, [pc, #368]	@ (8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce8:	ee07 3a90 	vmov	s15, r3
 8003cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cf0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cf4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8003e5c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003cf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d10:	e036      	b.n	8003d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003d12:	4b50      	ldr	r3, [pc, #320]	@ (8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8003d1e:	4b4d      	ldr	r3, [pc, #308]	@ (8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	0f1b      	lsrs	r3, r3, #28
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	e006      	b.n	8003d38 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8003d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d30:	041b      	lsls	r3, r3, #16
 8003d32:	0f1b      	lsrs	r3, r3, #28
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	4a49      	ldr	r2, [pc, #292]	@ (8003e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8003d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d3e:	ee07 3a90 	vmov	s15, r3
 8003d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	ee07 3a90 	vmov	s15, r3
 8003d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	ee07 3a90 	vmov	s15, r3
 8003d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d62:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003e5c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d7e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003d80:	4b34      	ldr	r3, [pc, #208]	@ (8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d017      	beq.n	8003dbc <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003d8c:	4b31      	ldr	r3, [pc, #196]	@ (8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d90:	0a5b      	lsrs	r3, r3, #9
 8003d92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d96:	ee07 3a90 	vmov	s15, r3
 8003d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003d9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003da2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003da6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003db2:	ee17 2a90 	vmov	r2, s15
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	e002      	b.n	8003dc2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003dc2:	4b24      	ldr	r3, [pc, #144]	@ (8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d017      	beq.n	8003dfe <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003dce:	4b21      	ldr	r3, [pc, #132]	@ (8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd2:	0c1b      	lsrs	r3, r3, #16
 8003dd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dd8:	ee07 3a90 	vmov	s15, r3
 8003ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003de0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003de4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003de8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003df4:	ee17 2a90 	vmov	r2, s15
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	605a      	str	r2, [r3, #4]
 8003dfc:	e002      	b.n	8003e04 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003e04:	4b13      	ldr	r3, [pc, #76]	@ (8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d017      	beq.n	8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e10:	4b10      	ldr	r3, [pc, #64]	@ (8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e14:	0e1b      	lsrs	r3, r3, #24
 8003e16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e1a:	ee07 3a90 	vmov	s15, r3
 8003e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003e22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e26:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e36:	ee17 2a90 	vmov	r2, s15
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003e3e:	e002      	b.n	8003e46 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	609a      	str	r2, [r3, #8]
}
 8003e46:	bf00      	nop
 8003e48:	3724      	adds	r7, #36	@ 0x24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	46020c00 	.word	0x46020c00
 8003e58:	4b742400 	.word	0x4b742400
 8003e5c:	46000000 	.word	0x46000000
 8003e60:	08006c5c 	.word	0x08006c5c

08003e64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b089      	sub	sp, #36	@ 0x24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003e6c:	4ba6      	ldr	r3, [pc, #664]	@ (8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e74:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003e76:	4ba4      	ldr	r3, [pc, #656]	@ (8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003e80:	4ba1      	ldr	r3, [pc, #644]	@ (8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e84:	0a1b      	lsrs	r3, r3, #8
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8003e8e:	4b9e      	ldr	r3, [pc, #632]	@ (8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e92:	091b      	lsrs	r3, r3, #4
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003e9a:	4b9b      	ldr	r3, [pc, #620]	@ (8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e9e:	08db      	lsrs	r3, r3, #3
 8003ea0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	fb02 f303 	mul.w	r3, r2, r3
 8003eaa:	ee07 3a90 	vmov	s15, r3
 8003eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d062      	beq.n	8003f82 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	f200 8081 	bhi.w	8003fc6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d024      	beq.n	8003f14 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d17a      	bne.n	8003fc6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eda:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800410c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8003ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ee2:	4b89      	ldr	r3, [pc, #548]	@ (8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ef2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ef6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004110 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8003f12:	e08f      	b.n	8004034 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003f14:	4b7c      	ldr	r3, [pc, #496]	@ (8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8003f20:	4b79      	ldr	r3, [pc, #484]	@ (8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	0f1b      	lsrs	r3, r3, #28
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	e006      	b.n	8003f3a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8003f2c:	4b76      	ldr	r3, [pc, #472]	@ (8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	0f1b      	lsrs	r3, r3, #28
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	4a76      	ldr	r2, [pc, #472]	@ (8004114 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8003f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f40:	ee07 3a90 	vmov	s15, r3
 8003f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	ee07 3a90 	vmov	s15, r3
 8003f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	ee07 3a90 	vmov	s15, r3
 8003f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f60:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f64:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004110 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003f68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f74:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f80:	e058      	b.n	8004034 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	ee07 3a90 	vmov	s15, r3
 8003f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800410c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8003f90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f94:	4b5c      	ldr	r3, [pc, #368]	@ (8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f9c:	ee07 3a90 	vmov	s15, r3
 8003fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fa4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fa8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004110 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003fac:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003fb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fc4:	e036      	b.n	8004034 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003fc6:	4b50      	ldr	r3, [pc, #320]	@ (8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d005      	beq.n	8003fde <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8003fd2:	4b4d      	ldr	r3, [pc, #308]	@ (8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	0f1b      	lsrs	r3, r3, #28
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	e006      	b.n	8003fec <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8003fde:	4b4a      	ldr	r3, [pc, #296]	@ (8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003fe0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003fe4:	041b      	lsls	r3, r3, #16
 8003fe6:	0f1b      	lsrs	r3, r3, #28
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	4a49      	ldr	r2, [pc, #292]	@ (8004114 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8003fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	ee07 3a90 	vmov	s15, r3
 8004000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	ee07 3a90 	vmov	s15, r3
 800400e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004012:	ed97 6a02 	vldr	s12, [r7, #8]
 8004016:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004110 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800401a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800401e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004026:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800402a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800402e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004032:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004034:	4b34      	ldr	r3, [pc, #208]	@ (8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d017      	beq.n	8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004040:	4b31      	ldr	r3, [pc, #196]	@ (8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004044:	0a5b      	lsrs	r3, r3, #9
 8004046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004052:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004056:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800405a:	edd7 6a07 	vldr	s13, [r7, #28]
 800405e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004066:	ee17 2a90 	vmov	r2, s15
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	e002      	b.n	8004076 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004076:	4b24      	ldr	r3, [pc, #144]	@ (8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d017      	beq.n	80040b2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004082:	4b21      	ldr	r3, [pc, #132]	@ (8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004086:	0c1b      	lsrs	r3, r3, #16
 8004088:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800408c:	ee07 3a90 	vmov	s15, r3
 8004090:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004094:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004098:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800409c:	edd7 6a07 	vldr	s13, [r7, #28]
 80040a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040a8:	ee17 2a90 	vmov	r2, s15
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	605a      	str	r2, [r3, #4]
 80040b0:	e002      	b.n	80040b8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80040b8:	4b13      	ldr	r3, [pc, #76]	@ (8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80040ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d017      	beq.n	80040f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80040c4:	4b10      	ldr	r3, [pc, #64]	@ (8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80040c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c8:	0e1b      	lsrs	r3, r3, #24
 80040ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80040d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040da:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80040de:	edd7 6a07 	vldr	s13, [r7, #28]
 80040e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040ea:	ee17 2a90 	vmov	r2, s15
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80040f2:	e002      	b.n	80040fa <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	609a      	str	r2, [r3, #8]
}
 80040fa:	bf00      	nop
 80040fc:	3724      	adds	r7, #36	@ 0x24
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	46020c00 	.word	0x46020c00
 800410c:	4b742400 	.word	0x4b742400
 8004110:	46000000 	.word	0x46000000
 8004114:	08006c5c 	.word	0x08006c5c

08004118 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08e      	sub	sp, #56	@ 0x38
 800411c:	af00      	add	r7, sp, #0
 800411e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004126:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800412a:	430b      	orrs	r3, r1
 800412c:	d145      	bne.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800412e:	4ba7      	ldr	r3, [pc, #668]	@ (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004134:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004138:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800413a:	4ba4      	ldr	r3, [pc, #656]	@ (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800413c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b02      	cmp	r3, #2
 8004146:	d108      	bne.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800414e:	d104      	bne.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004150:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004154:	637b      	str	r3, [r7, #52]	@ 0x34
 8004156:	f001 b9b3 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800415a:	4b9c      	ldr	r3, [pc, #624]	@ (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800415c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004160:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004164:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004168:	d114      	bne.n	8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800416a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004170:	d110      	bne.n	8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004172:	4b96      	ldr	r3, [pc, #600]	@ (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800417c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004180:	d103      	bne.n	800418a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004182:	23fa      	movs	r3, #250	@ 0xfa
 8004184:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004186:	f001 b99b 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800418a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800418e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004190:	f001 b996 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004194:	4b8d      	ldr	r3, [pc, #564]	@ (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800419c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041a0:	d107      	bne.n	80041b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80041a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041a8:	d103      	bne.n	80041b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80041aa:	4b89      	ldr	r3, [pc, #548]	@ (80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80041ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80041ae:	f001 b987 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80041b6:	f001 b983 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80041ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041be:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80041c2:	430b      	orrs	r3, r1
 80041c4:	d151      	bne.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80041c6:	4b81      	ldr	r3, [pc, #516]	@ (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80041c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80041cc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80041d0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80041d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d4:	2b80      	cmp	r3, #128	@ 0x80
 80041d6:	d035      	beq.n	8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80041d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041da:	2b80      	cmp	r3, #128	@ 0x80
 80041dc:	d841      	bhi.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80041de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e0:	2b60      	cmp	r3, #96	@ 0x60
 80041e2:	d02a      	beq.n	800423a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80041e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e6:	2b60      	cmp	r3, #96	@ 0x60
 80041e8:	d83b      	bhi.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80041ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ec:	2b40      	cmp	r3, #64	@ 0x40
 80041ee:	d009      	beq.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80041f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f2:	2b40      	cmp	r3, #64	@ 0x40
 80041f4:	d835      	bhi.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80041f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00c      	beq.n	8004216 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80041fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d012      	beq.n	8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004202:	e02e      	b.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004204:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fb77 	bl	80038fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004212:	f001 b955 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004216:	f107 0318 	add.w	r3, r7, #24
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff fcc8 	bl	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004224:	f001 b94c 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004228:	f107 030c 	add.w	r3, r7, #12
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff fe19 	bl	8003e64 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004236:	f001 b943 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800423a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800423e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004240:	f001 b93e 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004244:	4b61      	ldr	r3, [pc, #388]	@ (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800424c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004250:	d103      	bne.n	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004252:	4b60      	ldr	r3, [pc, #384]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004254:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004256:	f001 b933 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800425e:	f001 b92f 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004266:	f001 b92b 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800426a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800426e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004272:	430b      	orrs	r3, r1
 8004274:	d158      	bne.n	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004276:	4b55      	ldr	r3, [pc, #340]	@ (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004278:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800427c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004280:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004288:	d03b      	beq.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800428a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004290:	d846      	bhi.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004294:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004298:	d02e      	beq.n	80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800429a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042a0:	d83e      	bhi.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80042a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042a8:	d00b      	beq.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80042aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042b0:	d836      	bhi.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80042b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00d      	beq.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80042b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042be:	d012      	beq.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80042c0:	e02e      	b.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80042c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff fb18 	bl	80038fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042d0:	f001 b8f6 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042d4:	f107 0318 	add.w	r3, r7, #24
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff fc69 	bl	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042e2:	f001 b8ed 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80042e6:	f107 030c 	add.w	r3, r7, #12
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fdba 	bl	8003e64 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042f4:	f001 b8e4 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80042f8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80042fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042fe:	f001 b8df 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004302:	4b32      	ldr	r3, [pc, #200]	@ (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800430a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800430e:	d103      	bne.n	8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8004310:	4b30      	ldr	r3, [pc, #192]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004312:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004314:	f001 b8d4 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800431c:	f001 b8d0 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004324:	f001 b8cc 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800432c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004330:	430b      	orrs	r3, r1
 8004332:	d126      	bne.n	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004334:	4b25      	ldr	r3, [pc, #148]	@ (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004336:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800433a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800433e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004340:	4b22      	ldr	r3, [pc, #136]	@ (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800434c:	d106      	bne.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800434e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004350:	2b00      	cmp	r3, #0
 8004352:	d103      	bne.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8004354:	4b1f      	ldr	r3, [pc, #124]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004356:	637b      	str	r3, [r7, #52]	@ 0x34
 8004358:	f001 b8b2 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800435c:	4b1b      	ldr	r3, [pc, #108]	@ (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004368:	d107      	bne.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800436a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004370:	d103      	bne.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8004372:	4b19      	ldr	r3, [pc, #100]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004374:	637b      	str	r3, [r7, #52]	@ 0x34
 8004376:	f001 b8a3 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	637b      	str	r3, [r7, #52]	@ 0x34
 800437e:	f001 b89f 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004386:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800438a:	430b      	orrs	r3, r1
 800438c:	d16e      	bne.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800438e:	4b0f      	ldr	r3, [pc, #60]	@ (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004394:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004398:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800439a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80043a0:	d03d      	beq.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80043a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80043a8:	d85c      	bhi.n	8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80043aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043b0:	d014      	beq.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80043b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043b8:	d854      	bhi.n	8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80043ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01f      	beq.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80043c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043c6:	d012      	beq.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80043c8:	e04c      	b.n	8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80043ca:	bf00      	nop
 80043cc:	46020c00 	.word	0x46020c00
 80043d0:	0007a120 	.word	0x0007a120
 80043d4:	00f42400 	.word	0x00f42400
 80043d8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fa8b 	bl	80038fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80043e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043ea:	f001 b869 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043ee:	f107 0318 	add.w	r3, r7, #24
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff fbdc 	bl	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043fc:	f001 b860 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004400:	4ba7      	ldr	r3, [pc, #668]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004408:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800440c:	d103      	bne.n	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800440e:	4ba5      	ldr	r3, [pc, #660]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004410:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004412:	f001 b855 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800441a:	f001 b851 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800441e:	4ba0      	ldr	r3, [pc, #640]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b20      	cmp	r3, #32
 8004428:	d118      	bne.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800442a:	4b9d      	ldr	r3, [pc, #628]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8004436:	4b9a      	ldr	r3, [pc, #616]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	0e1b      	lsrs	r3, r3, #24
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	e006      	b.n	8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004442:	4b97      	ldr	r3, [pc, #604]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004444:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004448:	041b      	lsls	r3, r3, #16
 800444a:	0e1b      	lsrs	r3, r3, #24
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	4a95      	ldr	r2, [pc, #596]	@ (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004456:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004458:	f001 b832 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004460:	f001 b82e 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004468:	f001 b82a 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800446c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004470:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004474:	430b      	orrs	r3, r1
 8004476:	d17f      	bne.n	8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004478:	4b89      	ldr	r3, [pc, #548]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800447a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800447e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004482:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004486:	2b00      	cmp	r3, #0
 8004488:	d165      	bne.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800448a:	4b85      	ldr	r3, [pc, #532]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800448c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004490:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004494:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8004496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004498:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800449c:	d034      	beq.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800449e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80044a4:	d853      	bhi.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80044a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044ac:	d00b      	beq.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80044ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044b4:	d84b      	bhi.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80044b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d016      	beq.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80044bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044c2:	d009      	beq.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80044c4:	e043      	b.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80044c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff fa16 	bl	80038fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80044d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80044d4:	f000 bff4 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044d8:	f107 0318 	add.w	r3, r7, #24
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff fb67 	bl	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80044e6:	f000 bfeb 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80044ea:	4b6d      	ldr	r3, [pc, #436]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044f6:	d103      	bne.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 80044f8:	4b6a      	ldr	r3, [pc, #424]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80044fa:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80044fc:	f000 bfe0 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004504:	f000 bfdc 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004508:	4b65      	ldr	r3, [pc, #404]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0320 	and.w	r3, r3, #32
 8004510:	2b20      	cmp	r3, #32
 8004512:	d118      	bne.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004514:	4b62      	ldr	r3, [pc, #392]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8004520:	4b5f      	ldr	r3, [pc, #380]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	0e1b      	lsrs	r3, r3, #24
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	e006      	b.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800452c:	4b5c      	ldr	r3, [pc, #368]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800452e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004532:	041b      	lsls	r3, r3, #16
 8004534:	0e1b      	lsrs	r3, r3, #24
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	4a5b      	ldr	r2, [pc, #364]	@ (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800453c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004540:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004542:	f000 bfbd 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800454a:	f000 bfb9 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004552:	f000 bfb5 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8004556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004558:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800455c:	d108      	bne.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800455e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff f9ca 	bl	80038fc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456a:	637b      	str	r3, [r7, #52]	@ 0x34
 800456c:	f000 bfa8 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	637b      	str	r3, [r7, #52]	@ 0x34
 8004574:	f000 bfa4 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800457c:	1e51      	subs	r1, r2, #1
 800457e:	430b      	orrs	r3, r1
 8004580:	d136      	bne.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004582:	4b47      	ldr	r3, [pc, #284]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800458e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004590:	2b00      	cmp	r3, #0
 8004592:	d104      	bne.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004594:	f7fe fb44 	bl	8002c20 <HAL_RCC_GetPCLK2Freq>
 8004598:	6378      	str	r0, [r7, #52]	@ 0x34
 800459a:	f000 bf91 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800459e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d104      	bne.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80045a4:	f7fe fa0c 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 80045a8:	6378      	str	r0, [r7, #52]	@ 0x34
 80045aa:	f000 bf89 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80045ae:	4b3c      	ldr	r3, [pc, #240]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ba:	d106      	bne.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80045bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d103      	bne.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80045c2:	4b3a      	ldr	r3, [pc, #232]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80045c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80045c6:	f000 bf7b 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80045ca:	4b35      	ldr	r3, [pc, #212]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80045cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d107      	bne.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80045d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d104      	bne.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 80045de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80045e4:	f000 bf6c 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80045ec:	f000 bf68 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80045f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045f4:	1e91      	subs	r1, r2, #2
 80045f6:	430b      	orrs	r3, r1
 80045f8:	d136      	bne.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80045fa:	4b29      	ldr	r3, [pc, #164]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80045fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004600:	f003 030c 	and.w	r3, r3, #12
 8004604:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004608:	2b00      	cmp	r3, #0
 800460a:	d104      	bne.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800460c:	f7fe faf4 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
 8004610:	6378      	str	r0, [r7, #52]	@ 0x34
 8004612:	f000 bf55 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8004616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004618:	2b04      	cmp	r3, #4
 800461a:	d104      	bne.n	8004626 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800461c:	f7fe f9d0 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8004620:	6378      	str	r0, [r7, #52]	@ 0x34
 8004622:	f000 bf4d 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004626:	4b1e      	ldr	r3, [pc, #120]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800462e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004632:	d106      	bne.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8004634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004636:	2b08      	cmp	r3, #8
 8004638:	d103      	bne.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800463a:	4b1c      	ldr	r3, [pc, #112]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800463c:	637b      	str	r3, [r7, #52]	@ 0x34
 800463e:	f000 bf3f 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004642:	4b17      	ldr	r3, [pc, #92]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b02      	cmp	r3, #2
 800464e:	d107      	bne.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8004650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004652:	2b0c      	cmp	r3, #12
 8004654:	d104      	bne.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8004656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800465a:	637b      	str	r3, [r7, #52]	@ 0x34
 800465c:	f000 bf30 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	637b      	str	r3, [r7, #52]	@ 0x34
 8004664:	f000 bf2c 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800466c:	1f11      	subs	r1, r2, #4
 800466e:	430b      	orrs	r3, r1
 8004670:	d13f      	bne.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004672:	4b0b      	ldr	r3, [pc, #44]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004678:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800467c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800467e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004680:	2b00      	cmp	r3, #0
 8004682:	d104      	bne.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004684:	f7fe fab8 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
 8004688:	6378      	str	r0, [r7, #52]	@ 0x34
 800468a:	f000 bf19 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004690:	2b10      	cmp	r3, #16
 8004692:	d10d      	bne.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004694:	f7fe f994 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8004698:	6378      	str	r0, [r7, #52]	@ 0x34
 800469a:	f000 bf11 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800469e:	bf00      	nop
 80046a0:	46020c00 	.word	0x46020c00
 80046a4:	02dc6c00 	.word	0x02dc6c00
 80046a8:	08006c5c 	.word	0x08006c5c
 80046ac:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80046b0:	4ba6      	ldr	r3, [pc, #664]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046bc:	d106      	bne.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80046be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d103      	bne.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80046c4:	4ba2      	ldr	r3, [pc, #648]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80046c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80046c8:	f000 befa 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80046cc:	4b9f      	ldr	r3, [pc, #636]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80046ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d107      	bne.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80046da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046dc:	2b30      	cmp	r3, #48	@ 0x30
 80046de:	d104      	bne.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 80046e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80046e6:	f000 beeb 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80046ee:	f000 bee7 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80046f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046f6:	f1a2 0108 	sub.w	r1, r2, #8
 80046fa:	430b      	orrs	r3, r1
 80046fc:	d136      	bne.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80046fe:	4b93      	ldr	r3, [pc, #588]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004704:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004708:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800470a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470c:	2b00      	cmp	r3, #0
 800470e:	d104      	bne.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004710:	f7fe fa72 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
 8004714:	6378      	str	r0, [r7, #52]	@ 0x34
 8004716:	f000 bed3 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800471a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471c:	2b40      	cmp	r3, #64	@ 0x40
 800471e:	d104      	bne.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004720:	f7fe f94e 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8004724:	6378      	str	r0, [r7, #52]	@ 0x34
 8004726:	f000 becb 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800472a:	4b88      	ldr	r3, [pc, #544]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004736:	d106      	bne.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8004738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473a:	2b80      	cmp	r3, #128	@ 0x80
 800473c:	d103      	bne.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800473e:	4b84      	ldr	r3, [pc, #528]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004740:	637b      	str	r3, [r7, #52]	@ 0x34
 8004742:	f000 bebd 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004746:	4b81      	ldr	r3, [pc, #516]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b02      	cmp	r3, #2
 8004752:	d107      	bne.n	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8004754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004756:	2bc0      	cmp	r3, #192	@ 0xc0
 8004758:	d104      	bne.n	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800475a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800475e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004760:	f000 beae 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	637b      	str	r3, [r7, #52]	@ 0x34
 8004768:	f000 beaa 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800476c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004770:	f1a2 0110 	sub.w	r1, r2, #16
 8004774:	430b      	orrs	r3, r1
 8004776:	d139      	bne.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004778:	4b74      	ldr	r3, [pc, #464]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800477a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800477e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004782:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004786:	2b00      	cmp	r3, #0
 8004788:	d104      	bne.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800478a:	f7fe fa35 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
 800478e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004790:	f000 be96 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800479a:	d104      	bne.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800479c:	f7fe f910 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 80047a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80047a2:	f000 be8d 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80047a6:	4b69      	ldr	r3, [pc, #420]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b2:	d107      	bne.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80047b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047ba:	d103      	bne.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80047bc:	4b64      	ldr	r3, [pc, #400]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80047be:	637b      	str	r3, [r7, #52]	@ 0x34
 80047c0:	f000 be7e 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80047c4:	4b61      	ldr	r3, [pc, #388]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80047c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d108      	bne.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80047d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047d8:	d104      	bne.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 80047da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047de:	637b      	str	r3, [r7, #52]	@ 0x34
 80047e0:	f000 be6e 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80047e8:	f000 be6a 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80047ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047f0:	f1a2 0120 	sub.w	r1, r2, #32
 80047f4:	430b      	orrs	r3, r1
 80047f6:	d158      	bne.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80047f8:	4b54      	ldr	r3, [pc, #336]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80047fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004806:	2b00      	cmp	r3, #0
 8004808:	d104      	bne.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800480a:	f7fe fa1d 	bl	8002c48 <HAL_RCC_GetPCLK3Freq>
 800480e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004810:	f000 be56 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004816:	2b01      	cmp	r3, #1
 8004818:	d104      	bne.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800481a:	f7fe f8d1 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 800481e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004820:	f000 be4e 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004824:	4b49      	ldr	r3, [pc, #292]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800482c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004830:	d106      	bne.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	2b02      	cmp	r3, #2
 8004836:	d103      	bne.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8004838:	4b45      	ldr	r3, [pc, #276]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800483a:	637b      	str	r3, [r7, #52]	@ 0x34
 800483c:	f000 be40 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004840:	4b42      	ldr	r3, [pc, #264]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004842:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b02      	cmp	r3, #2
 800484c:	d107      	bne.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800484e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004850:	2b03      	cmp	r3, #3
 8004852:	d104      	bne.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8004854:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004858:	637b      	str	r3, [r7, #52]	@ 0x34
 800485a:	f000 be31 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800485e:	4b3b      	ldr	r3, [pc, #236]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b20      	cmp	r3, #32
 8004868:	d11b      	bne.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800486a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486c:	2b04      	cmp	r3, #4
 800486e:	d118      	bne.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004870:	4b36      	ldr	r3, [pc, #216]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800487c:	4b33      	ldr	r3, [pc, #204]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	0e1b      	lsrs	r3, r3, #24
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	e006      	b.n	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8004888:	4b30      	ldr	r3, [pc, #192]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800488a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800488e:	041b      	lsls	r3, r3, #16
 8004890:	0e1b      	lsrs	r3, r3, #24
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	4a2f      	ldr	r2, [pc, #188]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800489c:	637b      	str	r3, [r7, #52]	@ 0x34
 800489e:	f000 be0f 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80048a6:	f000 be0b 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80048aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048ae:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80048b2:	430b      	orrs	r3, r1
 80048b4:	d172      	bne.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80048b6:	4b25      	ldr	r3, [pc, #148]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80048b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80048bc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80048c0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80048c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048c8:	d104      	bne.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80048ca:	f7fe f879 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 80048ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80048d0:	f000 bdf6 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80048d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048da:	d108      	bne.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048dc:	f107 0318 	add.w	r3, r7, #24
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff f965 	bl	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80048ea:	f000 bde9 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80048ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d104      	bne.n	80048fe <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80048f4:	f7fe f966 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 80048f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80048fa:	f000 bde1 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004904:	d128      	bne.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004906:	4b11      	ldr	r3, [pc, #68]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b20      	cmp	r3, #32
 8004910:	d118      	bne.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004912:	4b0e      	ldr	r3, [pc, #56]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d005      	beq.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800491e:	4b0b      	ldr	r3, [pc, #44]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	0e1b      	lsrs	r3, r3, #24
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	e006      	b.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800492a:	4b08      	ldr	r3, [pc, #32]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800492c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004930:	041b      	lsls	r3, r3, #16
 8004932:	0e1b      	lsrs	r3, r3, #24
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	4a06      	ldr	r2, [pc, #24]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800493a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800493e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004940:	f000 bdbe 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	637b      	str	r3, [r7, #52]	@ 0x34
 8004948:	f000 bdba 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800494c:	46020c00 	.word	0x46020c00
 8004950:	00f42400 	.word	0x00f42400
 8004954:	08006c5c 	.word	0x08006c5c
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004958:	4baf      	ldr	r3, [pc, #700]	@ (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004960:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004964:	d107      	bne.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8004966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004968:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800496c:	d103      	bne.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 800496e:	4bab      	ldr	r3, [pc, #684]	@ (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8004970:	637b      	str	r3, [r7, #52]	@ 0x34
 8004972:	f000 bda5 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004976:	4ba8      	ldr	r3, [pc, #672]	@ (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800497e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004982:	d107      	bne.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8004984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004986:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800498a:	d103      	bne.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 800498c:	4ba3      	ldr	r3, [pc, #652]	@ (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800498e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004990:	f000 bd96 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	637b      	str	r3, [r7, #52]	@ 0x34
 8004998:	f000 bd92 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800499c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049a0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80049a4:	430b      	orrs	r3, r1
 80049a6:	d158      	bne.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80049a8:	4b9b      	ldr	r3, [pc, #620]	@ (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80049aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80049b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d84b      	bhi.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 80049ba:	a201      	add	r2, pc, #4	@ (adr r2, 80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80049bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c0:	080049f9 	.word	0x080049f9
 80049c4:	080049d5 	.word	0x080049d5
 80049c8:	080049e7 	.word	0x080049e7
 80049cc:	08004a03 	.word	0x08004a03
 80049d0:	08004a0d 	.word	0x08004a0d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80049d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fe ff8f 	bl	80038fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80049e2:	f000 bd6d 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049e6:	f107 030c 	add.w	r3, r7, #12
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff fa3a 	bl	8003e64 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80049f4:	f000 bd64 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80049f8:	f7fe f8e4 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 80049fc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80049fe:	f000 bd5f 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004a02:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004a06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a08:	f000 bd5a 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004a0c:	4b82      	ldr	r3, [pc, #520]	@ (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	d118      	bne.n	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004a18:	4b7f      	ldr	r3, [pc, #508]	@ (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8004a24:	4b7c      	ldr	r3, [pc, #496]	@ (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	0e1b      	lsrs	r3, r3, #24
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	e006      	b.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8004a30:	4b79      	ldr	r3, [pc, #484]	@ (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004a32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a36:	041b      	lsls	r3, r3, #16
 8004a38:	0e1b      	lsrs	r3, r3, #24
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	4a78      	ldr	r2, [pc, #480]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8004a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a44:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004a46:	f000 bd3b 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a4e:	f000 bd37 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a56:	f000 bd33 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a5e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8004a62:	430b      	orrs	r3, r1
 8004a64:	d167      	bne.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004a66:	4b6c      	ldr	r3, [pc, #432]	@ (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004a68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a6c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004a70:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a78:	d036      	beq.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a80:	d855      	bhi.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8004a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a88:	d029      	beq.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a90:	d84d      	bhi.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8004a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a98:	d013      	beq.n	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004aa0:	d845      	bhi.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d015      	beq.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aae:	d13e      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fe ff21 	bl	80038fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004abe:	f000 bcff 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ac2:	f107 030c 	add.w	r3, r7, #12
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff f9cc 	bl	8003e64 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ad0:	f000 bcf6 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004ad4:	f7fe f876 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8004ad8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004ada:	f000 bcf1 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004ade:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004ae2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ae4:	f000 bcec 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004ae8:	4b4b      	ldr	r3, [pc, #300]	@ (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d118      	bne.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004af4:	4b48      	ldr	r3, [pc, #288]	@ (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8004b00:	4b45      	ldr	r3, [pc, #276]	@ (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	0e1b      	lsrs	r3, r3, #24
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	e006      	b.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8004b0c:	4b42      	ldr	r3, [pc, #264]	@ (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004b0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b12:	041b      	lsls	r3, r3, #16
 8004b14:	0e1b      	lsrs	r3, r3, #24
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	4a41      	ldr	r2, [pc, #260]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8004b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b20:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004b22:	f000 bccd 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b2a:	f000 bcc9 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b32:	f000 bcc5 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004b36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b3a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	d14c      	bne.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004b42:	4b35      	ldr	r3, [pc, #212]	@ (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b48:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b4c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d104      	bne.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004b54:	f7fe f850 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
 8004b58:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b5a:	f000 bcb1 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b64:	d104      	bne.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004b66:	f7fd ff2b 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8004b6a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b6c:	f000 bca8 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004b70:	4b29      	ldr	r3, [pc, #164]	@ (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b7c:	d107      	bne.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b84:	d103      	bne.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8004b86:	4b25      	ldr	r3, [pc, #148]	@ (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8004b88:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b8a:	f000 bc99 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8004b8e:	4b22      	ldr	r3, [pc, #136]	@ (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	d11c      	bne.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ba0:	d118      	bne.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d005      	beq.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8004bae:	4b1a      	ldr	r3, [pc, #104]	@ (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	0e1b      	lsrs	r3, r3, #24
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	e006      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8004bba:	4b17      	ldr	r3, [pc, #92]	@ (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004bbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004bc0:	041b      	lsls	r3, r3, #16
 8004bc2:	0e1b      	lsrs	r3, r3, #24
 8004bc4:	f003 030f 	and.w	r3, r3, #15
 8004bc8:	4a15      	ldr	r2, [pc, #84]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8004bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bd0:	f000 bc76 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bd8:	f000 bc72 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004be0:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8004be4:	430b      	orrs	r3, r1
 8004be6:	d153      	bne.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004be8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004bf2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d104      	bne.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004bfa:	f7fd fffd 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
 8004bfe:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c00:	f000 bc5e 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c0a:	d10b      	bne.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004c0c:	f7fd fed8 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8004c10:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c12:	f000 bc55 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8004c16:	bf00      	nop
 8004c18:	46020c00 	.word	0x46020c00
 8004c1c:	00f42400 	.word	0x00f42400
 8004c20:	08006c5c 	.word	0x08006c5c
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004c24:	4ba1      	ldr	r3, [pc, #644]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c30:	d107      	bne.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 8004c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c38:	d103      	bne.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8004c3a:	4b9d      	ldr	r3, [pc, #628]	@ (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8004c3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c3e:	f000 bc3f 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004c42:	4b9a      	ldr	r3, [pc, #616]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0320 	and.w	r3, r3, #32
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	d11c      	bne.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c54:	d118      	bne.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c56:	4b95      	ldr	r3, [pc, #596]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d005      	beq.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8004c62:	4b92      	ldr	r3, [pc, #584]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	0e1b      	lsrs	r3, r3, #24
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	e006      	b.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8004c6e:	4b8f      	ldr	r3, [pc, #572]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004c70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c74:	041b      	lsls	r3, r3, #16
 8004c76:	0e1b      	lsrs	r3, r3, #24
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	4a8d      	ldr	r2, [pc, #564]	@ (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8004c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c84:	f000 bc1c 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c8c:	f000 bc18 	b.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c94:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	d151      	bne.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004c9c:	4b83      	ldr	r3, [pc, #524]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004c9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ca2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004ca6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004caa:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cac:	d024      	beq.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8004cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb0:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cb2:	d842      	bhi.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb6:	2b80      	cmp	r3, #128	@ 0x80
 8004cb8:	d00d      	beq.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8004cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbc:	2b80      	cmp	r3, #128	@ 0x80
 8004cbe:	d83c      	bhi.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc8:	2b40      	cmp	r3, #64	@ 0x40
 8004cca:	d011      	beq.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8004ccc:	e035      	b.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8004cce:	f7fd ffbb 	bl	8002c48 <HAL_RCC_GetPCLK3Freq>
 8004cd2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004cd4:	e3f4      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cd6:	4b75      	ldr	r3, [pc, #468]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ce2:	d102      	bne.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8004ce4:	4b72      	ldr	r3, [pc, #456]	@ (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8004ce6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004ce8:	e3ea      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cee:	e3e7      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004cf0:	f7fd fe66 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8004cf4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004cf6:	e3e3      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004cf8:	4b6c      	ldr	r3, [pc, #432]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0320 	and.w	r3, r3, #32
 8004d00:	2b20      	cmp	r3, #32
 8004d02:	d117      	bne.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d04:	4b69      	ldr	r3, [pc, #420]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8004d10:	4b66      	ldr	r3, [pc, #408]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	0e1b      	lsrs	r3, r3, #24
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	e006      	b.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8004d1c:	4b63      	ldr	r3, [pc, #396]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004d1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d22:	041b      	lsls	r3, r3, #16
 8004d24:	0e1b      	lsrs	r3, r3, #24
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	4a62      	ldr	r2, [pc, #392]	@ (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8004d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d30:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004d32:	e3c5      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d38:	e3c2      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d3e:	e3bf      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8004d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d44:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	d147      	bne.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004d4c:	4b57      	ldr	r3, [pc, #348]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d52:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004d56:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d103      	bne.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004d5e:	f7fd ff4b 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
 8004d62:	6378      	str	r0, [r7, #52]	@ 0x34
 8004d64:	e3ac      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d6c:	d103      	bne.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004d6e:	f7fd fe27 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8004d72:	6378      	str	r0, [r7, #52]	@ 0x34
 8004d74:	e3a4      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004d76:	4b4d      	ldr	r3, [pc, #308]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d82:	d106      	bne.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8004d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d8a:	d102      	bne.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8004d8c:	4b48      	ldr	r3, [pc, #288]	@ (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8004d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d90:	e396      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004d92:	4b46      	ldr	r3, [pc, #280]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	d11b      	bne.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004da4:	d117      	bne.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004da6:	4b41      	ldr	r3, [pc, #260]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8004db2:	4b3e      	ldr	r3, [pc, #248]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	0e1b      	lsrs	r3, r3, #24
 8004db8:	f003 030f 	and.w	r3, r3, #15
 8004dbc:	e006      	b.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8004dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004dc4:	041b      	lsls	r3, r3, #16
 8004dc6:	0e1b      	lsrs	r3, r3, #24
 8004dc8:	f003 030f 	and.w	r3, r3, #15
 8004dcc:	4a39      	ldr	r2, [pc, #228]	@ (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8004dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dd4:	e374      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dda:	e371      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8004ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004de0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8004de4:	430b      	orrs	r3, r1
 8004de6:	d16a      	bne.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8004de8:	4b30      	ldr	r3, [pc, #192]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004dea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8004df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d120      	bne.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004dfa:	4b2c      	ldr	r3, [pc, #176]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d117      	bne.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e06:	4b29      	ldr	r3, [pc, #164]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d005      	beq.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 8004e12:	4b26      	ldr	r3, [pc, #152]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	0e1b      	lsrs	r3, r3, #24
 8004e18:	f003 030f 	and.w	r3, r3, #15
 8004e1c:	e006      	b.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8004e1e:	4b23      	ldr	r3, [pc, #140]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e24:	041b      	lsls	r3, r3, #16
 8004e26:	0e1b      	lsrs	r3, r3, #24
 8004e28:	f003 030f 	and.w	r3, r3, #15
 8004e2c:	4a21      	ldr	r2, [pc, #132]	@ (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8004e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e32:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e34:	e344      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e3a:	e341      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004e3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e4a:	d112      	bne.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e52:	d10e      	bne.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004e54:	4b15      	ldr	r3, [pc, #84]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e62:	d102      	bne.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8004e64:	23fa      	movs	r3, #250	@ 0xfa
 8004e66:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004e68:	e32a      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8004e6a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004e6e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004e70:	e326      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8004e72:	4b0e      	ldr	r3, [pc, #56]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7e:	d106      	bne.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8004e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e86:	d102      	bne.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8004e88:	4b09      	ldr	r3, [pc, #36]	@ (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8004e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e8c:	e318      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8004e8e:	4b07      	ldr	r3, [pc, #28]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d10d      	bne.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ea2:	d109      	bne.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8004ea4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eaa:	e309      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8004eac:	46020c00 	.word	0x46020c00
 8004eb0:	00f42400 	.word	0x00f42400
 8004eb4:	08006c5c 	.word	0x08006c5c
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ebc:	e300      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8004ebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ec2:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8004ec6:	430b      	orrs	r3, r1
 8004ec8:	d164      	bne.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004eca:	4ba2      	ldr	r3, [pc, #648]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ed0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ed4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d120      	bne.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004edc:	4b9d      	ldr	r3, [pc, #628]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0320 	and.w	r3, r3, #32
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d117      	bne.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ee8:	4b9a      	ldr	r3, [pc, #616]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8004ef4:	4b97      	ldr	r3, [pc, #604]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	0e1b      	lsrs	r3, r3, #24
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	e006      	b.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8004f00:	4b94      	ldr	r3, [pc, #592]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004f02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f06:	041b      	lsls	r3, r3, #16
 8004f08:	0e1b      	lsrs	r3, r3, #24
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	4a92      	ldr	r2, [pc, #584]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8004f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f14:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f16:	e2d3      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f1c:	e2d0      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004f1e:	4b8d      	ldr	r3, [pc, #564]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f2c:	d112      	bne.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f34:	d10e      	bne.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004f36:	4b87      	ldr	r3, [pc, #540]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004f38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f44:	d102      	bne.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 8004f46:	23fa      	movs	r3, #250	@ 0xfa
 8004f48:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004f4a:	e2b9      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8004f4c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004f50:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004f52:	e2b5      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004f54:	4b7f      	ldr	r3, [pc, #508]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f60:	d106      	bne.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8004f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f68:	d102      	bne.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8004f6a:	4b7c      	ldr	r3, [pc, #496]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8004f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f6e:	e2a7      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004f70:	4b78      	ldr	r3, [pc, #480]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004f72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d107      	bne.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f84:	d103      	bne.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8004f86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f8c:	e298      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f92:	e295      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8004f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f98:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	d147      	bne.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004fa0:	4b6c      	ldr	r3, [pc, #432]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fa6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004faa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8004fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d103      	bne.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004fb2:	f7fd fe21 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
 8004fb6:	6378      	str	r0, [r7, #52]	@ 0x34
 8004fb8:	e282      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004fba:	4b66      	ldr	r3, [pc, #408]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fc8:	d112      	bne.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8004fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fcc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fd0:	d10e      	bne.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004fd2:	4b60      	ldr	r3, [pc, #384]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fe0:	d102      	bne.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8004fe2:	23fa      	movs	r3, #250	@ 0xfa
 8004fe4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004fe6:	e26b      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8004fe8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004fec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004fee:	e267      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8004ff0:	4b58      	ldr	r3, [pc, #352]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ffc:	d106      	bne.n	800500c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005000:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005004:	d102      	bne.n	800500c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8005006:	4b55      	ldr	r3, [pc, #340]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8005008:	637b      	str	r3, [r7, #52]	@ 0x34
 800500a:	e259      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800500c:	4b51      	ldr	r3, [pc, #324]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800500e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b02      	cmp	r3, #2
 8005018:	d107      	bne.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 800501a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005020:	d103      	bne.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8005022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005026:	637b      	str	r3, [r7, #52]	@ 0x34
 8005028:	e24a      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	637b      	str	r3, [r7, #52]	@ 0x34
 800502e:	e247      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005034:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8005038:	430b      	orrs	r3, r1
 800503a:	d12d      	bne.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800503c:	4b45      	ldr	r3, [pc, #276]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800503e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005042:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005046:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005048:	4b42      	ldr	r3, [pc, #264]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005050:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005054:	d105      	bne.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8005056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005058:	2b00      	cmp	r3, #0
 800505a:	d102      	bne.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 800505c:	4b3f      	ldr	r3, [pc, #252]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800505e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005060:	e22e      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8005062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005064:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005068:	d107      	bne.n	800507a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800506a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800506e:	4618      	mov	r0, r3
 8005070:	f7fe fc44 	bl	80038fc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005076:	637b      	str	r3, [r7, #52]	@ 0x34
 8005078:	e222      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800507a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005080:	d107      	bne.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005082:	f107 0318 	add.w	r3, r7, #24
 8005086:	4618      	mov	r0, r3
 8005088:	f7fe fd92 	bl	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005090:	e216      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	637b      	str	r3, [r7, #52]	@ 0x34
 8005096:	e213      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800509c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80050a0:	430b      	orrs	r3, r1
 80050a2:	d15d      	bne.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80050a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80050a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050aa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80050ae:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80050b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80050b6:	d028      	beq.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80050be:	d845      	bhi.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80050c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050c6:	d013      	beq.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80050c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050ce:	d83d      	bhi.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80050d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d004      	beq.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 80050d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050dc:	d004      	beq.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80050de:	e035      	b.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80050e0:	f7fd fd9e 	bl	8002c20 <HAL_RCC_GetPCLK2Freq>
 80050e4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80050e6:	e1eb      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80050e8:	f7fd fc6a 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 80050ec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80050ee:	e1e7      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050f0:	4b18      	ldr	r3, [pc, #96]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050fc:	d102      	bne.n	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80050fe:	4b17      	ldr	r3, [pc, #92]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8005100:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005102:	e1dd      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005108:	e1da      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800510a:	4b12      	ldr	r3, [pc, #72]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b20      	cmp	r3, #32
 8005114:	d117      	bne.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005116:	4b0f      	ldr	r3, [pc, #60]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d005      	beq.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8005122:	4b0c      	ldr	r3, [pc, #48]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	0e1b      	lsrs	r3, r3, #24
 8005128:	f003 030f 	and.w	r3, r3, #15
 800512c:	e006      	b.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 800512e:	4b09      	ldr	r3, [pc, #36]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005130:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005134:	041b      	lsls	r3, r3, #16
 8005136:	0e1b      	lsrs	r3, r3, #24
 8005138:	f003 030f 	and.w	r3, r3, #15
 800513c:	4a06      	ldr	r2, [pc, #24]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800513e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005142:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005144:	e1bc      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800514a:	e1b9      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005150:	e1b6      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8005152:	bf00      	nop
 8005154:	46020c00 	.word	0x46020c00
 8005158:	08006c5c 	.word	0x08006c5c
 800515c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005164:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8005168:	430b      	orrs	r3, r1
 800516a:	d156      	bne.n	800521a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800516c:	4ba5      	ldr	r3, [pc, #660]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800516e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005172:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005176:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800517e:	d028      	beq.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8005180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005182:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005186:	d845      	bhi.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8005188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800518e:	d013      	beq.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8005190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005192:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005196:	d83d      	bhi.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8005198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519a:	2b00      	cmp	r3, #0
 800519c:	d004      	beq.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 800519e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a4:	d004      	beq.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 80051a6:	e035      	b.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80051a8:	f7fd fd26 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
 80051ac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80051ae:	e187      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80051b0:	f7fd fc06 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 80051b4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80051b6:	e183      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051b8:	4b92      	ldr	r3, [pc, #584]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051c4:	d102      	bne.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 80051c6:	4b90      	ldr	r3, [pc, #576]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 80051c8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80051ca:	e179      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80051d0:	e176      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80051d2:	4b8c      	ldr	r3, [pc, #560]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b20      	cmp	r3, #32
 80051dc:	d117      	bne.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80051de:	4b89      	ldr	r3, [pc, #548]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d005      	beq.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 80051ea:	4b86      	ldr	r3, [pc, #536]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	0e1b      	lsrs	r3, r3, #24
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	e006      	b.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 80051f6:	4b83      	ldr	r3, [pc, #524]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80051f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80051fc:	041b      	lsls	r3, r3, #16
 80051fe:	0e1b      	lsrs	r3, r3, #24
 8005200:	f003 030f 	and.w	r3, r3, #15
 8005204:	4a81      	ldr	r2, [pc, #516]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8005206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800520c:	e158      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005212:	e155      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005218:	e152      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800521a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800521e:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8005222:	430b      	orrs	r3, r1
 8005224:	d177      	bne.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005226:	4b77      	ldr	r3, [pc, #476]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005228:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800522c:	f003 0318 	and.w	r3, r3, #24
 8005230:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005234:	2b18      	cmp	r3, #24
 8005236:	d86b      	bhi.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8005238:	a201      	add	r2, pc, #4	@ (adr r2, 8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 800523a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523e:	bf00      	nop
 8005240:	080052a5 	.word	0x080052a5
 8005244:	08005311 	.word	0x08005311
 8005248:	08005311 	.word	0x08005311
 800524c:	08005311 	.word	0x08005311
 8005250:	08005311 	.word	0x08005311
 8005254:	08005311 	.word	0x08005311
 8005258:	08005311 	.word	0x08005311
 800525c:	08005311 	.word	0x08005311
 8005260:	080052ad 	.word	0x080052ad
 8005264:	08005311 	.word	0x08005311
 8005268:	08005311 	.word	0x08005311
 800526c:	08005311 	.word	0x08005311
 8005270:	08005311 	.word	0x08005311
 8005274:	08005311 	.word	0x08005311
 8005278:	08005311 	.word	0x08005311
 800527c:	08005311 	.word	0x08005311
 8005280:	080052b5 	.word	0x080052b5
 8005284:	08005311 	.word	0x08005311
 8005288:	08005311 	.word	0x08005311
 800528c:	08005311 	.word	0x08005311
 8005290:	08005311 	.word	0x08005311
 8005294:	08005311 	.word	0x08005311
 8005298:	08005311 	.word	0x08005311
 800529c:	08005311 	.word	0x08005311
 80052a0:	080052cf 	.word	0x080052cf
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80052a4:	f7fd fcd0 	bl	8002c48 <HAL_RCC_GetPCLK3Freq>
 80052a8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80052aa:	e109      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80052ac:	f7fd fb88 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 80052b0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80052b2:	e105      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052b4:	4b53      	ldr	r3, [pc, #332]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052c0:	d102      	bne.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 80052c2:	4b51      	ldr	r3, [pc, #324]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 80052c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80052c6:	e0fb      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052cc:	e0f8      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80052ce:	4b4d      	ldr	r3, [pc, #308]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d117      	bne.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80052da:	4b4a      	ldr	r3, [pc, #296]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d005      	beq.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 80052e6:	4b47      	ldr	r3, [pc, #284]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	0e1b      	lsrs	r3, r3, #24
 80052ec:	f003 030f 	and.w	r3, r3, #15
 80052f0:	e006      	b.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 80052f2:	4b44      	ldr	r3, [pc, #272]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80052f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052f8:	041b      	lsls	r3, r3, #16
 80052fa:	0e1b      	lsrs	r3, r3, #24
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	4a42      	ldr	r2, [pc, #264]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8005302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005306:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005308:	e0da      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800530e:	e0d7      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005314:	e0d4      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005316:	e9d7 2300 	ldrd	r2, r3, [r7]
 800531a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800531e:	430b      	orrs	r3, r1
 8005320:	d155      	bne.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005322:	4b38      	ldr	r3, [pc, #224]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005324:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005328:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800532c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800532e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005330:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005334:	d013      	beq.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8005336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005338:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800533c:	d844      	bhi.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 800533e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005340:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005344:	d013      	beq.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8005346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005348:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800534c:	d83c      	bhi.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 800534e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005350:	2b00      	cmp	r3, #0
 8005352:	d014      	beq.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005356:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800535a:	d014      	beq.n	8005386 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 800535c:	e034      	b.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800535e:	f107 0318 	add.w	r3, r7, #24
 8005362:	4618      	mov	r0, r3
 8005364:	f7fe fc24 	bl	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800536c:	e0a8      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800536e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005372:	4618      	mov	r0, r3
 8005374:	f7fe fac2 	bl	80038fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800537c:	e0a0      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800537e:	f7fd fb1f 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8005382:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005384:	e09c      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005386:	4b1f      	ldr	r3, [pc, #124]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0320 	and.w	r3, r3, #32
 800538e:	2b20      	cmp	r3, #32
 8005390:	d117      	bne.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005392:	4b1c      	ldr	r3, [pc, #112]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d005      	beq.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 800539e:	4b19      	ldr	r3, [pc, #100]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	0e1b      	lsrs	r3, r3, #24
 80053a4:	f003 030f 	and.w	r3, r3, #15
 80053a8:	e006      	b.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 80053aa:	4b16      	ldr	r3, [pc, #88]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80053ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053b0:	041b      	lsls	r3, r3, #16
 80053b2:	0e1b      	lsrs	r3, r3, #24
 80053b4:	f003 030f 	and.w	r3, r3, #15
 80053b8:	4a14      	ldr	r2, [pc, #80]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80053ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053be:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80053c0:	e07e      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053c6:	e07b      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053cc:	e078      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80053ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053d2:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80053d6:	430b      	orrs	r3, r1
 80053d8:	d138      	bne.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80053da:	4b0a      	ldr	r3, [pc, #40]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80053dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053e4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80053e6:	4b07      	ldr	r3, [pc, #28]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80053e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d10d      	bne.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 80053f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10a      	bne.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 80053fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005400:	e05e      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8005402:	bf00      	nop
 8005404:	46020c00 	.word	0x46020c00
 8005408:	00f42400 	.word	0x00f42400
 800540c:	08006c5c 	.word	0x08006c5c
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005410:	4b2e      	ldr	r3, [pc, #184]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005412:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005416:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800541a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800541e:	d112      	bne.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8005420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005422:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005426:	d10e      	bne.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005428:	4b28      	ldr	r3, [pc, #160]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800542a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800542e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005432:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005436:	d102      	bne.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8005438:	23fa      	movs	r3, #250	@ 0xfa
 800543a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800543c:	e040      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800543e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005442:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005444:	e03c      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	637b      	str	r3, [r7, #52]	@ 0x34
 800544a:	e039      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800544c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005450:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005454:	430b      	orrs	r3, r1
 8005456:	d131      	bne.n	80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005458:	4b1c      	ldr	r3, [pc, #112]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800545a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800545e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005462:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005464:	4b19      	ldr	r3, [pc, #100]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800546c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005470:	d105      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8005472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005474:	2b00      	cmp	r3, #0
 8005476:	d102      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8005478:	4b15      	ldr	r3, [pc, #84]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 800547a:	637b      	str	r3, [r7, #52]	@ 0x34
 800547c:	e020      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800547e:	4b13      	ldr	r3, [pc, #76]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800548a:	d106      	bne.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 800548c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005492:	d102      	bne.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005494:	4b0f      	ldr	r3, [pc, #60]	@ (80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8005496:	637b      	str	r3, [r7, #52]	@ 0x34
 8005498:	e012      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800549a:	4b0c      	ldr	r3, [pc, #48]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054a6:	d106      	bne.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 80054a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054ae:	d102      	bne.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 80054b0:	4b09      	ldr	r3, [pc, #36]	@ (80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 80054b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80054b4:	e004      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80054ba:	e001      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80054bc:	2300      	movs	r3, #0
 80054be:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80054c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3738      	adds	r7, #56	@ 0x38
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	46020c00 	.word	0x46020c00
 80054d0:	02dc6c00 	.word	0x02dc6c00
 80054d4:	016e3600 	.word	0x016e3600
 80054d8:	00f42400 	.word	0x00f42400

080054dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80054e4:	4b47      	ldr	r3, [pc, #284]	@ (8005604 <RCCEx_PLL2_Config+0x128>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a46      	ldr	r2, [pc, #280]	@ (8005604 <RCCEx_PLL2_Config+0x128>)
 80054ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80054ee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054f0:	f7fb fd84 	bl	8000ffc <HAL_GetTick>
 80054f4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054f6:	e008      	b.n	800550a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80054f8:	f7fb fd80 	bl	8000ffc <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e077      	b.n	80055fa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800550a:	4b3e      	ldr	r3, [pc, #248]	@ (8005604 <RCCEx_PLL2_Config+0x128>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1f0      	bne.n	80054f8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005516:	4b3b      	ldr	r3, [pc, #236]	@ (8005604 <RCCEx_PLL2_Config+0x128>)
 8005518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800551e:	f023 0303 	bic.w	r3, r3, #3
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6811      	ldr	r1, [r2, #0]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6852      	ldr	r2, [r2, #4]
 800552a:	3a01      	subs	r2, #1
 800552c:	0212      	lsls	r2, r2, #8
 800552e:	430a      	orrs	r2, r1
 8005530:	4934      	ldr	r1, [pc, #208]	@ (8005604 <RCCEx_PLL2_Config+0x128>)
 8005532:	4313      	orrs	r3, r2
 8005534:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005536:	4b33      	ldr	r3, [pc, #204]	@ (8005604 <RCCEx_PLL2_Config+0x128>)
 8005538:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800553a:	4b33      	ldr	r3, [pc, #204]	@ (8005608 <RCCEx_PLL2_Config+0x12c>)
 800553c:	4013      	ands	r3, r2
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6892      	ldr	r2, [r2, #8]
 8005542:	3a01      	subs	r2, #1
 8005544:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	68d2      	ldr	r2, [r2, #12]
 800554c:	3a01      	subs	r2, #1
 800554e:	0252      	lsls	r2, r2, #9
 8005550:	b292      	uxth	r2, r2
 8005552:	4311      	orrs	r1, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6912      	ldr	r2, [r2, #16]
 8005558:	3a01      	subs	r2, #1
 800555a:	0412      	lsls	r2, r2, #16
 800555c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005560:	4311      	orrs	r1, r2
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6952      	ldr	r2, [r2, #20]
 8005566:	3a01      	subs	r2, #1
 8005568:	0612      	lsls	r2, r2, #24
 800556a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800556e:	430a      	orrs	r2, r1
 8005570:	4924      	ldr	r1, [pc, #144]	@ (8005604 <RCCEx_PLL2_Config+0x128>)
 8005572:	4313      	orrs	r3, r2
 8005574:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005576:	4b23      	ldr	r3, [pc, #140]	@ (8005604 <RCCEx_PLL2_Config+0x128>)
 8005578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557a:	f023 020c 	bic.w	r2, r3, #12
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	4920      	ldr	r1, [pc, #128]	@ (8005604 <RCCEx_PLL2_Config+0x128>)
 8005584:	4313      	orrs	r3, r2
 8005586:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005588:	4b1e      	ldr	r3, [pc, #120]	@ (8005604 <RCCEx_PLL2_Config+0x128>)
 800558a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	491c      	ldr	r1, [pc, #112]	@ (8005604 <RCCEx_PLL2_Config+0x128>)
 8005592:	4313      	orrs	r3, r2
 8005594:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005596:	4b1b      	ldr	r3, [pc, #108]	@ (8005604 <RCCEx_PLL2_Config+0x128>)
 8005598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559a:	4a1a      	ldr	r2, [pc, #104]	@ (8005604 <RCCEx_PLL2_Config+0x128>)
 800559c:	f023 0310 	bic.w	r3, r3, #16
 80055a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80055a2:	4b18      	ldr	r3, [pc, #96]	@ (8005604 <RCCEx_PLL2_Config+0x128>)
 80055a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055aa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	69d2      	ldr	r2, [r2, #28]
 80055b2:	00d2      	lsls	r2, r2, #3
 80055b4:	4913      	ldr	r1, [pc, #76]	@ (8005604 <RCCEx_PLL2_Config+0x128>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80055ba:	4b12      	ldr	r3, [pc, #72]	@ (8005604 <RCCEx_PLL2_Config+0x128>)
 80055bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055be:	4a11      	ldr	r2, [pc, #68]	@ (8005604 <RCCEx_PLL2_Config+0x128>)
 80055c0:	f043 0310 	orr.w	r3, r3, #16
 80055c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80055c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005604 <RCCEx_PLL2_Config+0x128>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005604 <RCCEx_PLL2_Config+0x128>)
 80055cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055d0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055d2:	f7fb fd13 	bl	8000ffc <HAL_GetTick>
 80055d6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055d8:	e008      	b.n	80055ec <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80055da:	f7fb fd0f 	bl	8000ffc <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d901      	bls.n	80055ec <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e006      	b.n	80055fa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055ec:	4b05      	ldr	r3, [pc, #20]	@ (8005604 <RCCEx_PLL2_Config+0x128>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0f0      	beq.n	80055da <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0

}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	46020c00 	.word	0x46020c00
 8005608:	80800000 	.word	0x80800000

0800560c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005614:	4b47      	ldr	r3, [pc, #284]	@ (8005734 <RCCEx_PLL3_Config+0x128>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a46      	ldr	r2, [pc, #280]	@ (8005734 <RCCEx_PLL3_Config+0x128>)
 800561a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800561e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005620:	f7fb fcec 	bl	8000ffc <HAL_GetTick>
 8005624:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005626:	e008      	b.n	800563a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005628:	f7fb fce8 	bl	8000ffc <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d901      	bls.n	800563a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e077      	b.n	800572a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800563a:	4b3e      	ldr	r3, [pc, #248]	@ (8005734 <RCCEx_PLL3_Config+0x128>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f0      	bne.n	8005628 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005646:	4b3b      	ldr	r3, [pc, #236]	@ (8005734 <RCCEx_PLL3_Config+0x128>)
 8005648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800564e:	f023 0303 	bic.w	r3, r3, #3
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6811      	ldr	r1, [r2, #0]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6852      	ldr	r2, [r2, #4]
 800565a:	3a01      	subs	r2, #1
 800565c:	0212      	lsls	r2, r2, #8
 800565e:	430a      	orrs	r2, r1
 8005660:	4934      	ldr	r1, [pc, #208]	@ (8005734 <RCCEx_PLL3_Config+0x128>)
 8005662:	4313      	orrs	r3, r2
 8005664:	630b      	str	r3, [r1, #48]	@ 0x30
 8005666:	4b33      	ldr	r3, [pc, #204]	@ (8005734 <RCCEx_PLL3_Config+0x128>)
 8005668:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800566a:	4b33      	ldr	r3, [pc, #204]	@ (8005738 <RCCEx_PLL3_Config+0x12c>)
 800566c:	4013      	ands	r3, r2
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	6892      	ldr	r2, [r2, #8]
 8005672:	3a01      	subs	r2, #1
 8005674:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	68d2      	ldr	r2, [r2, #12]
 800567c:	3a01      	subs	r2, #1
 800567e:	0252      	lsls	r2, r2, #9
 8005680:	b292      	uxth	r2, r2
 8005682:	4311      	orrs	r1, r2
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6912      	ldr	r2, [r2, #16]
 8005688:	3a01      	subs	r2, #1
 800568a:	0412      	lsls	r2, r2, #16
 800568c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005690:	4311      	orrs	r1, r2
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6952      	ldr	r2, [r2, #20]
 8005696:	3a01      	subs	r2, #1
 8005698:	0612      	lsls	r2, r2, #24
 800569a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800569e:	430a      	orrs	r2, r1
 80056a0:	4924      	ldr	r1, [pc, #144]	@ (8005734 <RCCEx_PLL3_Config+0x128>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80056a6:	4b23      	ldr	r3, [pc, #140]	@ (8005734 <RCCEx_PLL3_Config+0x128>)
 80056a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056aa:	f023 020c 	bic.w	r2, r3, #12
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	4920      	ldr	r1, [pc, #128]	@ (8005734 <RCCEx_PLL3_Config+0x128>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80056b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005734 <RCCEx_PLL3_Config+0x128>)
 80056ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	491c      	ldr	r1, [pc, #112]	@ (8005734 <RCCEx_PLL3_Config+0x128>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80056c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005734 <RCCEx_PLL3_Config+0x128>)
 80056c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005734 <RCCEx_PLL3_Config+0x128>)
 80056cc:	f023 0310 	bic.w	r3, r3, #16
 80056d0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80056d2:	4b18      	ldr	r3, [pc, #96]	@ (8005734 <RCCEx_PLL3_Config+0x128>)
 80056d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056da:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	69d2      	ldr	r2, [r2, #28]
 80056e2:	00d2      	lsls	r2, r2, #3
 80056e4:	4913      	ldr	r1, [pc, #76]	@ (8005734 <RCCEx_PLL3_Config+0x128>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80056ea:	4b12      	ldr	r3, [pc, #72]	@ (8005734 <RCCEx_PLL3_Config+0x128>)
 80056ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ee:	4a11      	ldr	r2, [pc, #68]	@ (8005734 <RCCEx_PLL3_Config+0x128>)
 80056f0:	f043 0310 	orr.w	r3, r3, #16
 80056f4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80056f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005734 <RCCEx_PLL3_Config+0x128>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a0e      	ldr	r2, [pc, #56]	@ (8005734 <RCCEx_PLL3_Config+0x128>)
 80056fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005700:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005702:	f7fb fc7b 	bl	8000ffc <HAL_GetTick>
 8005706:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005708:	e008      	b.n	800571c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800570a:	f7fb fc77 	bl	8000ffc <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d901      	bls.n	800571c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e006      	b.n	800572a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800571c:	4b05      	ldr	r3, [pc, #20]	@ (8005734 <RCCEx_PLL3_Config+0x128>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d0f0      	beq.n	800570a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	46020c00 	.word	0x46020c00
 8005738:	80800000 	.word	0x80800000

0800573c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e0fb      	b.n	8005946 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a7f      	ldr	r2, [pc, #508]	@ (8005950 <HAL_SPI_Init+0x214>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d004      	beq.n	8005762 <HAL_SPI_Init+0x26>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a7d      	ldr	r2, [pc, #500]	@ (8005954 <HAL_SPI_Init+0x218>)
 800575e:	4293      	cmp	r3, r2
 8005760:	e000      	b.n	8005764 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8005762:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a78      	ldr	r2, [pc, #480]	@ (8005950 <HAL_SPI_Init+0x214>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d004      	beq.n	800577e <HAL_SPI_Init+0x42>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a76      	ldr	r2, [pc, #472]	@ (8005954 <HAL_SPI_Init+0x218>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d105      	bne.n	800578a <HAL_SPI_Init+0x4e>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	2b0f      	cmp	r3, #15
 8005784:	d901      	bls.n	800578a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e0dd      	b.n	8005946 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fc14 	bl	8005fb8 <SPI_GetPacketSize>
 8005790:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a6e      	ldr	r2, [pc, #440]	@ (8005950 <HAL_SPI_Init+0x214>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d004      	beq.n	80057a6 <HAL_SPI_Init+0x6a>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a6c      	ldr	r2, [pc, #432]	@ (8005954 <HAL_SPI_Init+0x218>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d102      	bne.n	80057ac <HAL_SPI_Init+0x70>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d816      	bhi.n	80057da <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80057b0:	4a69      	ldr	r2, [pc, #420]	@ (8005958 <HAL_SPI_Init+0x21c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00e      	beq.n	80057d4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a68      	ldr	r2, [pc, #416]	@ (800595c <HAL_SPI_Init+0x220>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d009      	beq.n	80057d4 <HAL_SPI_Init+0x98>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a66      	ldr	r2, [pc, #408]	@ (8005960 <HAL_SPI_Init+0x224>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d004      	beq.n	80057d4 <HAL_SPI_Init+0x98>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a65      	ldr	r2, [pc, #404]	@ (8005964 <HAL_SPI_Init+0x228>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d104      	bne.n	80057de <HAL_SPI_Init+0xa2>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b10      	cmp	r3, #16
 80057d8:	d901      	bls.n	80057de <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e0b3      	b.n	8005946 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fb f9e4 	bl	8000bc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0201 	bic.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800581a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005824:	d119      	bne.n	800585a <HAL_SPI_Init+0x11e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800582e:	d103      	bne.n	8005838 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005834:	2b00      	cmp	r3, #0
 8005836:	d008      	beq.n	800584a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10c      	bne.n	800585a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005844:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005848:	d107      	bne.n	800585a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005858:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00f      	beq.n	8005886 <HAL_SPI_Init+0x14a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	2b06      	cmp	r3, #6
 800586c:	d90b      	bls.n	8005886 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	e007      	b.n	8005896 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005894:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69da      	ldr	r2, [r3, #28]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589e:	431a      	orrs	r2, r3
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a8:	ea42 0103 	orr.w	r1, r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	431a      	orrs	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	431a      	orrs	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058f6:	431a      	orrs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005902:	ea42 0103 	orr.w	r1, r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	46002000 	.word	0x46002000
 8005954:	56002000 	.word	0x56002000
 8005958:	40013000 	.word	0x40013000
 800595c:	50013000 	.word	0x50013000
 8005960:	40003800 	.word	0x40003800
 8005964:	50003800 	.word	0x50003800

08005968 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08c      	sub	sp, #48	@ 0x30
 800596c:	af02      	add	r7, sp, #8
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3320      	adds	r3, #32
 800597c:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3330      	adds	r3, #48	@ 0x30
 8005984:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005986:	f7fb fb39 	bl	8000ffc <HAL_GetTick>
 800598a:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 800598c:	887b      	ldrh	r3, [r7, #2]
 800598e:	847b      	strh	r3, [r7, #34]	@ 0x22
  initial_RxXferCount = Size;
 8005990:	887b      	ldrh	r3, [r7, #2]
 8005992:	843b      	strh	r3, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b01      	cmp	r3, #1
 800599e:	d001      	beq.n	80059a4 <HAL_SPI_TransmitReceive+0x3c>
  {
    return HAL_BUSY;
 80059a0:	2302      	movs	r3, #2
 80059a2:	e237      	b.n	8005e14 <HAL_SPI_TransmitReceive+0x4ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d005      	beq.n	80059b6 <HAL_SPI_TransmitReceive+0x4e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <HAL_SPI_TransmitReceive+0x4e>
 80059b0:	887b      	ldrh	r3, [r7, #2]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_SPI_TransmitReceive+0x52>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e22c      	b.n	8005e14 <HAL_SPI_TransmitReceive+0x4ac>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d101      	bne.n	80059c8 <HAL_SPI_TransmitReceive+0x60>
 80059c4:	2302      	movs	r3, #2
 80059c6:	e225      	b.n	8005e14 <HAL_SPI_TransmitReceive+0x4ac>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2205      	movs	r2, #5
 80059d4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	887a      	ldrh	r2, [r7, #2]
 80059ea:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	887a      	ldrh	r2, [r7, #2]
 80059f2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	887a      	ldrh	r2, [r7, #2]
 8005a00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	887a      	ldrh	r2, [r7, #2]
 8005a08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8005a26:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a6c      	ldr	r2, [pc, #432]	@ (8005be0 <HAL_SPI_TransmitReceive+0x278>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00e      	beq.n	8005a50 <HAL_SPI_TransmitReceive+0xe8>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a6b      	ldr	r2, [pc, #428]	@ (8005be4 <HAL_SPI_TransmitReceive+0x27c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d009      	beq.n	8005a50 <HAL_SPI_TransmitReceive+0xe8>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a69      	ldr	r2, [pc, #420]	@ (8005be8 <HAL_SPI_TransmitReceive+0x280>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d004      	beq.n	8005a50 <HAL_SPI_TransmitReceive+0xe8>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a68      	ldr	r2, [pc, #416]	@ (8005bec <HAL_SPI_TransmitReceive+0x284>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d102      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0xee>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8005a50:	2310      	movs	r3, #16
 8005a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a54:	e001      	b.n	8005a5a <HAL_SPI_TransmitReceive+0xf2>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8005a56:	2308      	movs	r3, #8
 8005a58:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	0c1b      	lsrs	r3, r3, #16
 8005a62:	041b      	lsls	r3, r3, #16
 8005a64:	8879      	ldrh	r1, [r7, #2]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	6812      	ldr	r2, [r2, #0]
 8005a6a:	430b      	orrs	r3, r1
 8005a6c:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f042 0201 	orr.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10c      	bne.n	8005aa6 <HAL_SPI_TransmitReceive+0x13e>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a94:	d107      	bne.n	8005aa6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005aa4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	2b0f      	cmp	r3, #15
 8005aac:	f240 808e 	bls.w	8005bcc <HAL_SPI_TransmitReceive+0x264>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a4a      	ldr	r2, [pc, #296]	@ (8005be0 <HAL_SPI_TransmitReceive+0x278>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00e      	beq.n	8005ad8 <HAL_SPI_TransmitReceive+0x170>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a49      	ldr	r2, [pc, #292]	@ (8005be4 <HAL_SPI_TransmitReceive+0x27c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d009      	beq.n	8005ad8 <HAL_SPI_TransmitReceive+0x170>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a47      	ldr	r2, [pc, #284]	@ (8005be8 <HAL_SPI_TransmitReceive+0x280>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d004      	beq.n	8005ad8 <HAL_SPI_TransmitReceive+0x170>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a46      	ldr	r2, [pc, #280]	@ (8005bec <HAL_SPI_TransmitReceive+0x284>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d179      	bne.n	8005bcc <HAL_SPI_TransmitReceive+0x264>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ada:	089b      	lsrs	r3, r3, #2
 8005adc:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005ade:	e06e      	b.n	8005bbe <HAL_SPI_TransmitReceive+0x256>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d120      	bne.n	8005b30 <HAL_SPI_TransmitReceive+0x1c8>
 8005aee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d01d      	beq.n	8005b30 <HAL_SPI_TransmitReceive+0x1c8>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005af4:	8c3a      	ldrh	r2, [r7, #32]
 8005af6:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8005af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d217      	bcs.n	8005b30 <HAL_SPI_TransmitReceive+0x1c8>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6812      	ldr	r2, [r2, #0]
 8005b0a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b10:	1d1a      	adds	r2, r3, #4
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b2e:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	695a      	ldr	r2, [r3, #20]
 8005b36:	f248 0308 	movw	r3, #32776	@ 0x8008
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01a      	beq.n	8005b76 <HAL_SPI_TransmitReceive+0x20e>
 8005b40:	8c3b      	ldrh	r3, [r7, #32]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d017      	beq.n	8005b76 <HAL_SPI_TransmitReceive+0x20e>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b4e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005b50:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b56:	1d1a      	adds	r2, r3, #4
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount --;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005b74:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b76:	f7fb fa41 	bl	8000ffc <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d803      	bhi.n	8005b8e <HAL_SPI_TransmitReceive+0x226>
 8005b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b8c:	d102      	bne.n	8005b94 <HAL_SPI_TransmitReceive+0x22c>
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d114      	bne.n	8005bbe <HAL_SPI_TransmitReceive+0x256>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 f941 	bl	8005e1c <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ba0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e12a      	b.n	8005e14 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005bbe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d18d      	bne.n	8005ae0 <HAL_SPI_TransmitReceive+0x178>
 8005bc4:	8c3b      	ldrh	r3, [r7, #32]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d18a      	bne.n	8005ae0 <HAL_SPI_TransmitReceive+0x178>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005bca:	e0fd      	b.n	8005dc8 <HAL_SPI_TransmitReceive+0x460>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	2b07      	cmp	r3, #7
 8005bd2:	f240 80f3 	bls.w	8005dbc <HAL_SPI_TransmitReceive+0x454>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	085b      	lsrs	r3, r3, #1
 8005bda:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005bdc:	e075      	b.n	8005cca <HAL_SPI_TransmitReceive+0x362>
 8005bde:	bf00      	nop
 8005be0:	40013000 	.word	0x40013000
 8005be4:	50013000 	.word	0x50013000
 8005be8:	40003800 	.word	0x40003800
 8005bec:	50003800 	.word	0x50003800
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d11f      	bne.n	8005c3e <HAL_SPI_TransmitReceive+0x2d6>
 8005bfe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d01c      	beq.n	8005c3e <HAL_SPI_TransmitReceive+0x2d6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005c04:	8c3a      	ldrh	r2, [r7, #32]
 8005c06:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8005c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d216      	bcs.n	8005c3e <HAL_SPI_TransmitReceive+0x2d6>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c14:	881a      	ldrh	r2, [r3, #0]
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c1e:	1c9a      	adds	r2, r3, #2
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c3c:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d11a      	bne.n	8005c82 <HAL_SPI_TransmitReceive+0x31a>
 8005c4c:	8c3b      	ldrh	r3, [r7, #32]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d017      	beq.n	8005c82 <HAL_SPI_TransmitReceive+0x31a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	8812      	ldrh	r2, [r2, #0]
 8005c5a:	b292      	uxth	r2, r2
 8005c5c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c62:	1c9a      	adds	r2, r3, #2
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005c80:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c82:	f7fb f9bb 	bl	8000ffc <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d803      	bhi.n	8005c9a <HAL_SPI_TransmitReceive+0x332>
 8005c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c98:	d102      	bne.n	8005ca0 <HAL_SPI_TransmitReceive+0x338>
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d114      	bne.n	8005cca <HAL_SPI_TransmitReceive+0x362>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 f8bb 	bl	8005e1c <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e0a4      	b.n	8005e14 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005cca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d18f      	bne.n	8005bf0 <HAL_SPI_TransmitReceive+0x288>
 8005cd0:	8c3b      	ldrh	r3, [r7, #32]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d18c      	bne.n	8005bf0 <HAL_SPI_TransmitReceive+0x288>
 8005cd6:	e077      	b.n	8005dc8 <HAL_SPI_TransmitReceive+0x460>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d121      	bne.n	8005d2a <HAL_SPI_TransmitReceive+0x3c2>
 8005ce6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01e      	beq.n	8005d2a <HAL_SPI_TransmitReceive+0x3c2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005cec:	8c3a      	ldrh	r2, [r7, #32]
 8005cee:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d218      	bcs.n	8005d2a <HAL_SPI_TransmitReceive+0x3c2>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3320      	adds	r3, #32
 8005d02:	7812      	ldrb	r2, [r2, #0]
 8005d04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d28:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d11d      	bne.n	8005d74 <HAL_SPI_TransmitReceive+0x40c>
 8005d38:	8c3b      	ldrh	r3, [r7, #32]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d01a      	beq.n	8005d74 <HAL_SPI_TransmitReceive+0x40c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d4a:	7812      	ldrb	r2, [r2, #0]
 8005d4c:	b2d2      	uxtb	r2, r2
 8005d4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	3b01      	subs	r3, #1
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005d72:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d74:	f7fb f942 	bl	8000ffc <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d803      	bhi.n	8005d8c <HAL_SPI_TransmitReceive+0x424>
 8005d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d8a:	d102      	bne.n	8005d92 <HAL_SPI_TransmitReceive+0x42a>
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d114      	bne.n	8005dbc <HAL_SPI_TransmitReceive+0x454>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 f842 	bl	8005e1c <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e02b      	b.n	8005e14 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005dbc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d18a      	bne.n	8005cd8 <HAL_SPI_TransmitReceive+0x370>
 8005dc2:	8c3b      	ldrh	r3, [r7, #32]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d187      	bne.n	8005cd8 <HAL_SPI_TransmitReceive+0x370>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dce:	2200      	movs	r2, #0
 8005dd0:	2108      	movs	r1, #8
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 f8c2 	bl	8005f5c <SPI_WaitOnFlagUntilTimeout>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d007      	beq.n	8005dee <HAL_SPI_TransmitReceive+0x486>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005de4:	f043 0220 	orr.w	r2, r3, #32
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 f814 	bl	8005e1c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <HAL_SPI_TransmitReceive+0x4aa>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <HAL_SPI_TransmitReceive+0x4ac>
  }
  else
  {
    return HAL_OK;
 8005e12:	2300      	movs	r3, #0
  }
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3728      	adds	r7, #40	@ 0x28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699a      	ldr	r2, [r3, #24]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f042 0208 	orr.w	r2, r2, #8
 8005e3a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	699a      	ldr	r2, [r3, #24]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 0210 	orr.w	r2, r2, #16
 8005e4a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0201 	bic.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6812      	ldr	r2, [r2, #0]
 8005e66:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8005e6a:	f023 0303 	bic.w	r3, r3, #3
 8005e6e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005e7e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b04      	cmp	r3, #4
 8005e8a:	d014      	beq.n	8005eb6 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00f      	beq.n	8005eb6 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e9c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	699a      	ldr	r2, [r3, #24]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f042 0220 	orr.w	r2, r2, #32
 8005eb4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d014      	beq.n	8005eec <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00f      	beq.n	8005eec <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ed2:	f043 0204 	orr.w	r2, r3, #4
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699a      	ldr	r2, [r3, #24]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005eea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00f      	beq.n	8005f16 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005efc:	f043 0201 	orr.w	r2, r3, #1
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	699a      	ldr	r2, [r3, #24]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f14:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00f      	beq.n	8005f40 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f26:	f043 0208 	orr.w	r2, r3, #8
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f3e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8005f50:	bf00      	nop
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	603b      	str	r3, [r7, #0]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005f6c:	e010      	b.n	8005f90 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f6e:	f7fb f845 	bl	8000ffc <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d803      	bhi.n	8005f86 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f84:	d102      	bne.n	8005f8c <SPI_WaitOnFlagUntilTimeout+0x30>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e00f      	b.n	8005fb0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695a      	ldr	r2, [r3, #20]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	bf0c      	ite	eq
 8005fa0:	2301      	moveq	r3, #1
 8005fa2:	2300      	movne	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	79fb      	ldrb	r3, [r7, #7]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d0df      	beq.n	8005f6e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fc4:	095b      	lsrs	r3, r3, #5
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	3307      	adds	r3, #7
 8005fd6:	08db      	lsrs	r3, r3, #3
 8005fd8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	fb02 f303 	mul.w	r3, r2, r3
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b01      	cmp	r3, #1
 8006002:	d12e      	bne.n	8006062 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800600a:	2b01      	cmp	r3, #1
 800600c:	d101      	bne.n	8006012 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800600e:	2302      	movs	r3, #2
 8006010:	e028      	b.n	8006064 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2202      	movs	r2, #2
 800601e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0201 	bic.w	r2, r2, #1
 8006030:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800603e:	ea42 0103 	orr.w	r1, r2, r3
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	e000      	b.n	8006064 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
  }
}
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e042      	b.n	8006108 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006088:	2b00      	cmp	r3, #0
 800608a:	d106      	bne.n	800609a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7fa fdfd 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2224      	movs	r2, #36	@ 0x24
 800609e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0201 	bic.w	r2, r2, #1
 80060b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fa68 	bl	8006590 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f8c3 	bl	800624c <UART_SetConfig>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e01b      	b.n	8006108 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fae7 	bl	80066d4 <UART_CheckIdleState>
 8006106:	4603      	mov	r3, r0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08a      	sub	sp, #40	@ 0x28
 8006114:	af02      	add	r7, sp, #8
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	4613      	mov	r3, r2
 800611e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006126:	2b20      	cmp	r3, #32
 8006128:	f040 808b 	bne.w	8006242 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <HAL_UART_Transmit+0x28>
 8006132:	88fb      	ldrh	r3, [r7, #6]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e083      	b.n	8006244 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006146:	2b80      	cmp	r3, #128	@ 0x80
 8006148:	d107      	bne.n	800615a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689a      	ldr	r2, [r3, #8]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006158:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2221      	movs	r2, #33	@ 0x21
 8006166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800616a:	f7fa ff47 	bl	8000ffc <HAL_GetTick>
 800616e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	88fa      	ldrh	r2, [r7, #6]
 8006174:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	88fa      	ldrh	r2, [r7, #6]
 800617c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006188:	d108      	bne.n	800619c <HAL_UART_Transmit+0x8c>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d104      	bne.n	800619c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8006192:	2300      	movs	r3, #0
 8006194:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	e003      	b.n	80061a4 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061a0:	2300      	movs	r3, #0
 80061a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061a4:	e030      	b.n	8006208 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2200      	movs	r2, #0
 80061ae:	2180      	movs	r1, #128	@ 0x80
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 fb39 	bl	8006828 <UART_WaitOnFlagUntilTimeout>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2220      	movs	r2, #32
 80061c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e03d      	b.n	8006244 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10b      	bne.n	80061e6 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	3302      	adds	r3, #2
 80061e2:	61bb      	str	r3, [r7, #24]
 80061e4:	e007      	b.n	80061f6 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	781a      	ldrb	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	3301      	adds	r3, #1
 80061f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800620e:	b29b      	uxth	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1c8      	bne.n	80061a6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2200      	movs	r2, #0
 800621c:	2140      	movs	r1, #64	@ 0x40
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 fb02 	bl	8006828 <UART_WaitOnFlagUntilTimeout>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2220      	movs	r2, #32
 800622e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e006      	b.n	8006244 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2220      	movs	r2, #32
 800623a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	e000      	b.n	8006244 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8006242:	2302      	movs	r3, #2
  }
}
 8006244:	4618      	mov	r0, r3
 8006246:	3720      	adds	r7, #32
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800624c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006250:	b094      	sub	sp, #80	@ 0x50
 8006252:	af00      	add	r7, sp, #0
 8006254:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800625c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	4b7e      	ldr	r3, [pc, #504]	@ (800645c <UART_SetConfig+0x210>)
 8006262:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	431a      	orrs	r2, r3
 800626e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	431a      	orrs	r2, r3
 8006274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	4313      	orrs	r3, r2
 800627a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800627c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4977      	ldr	r1, [pc, #476]	@ (8006460 <UART_SetConfig+0x214>)
 8006284:	4019      	ands	r1, r3
 8006286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800628c:	430b      	orrs	r3, r1
 800628e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800629a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629c:	68d9      	ldr	r1, [r3, #12]
 800629e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	ea40 0301 	orr.w	r3, r0, r1
 80062a6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	4b6a      	ldr	r3, [pc, #424]	@ (800645c <UART_SetConfig+0x210>)
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d009      	beq.n	80062cc <UART_SetConfig+0x80>
 80062b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	4b69      	ldr	r3, [pc, #420]	@ (8006464 <UART_SetConfig+0x218>)
 80062be:	429a      	cmp	r2, r3
 80062c0:	d004      	beq.n	80062cc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c4:	6a1a      	ldr	r2, [r3, #32]
 80062c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062c8:	4313      	orrs	r3, r2
 80062ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80062d6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80062da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062e0:	430b      	orrs	r3, r1
 80062e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80062e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ea:	f023 000f 	bic.w	r0, r3, #15
 80062ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80062f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	ea40 0301 	orr.w	r3, r0, r1
 80062fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	4b59      	ldr	r3, [pc, #356]	@ (8006468 <UART_SetConfig+0x21c>)
 8006302:	429a      	cmp	r2, r3
 8006304:	d102      	bne.n	800630c <UART_SetConfig+0xc0>
 8006306:	2301      	movs	r3, #1
 8006308:	64bb      	str	r3, [r7, #72]	@ 0x48
 800630a:	e029      	b.n	8006360 <UART_SetConfig+0x114>
 800630c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	4b56      	ldr	r3, [pc, #344]	@ (800646c <UART_SetConfig+0x220>)
 8006312:	429a      	cmp	r2, r3
 8006314:	d102      	bne.n	800631c <UART_SetConfig+0xd0>
 8006316:	2302      	movs	r3, #2
 8006318:	64bb      	str	r3, [r7, #72]	@ 0x48
 800631a:	e021      	b.n	8006360 <UART_SetConfig+0x114>
 800631c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	4b53      	ldr	r3, [pc, #332]	@ (8006470 <UART_SetConfig+0x224>)
 8006322:	429a      	cmp	r2, r3
 8006324:	d102      	bne.n	800632c <UART_SetConfig+0xe0>
 8006326:	2304      	movs	r3, #4
 8006328:	64bb      	str	r3, [r7, #72]	@ 0x48
 800632a:	e019      	b.n	8006360 <UART_SetConfig+0x114>
 800632c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	4b50      	ldr	r3, [pc, #320]	@ (8006474 <UART_SetConfig+0x228>)
 8006332:	429a      	cmp	r2, r3
 8006334:	d102      	bne.n	800633c <UART_SetConfig+0xf0>
 8006336:	2308      	movs	r3, #8
 8006338:	64bb      	str	r3, [r7, #72]	@ 0x48
 800633a:	e011      	b.n	8006360 <UART_SetConfig+0x114>
 800633c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	4b4d      	ldr	r3, [pc, #308]	@ (8006478 <UART_SetConfig+0x22c>)
 8006342:	429a      	cmp	r2, r3
 8006344:	d102      	bne.n	800634c <UART_SetConfig+0x100>
 8006346:	2310      	movs	r3, #16
 8006348:	64bb      	str	r3, [r7, #72]	@ 0x48
 800634a:	e009      	b.n	8006360 <UART_SetConfig+0x114>
 800634c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	4b42      	ldr	r3, [pc, #264]	@ (800645c <UART_SetConfig+0x210>)
 8006352:	429a      	cmp	r2, r3
 8006354:	d102      	bne.n	800635c <UART_SetConfig+0x110>
 8006356:	2320      	movs	r3, #32
 8006358:	64bb      	str	r3, [r7, #72]	@ 0x48
 800635a:	e001      	b.n	8006360 <UART_SetConfig+0x114>
 800635c:	2300      	movs	r3, #0
 800635e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	4b3d      	ldr	r3, [pc, #244]	@ (800645c <UART_SetConfig+0x210>)
 8006366:	429a      	cmp	r2, r3
 8006368:	d005      	beq.n	8006376 <UART_SetConfig+0x12a>
 800636a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	4b3d      	ldr	r3, [pc, #244]	@ (8006464 <UART_SetConfig+0x218>)
 8006370:	429a      	cmp	r2, r3
 8006372:	f040 8085 	bne.w	8006480 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006378:	2200      	movs	r2, #0
 800637a:	623b      	str	r3, [r7, #32]
 800637c:	627a      	str	r2, [r7, #36]	@ 0x24
 800637e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006382:	f7fd fec9 	bl	8004118 <HAL_RCCEx_GetPeriphCLKFreq>
 8006386:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 80e8 	beq.w	8006560 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006394:	4a39      	ldr	r2, [pc, #228]	@ (800647c <UART_SetConfig+0x230>)
 8006396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800639a:	461a      	mov	r2, r3
 800639c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800639e:	fbb3 f3f2 	udiv	r3, r3, r2
 80063a2:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	4613      	mov	r3, r2
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	4413      	add	r3, r2
 80063ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d305      	bcc.n	80063c0 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063bc:	429a      	cmp	r2, r3
 80063be:	d903      	bls.n	80063c8 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80063c6:	e048      	b.n	800645a <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063ca:	2200      	movs	r2, #0
 80063cc:	61bb      	str	r3, [r7, #24]
 80063ce:	61fa      	str	r2, [r7, #28]
 80063d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d4:	4a29      	ldr	r2, [pc, #164]	@ (800647c <UART_SetConfig+0x230>)
 80063d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	2200      	movs	r2, #0
 80063de:	613b      	str	r3, [r7, #16]
 80063e0:	617a      	str	r2, [r7, #20]
 80063e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80063e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80063ea:	f7f9 ff45 	bl	8000278 <__aeabi_uldivmod>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4610      	mov	r0, r2
 80063f4:	4619      	mov	r1, r3
 80063f6:	f04f 0200 	mov.w	r2, #0
 80063fa:	f04f 0300 	mov.w	r3, #0
 80063fe:	020b      	lsls	r3, r1, #8
 8006400:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006404:	0202      	lsls	r2, r0, #8
 8006406:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006408:	6849      	ldr	r1, [r1, #4]
 800640a:	0849      	lsrs	r1, r1, #1
 800640c:	2000      	movs	r0, #0
 800640e:	460c      	mov	r4, r1
 8006410:	4605      	mov	r5, r0
 8006412:	eb12 0804 	adds.w	r8, r2, r4
 8006416:	eb43 0905 	adc.w	r9, r3, r5
 800641a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	60bb      	str	r3, [r7, #8]
 8006422:	60fa      	str	r2, [r7, #12]
 8006424:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006428:	4640      	mov	r0, r8
 800642a:	4649      	mov	r1, r9
 800642c:	f7f9 ff24 	bl	8000278 <__aeabi_uldivmod>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	4613      	mov	r3, r2
 8006436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800643a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800643e:	d308      	bcc.n	8006452 <UART_SetConfig+0x206>
 8006440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006442:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006446:	d204      	bcs.n	8006452 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8006448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800644e:	60da      	str	r2, [r3, #12]
 8006450:	e003      	b.n	800645a <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8006458:	e082      	b.n	8006560 <UART_SetConfig+0x314>
 800645a:	e081      	b.n	8006560 <UART_SetConfig+0x314>
 800645c:	46002400 	.word	0x46002400
 8006460:	cfff69f3 	.word	0xcfff69f3
 8006464:	56002400 	.word	0x56002400
 8006468:	40013800 	.word	0x40013800
 800646c:	40004400 	.word	0x40004400
 8006470:	40004800 	.word	0x40004800
 8006474:	40004c00 	.word	0x40004c00
 8006478:	40005000 	.word	0x40005000
 800647c:	08006d1c 	.word	0x08006d1c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006482:	69db      	ldr	r3, [r3, #28]
 8006484:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006488:	d13c      	bne.n	8006504 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800648a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800648c:	2200      	movs	r2, #0
 800648e:	603b      	str	r3, [r7, #0]
 8006490:	607a      	str	r2, [r7, #4]
 8006492:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006496:	f7fd fe3f 	bl	8004118 <HAL_RCCEx_GetPeriphCLKFreq>
 800649a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800649c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d05e      	beq.n	8006560 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a6:	4a39      	ldr	r2, [pc, #228]	@ (800658c <UART_SetConfig+0x340>)
 80064a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064ac:	461a      	mov	r2, r3
 80064ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80064b4:	005a      	lsls	r2, r3, #1
 80064b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	085b      	lsrs	r3, r3, #1
 80064bc:	441a      	add	r2, r3
 80064be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064ca:	2b0f      	cmp	r3, #15
 80064cc:	d916      	bls.n	80064fc <UART_SetConfig+0x2b0>
 80064ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064d4:	d212      	bcs.n	80064fc <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064d8:	b29b      	uxth	r3, r3
 80064da:	f023 030f 	bic.w	r3, r3, #15
 80064de:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064e2:	085b      	lsrs	r3, r3, #1
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	f003 0307 	and.w	r3, r3, #7
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80064ee:	4313      	orrs	r3, r2
 80064f0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80064f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80064f8:	60da      	str	r2, [r3, #12]
 80064fa:	e031      	b.n	8006560 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006502:	e02d      	b.n	8006560 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006504:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006506:	2200      	movs	r2, #0
 8006508:	469a      	mov	sl, r3
 800650a:	4693      	mov	fp, r2
 800650c:	4650      	mov	r0, sl
 800650e:	4659      	mov	r1, fp
 8006510:	f7fd fe02 	bl	8004118 <HAL_RCCEx_GetPeriphCLKFreq>
 8006514:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8006516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006518:	2b00      	cmp	r3, #0
 800651a:	d021      	beq.n	8006560 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800651c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006520:	4a1a      	ldr	r2, [pc, #104]	@ (800658c <UART_SetConfig+0x340>)
 8006522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006526:	461a      	mov	r2, r3
 8006528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800652a:	fbb3 f2f2 	udiv	r2, r3, r2
 800652e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	085b      	lsrs	r3, r3, #1
 8006534:	441a      	add	r2, r3
 8006536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	fbb2 f3f3 	udiv	r3, r2, r3
 800653e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006542:	2b0f      	cmp	r3, #15
 8006544:	d909      	bls.n	800655a <UART_SetConfig+0x30e>
 8006546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800654c:	d205      	bcs.n	800655a <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800654e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006550:	b29a      	uxth	r2, r3
 8006552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60da      	str	r2, [r3, #12]
 8006558:	e002      	b.n	8006560 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006562:	2201      	movs	r2, #1
 8006564:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656a:	2201      	movs	r2, #1
 800656c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006572:	2200      	movs	r2, #0
 8006574:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006578:	2200      	movs	r2, #0
 800657a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800657c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006580:	4618      	mov	r0, r3
 8006582:	3750      	adds	r7, #80	@ 0x50
 8006584:	46bd      	mov	sp, r7
 8006586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800658a:	bf00      	nop
 800658c:	08006d1c 	.word	0x08006d1c

08006590 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800659c:	f003 0308 	and.w	r3, r3, #8
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00a      	beq.n	80065ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00a      	beq.n	80065fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006602:	f003 0304 	and.w	r3, r3, #4
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00a      	beq.n	8006642 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006646:	f003 0320 	and.w	r3, r3, #32
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00a      	beq.n	8006664 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d01a      	beq.n	80066a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800668e:	d10a      	bne.n	80066a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	605a      	str	r2, [r3, #4]
  }
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b098      	sub	sp, #96	@ 0x60
 80066d8:	af02      	add	r7, sp, #8
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066e4:	f7fa fc8a 	bl	8000ffc <HAL_GetTick>
 80066e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d12f      	bne.n	8006758 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006700:	2200      	movs	r2, #0
 8006702:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f88e 	bl	8006828 <UART_WaitOnFlagUntilTimeout>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d022      	beq.n	8006758 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671a:	e853 3f00 	ldrex	r3, [r3]
 800671e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006722:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006726:	653b      	str	r3, [r7, #80]	@ 0x50
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	461a      	mov	r2, r3
 800672e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006730:	647b      	str	r3, [r7, #68]	@ 0x44
 8006732:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006734:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006736:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006738:	e841 2300 	strex	r3, r2, [r1]
 800673c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800673e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1e6      	bne.n	8006712 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2220      	movs	r2, #32
 8006748:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e063      	b.n	8006820 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0304 	and.w	r3, r3, #4
 8006762:	2b04      	cmp	r3, #4
 8006764:	d149      	bne.n	80067fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006766:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800676e:	2200      	movs	r2, #0
 8006770:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f857 	bl	8006828 <UART_WaitOnFlagUntilTimeout>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d03c      	beq.n	80067fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006788:	e853 3f00 	ldrex	r3, [r3]
 800678c:	623b      	str	r3, [r7, #32]
   return(result);
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006794:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	461a      	mov	r2, r3
 800679c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800679e:	633b      	str	r3, [r7, #48]	@ 0x30
 80067a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067a6:	e841 2300 	strex	r3, r2, [r1]
 80067aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1e6      	bne.n	8006780 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3308      	adds	r3, #8
 80067b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	e853 3f00 	ldrex	r3, [r3]
 80067c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f023 0301 	bic.w	r3, r3, #1
 80067c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3308      	adds	r3, #8
 80067d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067d2:	61fa      	str	r2, [r7, #28]
 80067d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d6:	69b9      	ldr	r1, [r7, #24]
 80067d8:	69fa      	ldr	r2, [r7, #28]
 80067da:	e841 2300 	strex	r3, r2, [r1]
 80067de:	617b      	str	r3, [r7, #20]
   return(result);
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1e5      	bne.n	80067b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e012      	b.n	8006820 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2220      	movs	r2, #32
 8006806:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3758      	adds	r7, #88	@ 0x58
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	4613      	mov	r3, r2
 8006836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006838:	e04f      	b.n	80068da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006840:	d04b      	beq.n	80068da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006842:	f7fa fbdb 	bl	8000ffc <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	429a      	cmp	r2, r3
 8006850:	d302      	bcc.n	8006858 <UART_WaitOnFlagUntilTimeout+0x30>
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e04e      	b.n	80068fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0304 	and.w	r3, r3, #4
 8006866:	2b00      	cmp	r3, #0
 8006868:	d037      	beq.n	80068da <UART_WaitOnFlagUntilTimeout+0xb2>
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b80      	cmp	r3, #128	@ 0x80
 800686e:	d034      	beq.n	80068da <UART_WaitOnFlagUntilTimeout+0xb2>
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2b40      	cmp	r3, #64	@ 0x40
 8006874:	d031      	beq.n	80068da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	f003 0308 	and.w	r3, r3, #8
 8006880:	2b08      	cmp	r3, #8
 8006882:	d110      	bne.n	80068a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2208      	movs	r2, #8
 800688a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 f838 	bl	8006902 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2208      	movs	r2, #8
 8006896:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e029      	b.n	80068fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068b4:	d111      	bne.n	80068da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 f81e 	bl	8006902 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e00f      	b.n	80068fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69da      	ldr	r2, [r3, #28]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	4013      	ands	r3, r2
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	bf0c      	ite	eq
 80068ea:	2301      	moveq	r3, #1
 80068ec:	2300      	movne	r3, #0
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	461a      	mov	r2, r3
 80068f2:	79fb      	ldrb	r3, [r7, #7]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d0a0      	beq.n	800683a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006902:	b480      	push	{r7}
 8006904:	b095      	sub	sp, #84	@ 0x54
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006912:	e853 3f00 	ldrex	r3, [r3]
 8006916:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800691e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	461a      	mov	r2, r3
 8006926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006928:	643b      	str	r3, [r7, #64]	@ 0x40
 800692a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800692e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006930:	e841 2300 	strex	r3, r2, [r1]
 8006934:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1e6      	bne.n	800690a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3308      	adds	r3, #8
 8006942:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	e853 3f00 	ldrex	r3, [r3]
 800694a:	61fb      	str	r3, [r7, #28]
   return(result);
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006952:	f023 0301 	bic.w	r3, r3, #1
 8006956:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3308      	adds	r3, #8
 800695e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006960:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006962:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006968:	e841 2300 	strex	r3, r2, [r1]
 800696c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800696e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e3      	bne.n	800693c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006978:	2b01      	cmp	r3, #1
 800697a:	d118      	bne.n	80069ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	60bb      	str	r3, [r7, #8]
   return(result);
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f023 0310 	bic.w	r3, r3, #16
 8006990:	647b      	str	r3, [r7, #68]	@ 0x44
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	461a      	mov	r2, r3
 8006998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800699a:	61bb      	str	r3, [r7, #24]
 800699c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	6979      	ldr	r1, [r7, #20]
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	613b      	str	r3, [r7, #16]
   return(result);
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e6      	bne.n	800697c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2220      	movs	r2, #32
 80069b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80069c2:	bf00      	nop
 80069c4:	3754      	adds	r7, #84	@ 0x54
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d101      	bne.n	80069e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80069e0:	2302      	movs	r3, #2
 80069e2:	e027      	b.n	8006a34 <HAL_UARTEx_DisableFifoMode+0x66>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2224      	movs	r2, #36	@ 0x24
 80069f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 0201 	bic.w	r2, r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006a12:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d101      	bne.n	8006a58 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a54:	2302      	movs	r3, #2
 8006a56:	e02d      	b.n	8006ab4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2224      	movs	r2, #36	@ 0x24
 8006a64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0201 	bic.w	r2, r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f84f 	bl	8006b38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d101      	bne.n	8006ad4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e02d      	b.n	8006b30 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2224      	movs	r2, #36	@ 0x24
 8006ae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0201 	bic.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f811 	bl	8006b38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d108      	bne.n	8006b5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b58:	e031      	b.n	8006bbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b5a:	2308      	movs	r3, #8
 8006b5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b5e:	2308      	movs	r3, #8
 8006b60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	0e5b      	lsrs	r3, r3, #25
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	f003 0307 	and.w	r3, r3, #7
 8006b70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	0f5b      	lsrs	r3, r3, #29
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b82:	7bbb      	ldrb	r3, [r7, #14]
 8006b84:	7b3a      	ldrb	r2, [r7, #12]
 8006b86:	4911      	ldr	r1, [pc, #68]	@ (8006bcc <UARTEx_SetNbDataToProcess+0x94>)
 8006b88:	5c8a      	ldrb	r2, [r1, r2]
 8006b8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b8e:	7b3a      	ldrb	r2, [r7, #12]
 8006b90:	490f      	ldr	r1, [pc, #60]	@ (8006bd0 <UARTEx_SetNbDataToProcess+0x98>)
 8006b92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b94:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
 8006ba2:	7b7a      	ldrb	r2, [r7, #13]
 8006ba4:	4909      	ldr	r1, [pc, #36]	@ (8006bcc <UARTEx_SetNbDataToProcess+0x94>)
 8006ba6:	5c8a      	ldrb	r2, [r1, r2]
 8006ba8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006bac:	7b7a      	ldrb	r2, [r7, #13]
 8006bae:	4908      	ldr	r1, [pc, #32]	@ (8006bd0 <UARTEx_SetNbDataToProcess+0x98>)
 8006bb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006bbe:	bf00      	nop
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	08006d34 	.word	0x08006d34
 8006bd0:	08006d3c 	.word	0x08006d3c

08006bd4 <memset>:
 8006bd4:	4402      	add	r2, r0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d100      	bne.n	8006bde <memset+0xa>
 8006bdc:	4770      	bx	lr
 8006bde:	f803 1b01 	strb.w	r1, [r3], #1
 8006be2:	e7f9      	b.n	8006bd8 <memset+0x4>

08006be4 <__libc_init_array>:
 8006be4:	b570      	push	{r4, r5, r6, lr}
 8006be6:	4d0d      	ldr	r5, [pc, #52]	@ (8006c1c <__libc_init_array+0x38>)
 8006be8:	2600      	movs	r6, #0
 8006bea:	4c0d      	ldr	r4, [pc, #52]	@ (8006c20 <__libc_init_array+0x3c>)
 8006bec:	1b64      	subs	r4, r4, r5
 8006bee:	10a4      	asrs	r4, r4, #2
 8006bf0:	42a6      	cmp	r6, r4
 8006bf2:	d109      	bne.n	8006c08 <__libc_init_array+0x24>
 8006bf4:	4d0b      	ldr	r5, [pc, #44]	@ (8006c24 <__libc_init_array+0x40>)
 8006bf6:	2600      	movs	r6, #0
 8006bf8:	4c0b      	ldr	r4, [pc, #44]	@ (8006c28 <__libc_init_array+0x44>)
 8006bfa:	f000 f817 	bl	8006c2c <_init>
 8006bfe:	1b64      	subs	r4, r4, r5
 8006c00:	10a4      	asrs	r4, r4, #2
 8006c02:	42a6      	cmp	r6, r4
 8006c04:	d105      	bne.n	8006c12 <__libc_init_array+0x2e>
 8006c06:	bd70      	pop	{r4, r5, r6, pc}
 8006c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c0c:	3601      	adds	r6, #1
 8006c0e:	4798      	blx	r3
 8006c10:	e7ee      	b.n	8006bf0 <__libc_init_array+0xc>
 8006c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c16:	3601      	adds	r6, #1
 8006c18:	4798      	blx	r3
 8006c1a:	e7f2      	b.n	8006c02 <__libc_init_array+0x1e>
 8006c1c:	08006d4c 	.word	0x08006d4c
 8006c20:	08006d4c 	.word	0x08006d4c
 8006c24:	08006d4c 	.word	0x08006d4c
 8006c28:	08006d50 	.word	0x08006d50

08006c2c <_init>:
 8006c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2e:	bf00      	nop
 8006c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c32:	bc08      	pop	{r3}
 8006c34:	469e      	mov	lr, r3
 8006c36:	4770      	bx	lr

08006c38 <_fini>:
 8006c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3a:	bf00      	nop
 8006c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3e:	bc08      	pop	{r3}
 8006c40:	469e      	mov	lr, r3
 8006c42:	4770      	bx	lr
